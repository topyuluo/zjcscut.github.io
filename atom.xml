<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Throwbale</title>
  <icon>https://www.gravatar.com/avatar/f911a15e0873ff511c29d73cd84dfa48</icon>
  <subtitle>Throwbale&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zjcscut.github.io/"/>
  <updated>2017-10-15T07:55:40.000Z</updated>
  <id>https://zjcscut.github.io/</id>
  
  <author>
    <name>throwable</name>
    <email>739805340@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hystrix使用总结</title>
    <link href="https://zjcscut.github.io/2017/10/15/hystrix/"/>
    <id>https://zjcscut.github.io/2017/10/15/hystrix/</id>
    <published>2017-10-15T05:33:49.000Z</published>
    <updated>2017-10-15T07:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在大中型分布式系统中，通常系统很多依赖。在高并发访问下,这些依赖的稳定性与否对系统的影响非常大,但是依赖有很多不可控问题:如网络连接缓慢，资源繁忙，暂时不可用，服务脱机等。在复杂的分布式架构的应用程序有很多的依赖，都会不可避免地在某些时候失败。高并发的依赖失败时如果没有隔离措施，当前应用服务就有被拖垮的风险。一般来说，随着服务依赖数量的变多，服务不稳定的概率会成指数性提高<br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>在大中型分布式系统中，通常系统很多依赖。在高并发访问下,这些依赖的稳定性与否对系统的影响非常大,但是依赖有很多不可控问题:如网络连接缓慢，资源繁忙，暂时不可用，服务脱机等。在复杂的分布式架构的应用程序有很多的依赖，都会不可避免地在某些时候失败。高并发的依赖失败时如果没有隔离措施，当前应用服务就有被拖垮的风险。一般来说，随着服务依赖数量的变多，服务不稳定的概率会成指数性提高。例如：</p><p>一个依赖30个SOA服务的系统,每个服务99.99%可用。<br>99.99%的30次方 ≈ 99.7%，<br>0.3% 意味着一亿次请求 会有 3,000,00次失败，<br>换算成时间大约每月有2个小时服务不稳定。<br>解决这个问题的方案是对依赖进行隔离。Hystrix就是处理依赖隔离的框架,同时也是可以帮我们做依赖服务的治理和监控。Hystrix英文翻译就是豪猪，豪猪科动物以棘刺闻名，棘刺有保护御敌作用。Netflix自称Hystrix在其内部的使用规模如下：</p><p>The Netflix API processes 10+ billion HystrixCommand executions per day using thread isolation.<br>Each API instance has 40+ thread-pools with 5-20 threads in each (most are set to 10).<br>[Netflix API每天使用线程隔离处理100+亿次的HystrixCommand。<br>每个API实例都有40多个线程池，每个线程池都有5-20个线程(大多数都设置为10个线程)。]<br>PS：本文使用VScode编写，如果需要使用[TOC]目录导航，可以使用Typora打开。</p><h1 id="二、Hystrix依赖隔离的原理"><a href="#二、Hystrix依赖隔离的原理" class="headerlink" title="二、Hystrix依赖隔离的原理"></a>二、Hystrix依赖隔离的原理</h1><p>Hystrix使用命令模式(Command)包装依赖调用逻辑，每个命令在单独线程中/信号授权下执行。<br>可配置依赖调用超时时间,超时时间一般设为比99.5%平均时间略高即可。当调用超时时，直接返回或执行fallback（降级）逻辑。<br>为每个依赖提供一个小的线程池（或信号），如果线程池已满调用将被立即拒绝，默认不采用排队（使用SynchronousQueue和拒绝策略），加速失败判定时间(快速失败)。<br>依赖调用结果分：成功，失败（抛出异常），超时，线程拒绝，短路。请求失败(异常，拒绝，超时，短路)时执行fallback(降级)逻辑。<br>提供熔断器组件（下一个小节详细说明）。<br>提供近实时依赖的统计和监控（详细的metrics（度量）信息）。</p><h1 id="三、Hystrix熔断机制"><a href="#三、Hystrix熔断机制" class="headerlink" title="三、Hystrix熔断机制"></a>三、Hystrix熔断机制</h1><p>下面简单说明一下Hystrix的熔断机制。是否开启熔断器主要由依赖调用的错误比率决定的，依赖调用的错误比率=请求失败数/请求总数。Hystrix中断路器打开的默认请求错误比率为50%（这里暂时称为请求错误率），还有一个参数，用于设置在一个滚动窗口中，打开断路器的最少请求数（这里暂时称为滚动窗口最小请求数），这里举个具体的例子：如果滚动窗口最小请求数为20，在一个窗口内（比如10秒，统计滚动窗口的时间可以设置，见下面的参数详解），收到19个请求，即使这19个请求都失败了，此时请求错误率高达95%，但是断路器也不会打开。对于被熔断的请求，并不是永久被切断，而是被暂停一段时间（默认是5000ms）之后，允许部分请求通过，若请求都是健康的（ResponseTime&lt;250ms）则对请求健康恢复（取消熔断），如果不是健康的，则继续熔断。（这里很容易出现一种错觉：多个请求失败但是没有触发熔断。这是因为在一个滚动窗口内的失败请求数没有达到打开断路器的最少请求数）</p><h1 id="四、Hystrix配置参数详细说明"><a href="#四、Hystrix配置参数详细说明" class="headerlink" title="四、Hystrix配置参数详细说明"></a>四、Hystrix配置参数详细说明</h1><p>内置全局默认值（Global default from code）<br>如果下面3种都没有设置，默认是使用此种，后面用”默认值”代指这种。</p><p>动态全局默认属性（Dynamic global default property）<br>可以通过属性配置来更改全局默认值，后面用”默认属性”代指这种。</p><p>内置实例默认值（Instance default from code）<br>在代码中，设置的属性值，后面用”实例默认”来代指这种。</p><p>动态配置实例属性（Dynamic instance property）<br>可以针对特定的实例，动态配置属性值，来代替前面三种，后面用”实例属性”来代指这种。</p><p>优先级：1 &lt; 2 &lt; 3 &lt; 4。 这些配置基本上可以从com.netflix.hystrix.HystrixCommandProperties和com.netflix.hystrix.HystrixThreadPoolProperties查看。</p><h2 id="基础属性配置"><a href="#基础属性配置" class="headerlink" title="基础属性配置"></a>基础属性配置</h2><h4 id="CommandGroup"><a href="#CommandGroup" class="headerlink" title="CommandGroup"></a>CommandGroup</h4><p>CommandGroup是每个命令最少配置的必选参数，在不指定ThreadPoolKey的情况下，字面值用于对不同依赖的线程池/信号区分，也就是在不指定ThreadPoolKey的情况下,CommandGroup用于指定线程池的隔离。命令分组用于对依赖操作分组，便于统计、汇总等。</p><ul><li>实例属性：com.netflix.hystrix.HystrixCommandGroupKey</li><li>实例配置：HystrixCommand.Setter().withGroupKey (HystrixCommandGroupKey.Factory.asKey(“Group”));</li><li>注解使用：@HystrixCommand(groupKey = “Group”)</li></ul><h4 id="CommandKey"><a href="#CommandKey" class="headerlink" title="CommandKey"></a>CommandKey</h4><p>CommandKey是作为依赖命名，一般来说每个CommandKey代表一个依赖抽象，相同的依赖要使用相同的CommandKey名称。依赖隔离的根本就是对相同CommandKey的依赖做隔离。不同的依赖隔离最好使用不同的线程池（定义不同的ThreadPoolKey）。从HystrixCommand源码的注释也可以看到CommandKey也用于对依赖操作统计、汇总等。</p><ul><li>实例属性：com.netflix.hystrix.HystrixCommandKey</li><li>实例配置：HystrixCommand.Setter().andCommandKey(HystrixCommandKey.Factory.asKey(“Key”))</li><li>注解使用：@HystrixCommand(commandKey = “Key”)</li></ul><h4 id="ThreadPoolKey"><a href="#ThreadPoolKey" class="headerlink" title="ThreadPoolKey"></a>ThreadPoolKey</h4><p>ThreadPoolKey简单来说就是依赖隔离使用的线程池的键值。当对同一业务依赖做隔离时使用CommandGroup做区分，但是对同一依赖的不同远程调用如(一个是redis 一个是http)，可以使用HystrixThreadPoolKey做隔离区分。 虽然在业务上都是相同的组，但是需要在资源上做隔离时，可以使用HystrixThreadPoolKey区分。（对于每个不同的HystrixThreadPoolKey建议使用不同的CommandKey）</p><ul><li>实例属性：com.netflix.hystrix.HystrixThreadPoolKey</li><li>实例配置：HystrixCommand.Setter().andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(“Thread”))</li><li>注解使用：@HystrixCommand(threadPoolKey = “Thread”)</li></ul><h2 id="命令属性配置"><a href="#命令属性配置" class="headerlink" title="命令属性配置"></a>命令属性配置</h2><h2 id="1-执行属性"><a href="#1-执行属性" class="headerlink" title="(1)执行属性"></a>(1)执行属性</h2><h4 id="execution-isolation-strategy"><a href="#execution-isolation-strategy" class="headerlink" title="execution.isolation.strategy"></a>execution.isolation.strategy</h4><p>用于设置HystrixCommand执行的隔离策略，有两种选项：</p><p>THREAD —— 在固定大小线程池中，以单独线程执行，并发请求数受限于线程池大小。</p><p>SEMAPHORE —— 在调用线程中执行，通过信号量来限制并发量。</p><ul><li>默认值：THREAD（ExecutionIsolationStrategy.THREAD）</li><li>可选值：THREAD，SEMAPHORE</li><li>默认属性：hystrix.command.default.execution.isolation.strategy</li><li>实例属性：hystrix.command.HystrixCommandKey.execution.isolation.strategy</li><li>实例配置： HystrixCommandProperties.Setter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.THREAD)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “execution.isolation.strategy”,value = “THREAD”)})</li></ul><h4 id="execution-isolation-thread-timeoutInMilliseconds"><a href="#execution-isolation-thread-timeoutInMilliseconds" class="headerlink" title="execution.isolation.thread.timeoutInMilliseconds"></a>execution.isolation.thread.timeoutInMilliseconds</h4><p>设置调用者等待命令执行的超时限制，超过此时间，HystrixCommand被标记为TIMEOUT，并执行回退逻辑。</p><p>注意：超时会作用在HystrixCommand.queue()，即使调用者没有调用get()去获得Future对象。</p><ul><li>默认值：1000（毫秒）</li><li>默认属性：hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</li><li>实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds</li><li>实例配置：HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(int Value);</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “execution.isolation.thread.timeoutInMilliseconds”,value = “2000”)})</li></ul><h4 id="execution-timeout-enabled"><a href="#execution-timeout-enabled" class="headerlink" title="execution.timeout.enabled"></a>execution.timeout.enabled</h4><p>设置HystrixCommand的执行是否有超时限制。</p><ul><li>默认值：true</li><li>默认属性：hystrix.command.default.execution.timeout.enabled</li><li>实例属性：hystrix.command.HystrixCommandKey.execution.timeout.enabled</li><li>实例配置：HystrixCommandProperties.Setter().withExecutionTimeoutEnabled(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “execution.timeout.enabled”,value = “true”)})</li></ul><h4 id="execution-isolation-thread-interruptOnTimeout"><a href="#execution-isolation-thread-interruptOnTimeout" class="headerlink" title="execution.isolation.thread.interruptOnTimeout"></a>execution.isolation.thread.interruptOnTimeout</h4><p>设置HystrixCommand的执行是否在超时发生时被中断。使用线程隔离时，是否对命令执行超时的线程调用中断（Thread.interrupt()）操作。</p><ul><li>默认值：true</li><li>默认属性：hystrix.command.default.execution.isolation.thread.interruptOnTimeout</li><li>实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnTimeout</li><li>实例配置：HystrixCommandProperties.Setter().withExecutionIsolationThreadInterruptOnTimeout(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “execution.isolation.thread.interruptOnTimeout”,value = “true”)})</li></ul><h4 id="execution-isolation-thread-interruptOnCancel"><a href="#execution-isolation-thread-interruptOnCancel" class="headerlink" title="execution.isolation.thread.interruptOnCancel"></a>execution.isolation.thread.interruptOnCancel</h4><p>当HystrixCommand命令执行发生cancel事件后是否应该响应中断。</p><ul><li>默认值：false</li><li>默认属性：hystrix.command.default.execution.isolation.thread.interruptOnCancel</li><li>实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnCancel</li><li>实例配置：HystrixCommandProperties.Setter().withExecutionIsolationThreadInterruptOnCancel(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “execution.isolation.thread.interruptOnCancel”,value = “false”)})</li></ul><h4 id="execution-isolation-semaphore-maxConcurrentRequests"><a href="#execution-isolation-semaphore-maxConcurrentRequests" class="headerlink" title="execution.isolation.semaphore.maxConcurrentRequests"></a>execution.isolation.semaphore.maxConcurrentRequests</h4><p>设置当使用ExecutionIsolationStrategy.SEMAPHORE时，HystrixCommand执行方法允许的最大请求数。如果达到最大并发数时，后续请求会被拒绝。信号量应该是容器（比如Tomcat）线程池一小部分，不能等于或者略小于容器线程池大小，否则起不到保护作用。</p><ul><li>默认值：10</li><li>默认属性：hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests</li><li>实例属性：hystrix.command.HystrixCommandKey.execution.isolation.semaphore.maxConcurrentRequests</li><li>实例配置：HystrixCommandProperties.Setter().withExecutionIsolationSemaphoreMaxConcurrentRequests(int Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “execution.isolation.semaphore.maxConcurrentRequests”,value = “10”)})</li></ul><h2 id="2-回退属性"><a href="#2-回退属性" class="headerlink" title="(2)回退属性"></a>(2)回退属性</h2><p>下面的属性控制HystrixCommand.getFallback()执行。这些属性对ExecutionIsolationStrategy.THREAD和ExecutionIsolationStrategy.SEMAPHORE都有效。</p><h4 id="fallback-isolation-semaphore-maxConcurrentRequests"><a href="#fallback-isolation-semaphore-maxConcurrentRequests" class="headerlink" title="fallback.isolation.semaphore.maxConcurrentRequests"></a>fallback.isolation.semaphore.maxConcurrentRequests</h4><p>设置调用线程产生的HystrixCommand.getFallback()方法的允许最大请求数目。如果达到最大并发数目，后续请求将会被拒绝，如果没有实现回退，则抛出异常。(这里需要注意一点，这个变量的命名不是很规范，它实际上对THREAD和SEMAPHORE两种隔离策略都生效)</p><ul><li>默认值：10</li><li>默认属性：hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests</li><li>实例属性：hystrix.command.HystrixCommandKey.fallback.isolation.semaphore.maxConcurrentRequests</li><li>实例配置：HystrixCommandProperties.Setter().withFallbackIsolationSemaphoreMaxConcurrentRequests(int Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “fallback.isolation.semaphore.maxConcurrentRequests”,value = “10”)})</li></ul><h4 id="fallback-enabled"><a href="#fallback-enabled" class="headerlink" title="fallback.enabled"></a>fallback.enabled</h4><p>该属性决定当前的调用故障或者拒绝发生时，是否调用HystrixCommand.getFallback()。</p><ul><li>默认值：true</li><li>默认属性：hystrix.command.default.fallback.enabled</li><li>实例属性：hystrix.command.HystrixCommandKey.fallback.enabled</li><li>实例配置：HystrixCommandProperties.Setter().withFallbackEnabled(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “fallback.enabled”,value = “true”)})</li></ul><h2 id="3-断路器（Circuit-Breaker）属性配置"><a href="#3-断路器（Circuit-Breaker）属性配置" class="headerlink" title="(3)断路器（Circuit Breaker）属性配置"></a>(3)断路器（Circuit Breaker）属性配置</h2><h4 id="circuitBreaker-enabled"><a href="#circuitBreaker-enabled" class="headerlink" title="circuitBreaker.enabled"></a>circuitBreaker.enabled</h4><p>设置断路器是否生效。</p><ul><li>默认值：true</li><li>默认属性：hystrix.command.default.circuitBreaker.enabled</li><li>实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.enabled</li><li>实例配置：HystrixCommandProperties.Setter().withCircuitBreakerEnabled(boolean value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “circuitBreaker.enabled”,value = “true”)})</li></ul><h4 id="circuitBreaker-requestVolumeThreshold"><a href="#circuitBreaker-requestVolumeThreshold" class="headerlink" title="circuitBreaker.requestVolumeThreshold"></a>circuitBreaker.requestVolumeThreshold</h4><p>设置在一个滚动窗口中，打开断路器的最少请求数。比如：如果值是20，在一个窗口内（比如10秒），收到19个请求，即使这19个请求都失败了，断路器也不会打开。(滚动窗口时间段的长度设置见下面的metrics.rollingStats.timeInMilliseconds)</p><ul><li>默认值：20</li><li>默认属性：hystrix.command.default.circuitBreaker.requestVolumeThreshold</li><li>实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.requestVolumeThreshold</li><li>实例配置：HystrixCommandProperties.Setter().withCircuitBreakerRequestVolumeThreshold(int Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “circuitBreaker.requestVolumeThreshold”,value = “20”)})</li></ul><h4 id="circuitBreaker-sleepWindowInMilliseconds"><a href="#circuitBreaker-sleepWindowInMilliseconds" class="headerlink" title="circuitBreaker.sleepWindowInMilliseconds"></a>circuitBreaker.sleepWindowInMilliseconds</h4><p>设置在断路器被打开，拒绝请求到再次尝试请求的时间间隔。</p><ul><li>默认值：5000（毫秒）</li><li>默认属性：hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds</li><li>实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.sleepWindowInMilliseconds</li><li>实例配置：HystrixCommandProperties.Setter().withCircuitBreakerSleepWindowInMilliseconds(int Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “circuitBreaker.sleepWindowInMilliseconds”,value = “5000”)})</li></ul><h4 id="circuitBreaker-errorThresholdPercentage"><a href="#circuitBreaker-errorThresholdPercentage" class="headerlink" title="circuitBreaker.errorThresholdPercentage"></a>circuitBreaker.errorThresholdPercentage</h4><p>设置打开断路器并启动回退逻辑的错误比率。（这个参数的效果受到circuitBreaker.requestVolumeThreshold和滚动时间窗口的时间长度影响）</p><ul><li>默认值：50(%)</li><li>默认属性：hystrix.command.default.circuitBreaker.errorThresholdPercentage</li><li>实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.errorThresholdPercentage</li><li>实例配置：HystrixCommandProperties.Setter().withCircuitBreakerErrorThresholdPercentage(int Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “circuitBreaker.errorThresholdPercentage”,value = “50”)})</li></ul><h4 id="circuitBreaker-forceOpen"><a href="#circuitBreaker-forceOpen" class="headerlink" title="circuitBreaker.forceOpen"></a>circuitBreaker.forceOpen</h4><p>如果该属性设置为true，强制断路器进入打开状态，将会拒绝所有的请求。该属性优先级比circuitBreaker.forceClosed高。</p><ul><li>默认值：false</li><li>默认属性：hystrix.command.default.circuitBreaker.forceOpen</li><li>实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.forceOpen</li><li>实例配置：HystrixCommandProperties.Setter().withCircuitBreakerForceOpen(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “circuitBreaker.forceOpen”,value = “false”)})</li></ul><h4 id="circuitBreaker-forceClosed"><a href="#circuitBreaker-forceClosed" class="headerlink" title="circuitBreaker.forceClosed"></a>circuitBreaker.forceClosed</h4><p>如果该属性设置为true，强制断路器进入关闭状态，将会允许所有的请求，无视错误率。</p><ul><li>默认值：false</li><li>默认属性：hystrix.command.default.circuitBreaker.forceClosed</li><li>实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.forceClosed</li><li>实例配置：HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “circuitBreaker.forceClosed”,value = “false”)})</li></ul><h2 id="4-请求上下文属性配置"><a href="#4-请求上下文属性配置" class="headerlink" title="(4)请求上下文属性配置"></a>(4)请求上下文属性配置</h2><h4 id="requestCache-enabled"><a href="#requestCache-enabled" class="headerlink" title="requestCache.enabled"></a>requestCache.enabled</h4><p>设置HystrixCommand.getCacheKey()是否启用，由HystrixRequestCache通过请求缓存提供去重复数据功能。（请求结果缓存需要配合HystrixRequestContext使用，具体应用可以自行查阅）</p><ul><li>默认值：true</li><li>默认属性：hystrix.command.default.requestCache.enabled</li><li>实例属性：hystrix.command.HystrixCommandKey.requestCache.enabled</li><li>实例配置：HystrixCommandProperties.Setter().withRequestCacheEnabled(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “requestCache.enabled”,value = “true”)})</li></ul><h4 id="requestLog-enabled"><a href="#requestLog-enabled" class="headerlink" title="requestLog.enabled"></a>requestLog.enabled</h4><p>设置HystrixCommand执行和事件是否要记录日志到HystrixRequestLog。</p><ul><li>默认值：true</li><li>默认属性：hystrix.command.default.requestLog.enabled</li><li>实例属性：hystrix.command.HystrixCommandKey.requestLog.enabled</li><li>实例配置：HystrixCommandProperties.Setter().withRequestLogEnabled(boolean Value)</li><li>注解使用：@HystrixCommand(commandProperties = { @HystrixProperty(name = “requestLog.enabled”,value = “true”)})</li></ul><h2 id="5-压缩器属性配置"><a href="#5-压缩器属性配置" class="headerlink" title="(5)压缩器属性配置"></a>(5)压缩器属性配置</h2><p>HystrixCollapser主要用于请求的合并，在Hystrix注解体系中它有一个独立的注解@HystrixCollapser。</p><h4 id="maxRequestsInBatch"><a href="#maxRequestsInBatch" class="headerlink" title="maxRequestsInBatch"></a>maxRequestsInBatch</h4><p>设置触发批处理执行之前，在批处理中允许的最大请求数。</p><ul><li>默认值：Integer.MAX_VALUE</li><li>默认属性：hystrix.collapser.default.maxRequestsInBatch</li><li>实例属性：hystrix.collapser.HystrixCollapserKey.maxRequestsInBatch</li><li>实例配置：HystrixCollapserProperties.Setter().withMaxRequestsInBatch(int Value)</li><li>注解使用：@HystrixCollapser(collapserProperties = { @HystrixProperty(name = “maxRequestsInBatch”,value = “100”)})</li></ul><h4 id="timerDelayInMilliseconds"><a href="#timerDelayInMilliseconds" class="headerlink" title="timerDelayInMilliseconds"></a>timerDelayInMilliseconds</h4><p>设置批处理创建到执行之间的毫秒数，实际上就是这个时间间隔内发生的所有请求都会进行合并（为一个请求）。</p><ul><li>默认值：10(毫秒)</li><li>默认属性：hystrix.collapser.default.timerDelayInMilliseconds</li><li>实例属性：hystrix.collapser.HystrixCollapserKey.timerDelayInMilliseconds</li><li>实例配置：HystrixCollapserProperties.Setter().withTimerDelayInMilliseconds(int Value)</li><li>注解使用：@HystrixCollapser(collapserProperties = { @HystrixProperty(name = “timerDelayInMilliseconds”,value = “100”)})</li></ul><h4 id="requestCache-enabled-1"><a href="#requestCache-enabled-1" class="headerlink" title="requestCache.enabled"></a>requestCache.enabled</h4><p>设置请求缓存是否对HystrixCollapser.execute()和HystrixCollapser.queue()的调用起作用。（请求结果缓存需要配合HystrixRequestContext使用，具体应用可以自行查阅）</p><ul><li>默认值：true</li><li>默认属性：hystrix.collapser.default.requestCache.enabled</li><li>实例属性：hystrix.collapser.HystrixCollapserKey.requestCache.enabled</li><li>实例配置：HystrixCollapserProperties.Setter().withRequestCacheEnabled(boolean Value)</li><li>注解使用：@HystrixCollapser(collapserProperties = { @HystrixProperty(name = “requestCache.enabled”,value = “true”)})</li></ul><h2 id="6-线程池属性配置"><a href="#6-线程池属性配置" class="headerlink" title="(6)线程池属性配置"></a>(6)线程池属性配置</h2><h4 id="coreSize"><a href="#coreSize" class="headerlink" title="coreSize"></a>coreSize</h4><p>设置核心线程池的大小（这个值和ThreadPoolExecutor的coreSize的含义不一样）。</p><ul><li>默认值：10</li><li>默认属性：hystrix.threadpool.default.coreSize</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolKey.coreSize</li><li>实例配置：HystrixThreadPoolProperties.Setter().withCoreSize(int Value)</li><li>注解使用： @HystrixCommand(threadPoolProperties = {@HystrixProperty(name = “coreSize”,value = “10”)})</li></ul><h4 id="maximumSize"><a href="#maximumSize" class="headerlink" title="maximumSize"></a>maximumSize</h4><p>1.5.9新增属性，设置线程池最大值。这个是在不开始拒绝HystrixCommand的情况下支持的最大并发数。这个属性起作用的前提是设置了allowMaximumSizeToDrivergeFromCoreSize。1.5.9之前，核心线程池大小和最大线程池大小总是相同的。</p><ul><li>默认值：10</li><li>默认属性：hystrix.threadpool.default.maximumSize</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolKey.maximumSize</li><li>实例配置：HystrixThreadPoolProperties.Setter().withMaximumSize(int Value)</li><li>注解使用： @HystrixCommand(threadPoolProperties = {@HystrixProperty(name = “maximumSize”,value = “10”)})</li></ul><h4 id="maxQueueSize"><a href="#maxQueueSize" class="headerlink" title="maxQueueSize"></a>maxQueueSize</h4><p>设置BlockingQueue最大的队列值。如果设置为-1，那么使用SynchronousQueue，否则正数将会使用LinkedBlockingQueue。如果需要去除这些限制，允许队列动态变化，可以参考queueSizeRejectionThreshold属性。 修改SynchronousQueue和LinkedBlockingQueue需要重启。</p><ul><li>默认值：-1</li><li>默认属性：hystrix.threadpool.default.maxQueueSize</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolKey.maxQueueSize</li><li>实例配置：HystrixThreadPoolProperties.Setter().withMaxQueueSize(int Value)</li><li>注解使用： @HystrixCommand(threadPoolProperties = {@HystrixProperty(name = “maxQueueSize”,value = “10”)})</li></ul><h4 id="queueSizeRejectionThreshold"><a href="#queueSizeRejectionThreshold" class="headerlink" title="queueSizeRejectionThreshold"></a>queueSizeRejectionThreshold</h4><p>设置队列拒绝的阈值—-一个人为设置的拒绝访问的最大队列值，即使当前队列元素还没达到maxQueueSize。 当将一个线程放入队列等待执行时，HystrixCommand使用该属性。注意：如果maxQueueSize设置为-1，该属性不可用。</p><ul><li>默认值：5</li><li>默认属性：hystrix.threadpool.default.queueSizeRejectionThreshold</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolKey.queueSizeRejectionThreshold</li><li>实例默认的设置：HystrixThreadPoolProperties.Setter().withQueueSizeRejectionThreshold(int Value)</li><li>注解使用： @HystrixCommand(threadPoolProperties = {@HystrixProperty(name = “queueSizeRejectionThreshold”,value = “5”)})</li></ul><h4 id="keepAliveTimeMinutes"><a href="#keepAliveTimeMinutes" class="headerlink" title="keepAliveTimeMinutes"></a>keepAliveTimeMinutes</h4><p>设置存活时间，单位分钟。如果coreSize小于maximumSize，那么该属性控制一个线程从实用完成到被释放的时间。</p><ul><li>默认值：1</li><li>默认属性：hystrix.threadpool.default.keepAliveTimeMinutes</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolKey.keepAliveTimeMinutes</li><li>实例配置：HystrixThreadPoolProperties.Setter().withKeepAliveTimeMinutes(int Value)</li><li>注解使用： @HystrixCommand(threadPoolProperties = {@HystrixProperty(name = “keepAliveTimeMinutes”,value = “1”)})</li></ul><h4 id="allowMaximumSizeToDivergeFromCoreSize"><a href="#allowMaximumSizeToDivergeFromCoreSize" class="headerlink" title="allowMaximumSizeToDivergeFromCoreSize"></a>allowMaximumSizeToDivergeFromCoreSize</h4><p>在1.5.9中新增的属性。该属性允许maximumSize起作用。属性值可以等于或者大于coreSize值，设置coreSize小于maximumSize的线程池能够支持maximumSize的并发数，但是会将不活跃的线程返回到系统中去。（详见KeepAliveTimeMinutes） </p><ul><li>默认值：false </li><li>默认属性：hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolKey.allowMaximumSizeToDivergeFromCoreSize <ul><li>实例配置：HystrixThreadPoolProperties.Setter().withAllowMaximumSizeToDivergeFromCoreSize(boolean Value)</li></ul></li></ul><h2 id="7-度量属性配置"><a href="#7-度量属性配置" class="headerlink" title="(7)度量属性配置"></a>(7)度量属性配置</h2><p>PS:不知道什么原因，计量属性的配置都是放在了线程池配置里面。可能是由于线程池隔离是计量属性隔离的基准。</p><h4 id="metrics-rollingStats-timeInMilliseconds"><a href="#metrics-rollingStats-timeInMilliseconds" class="headerlink" title="metrics.rollingStats.timeInMilliseconds"></a>metrics.rollingStats.timeInMilliseconds</h4><p>设置统计的滚动窗口的时间段大小。该属性是线程池保持指标时间长短。</p><ul><li>默认值：10000（毫秒）</li><li>默认属性：hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolKey.metrics.rollingStats.timeInMilliseconds</li><li>实例配置：HystrixThreadPoolProperties.Setter().withMetricsRollingStatisticalWindowInMilliseconds(int Value)</li><li>注解使用： @HystrixCommand(threadPoolProperties = {@HystrixProperty(name = “metrics.rollingStats.timeInMilliseconds”,value = “10000”)})</li></ul><h4 id="metrics-rollingStats-numBuckets"><a href="#metrics-rollingStats-numBuckets" class="headerlink" title="metrics.rollingStats.numBuckets"></a>metrics.rollingStats.numBuckets</h4><p>设置滚动的统计窗口被分成的桶（bucket）的数目。注意：”metrics.rollingStats.timeInMilliseconds % metrics.rollingStats.numBuckets == 0”必须为true，否则会抛出异常。</p><ul><li>默认值：10</li><li>可能的值：任何能被metrics.rollingStats.timeInMilliseconds整除的值。</li><li>默认属性：hystrix.threadpool.default.metrics.rollingStats.numBuckets</li><li>实例属性：hystrix.threadpool.HystrixThreadPoolProperties.metrics.rollingStats.numBuckets</li><li>实例配置：HystrixThreadPoolProperties.Setter().withMetricsRollingStatisticalWindowBuckets(int Value)</li><li>注解使用： @HystrixCommand(threadPoolProperties = {@HystrixProperty(name = “metrics.rollingStats.numBuckets”,value = “10”)})</li></ul><h1 id="五、Hystrix基于编程式和注解使用详解"><a href="#五、Hystrix基于编程式和注解使用详解" class="headerlink" title="五、Hystrix基于编程式和注解使用详解"></a>五、Hystrix基于编程式和注解使用详解</h1><h2 id="编程式使用Hystrix"><a href="#编程式使用Hystrix" class="headerlink" title="编程式使用Hystrix"></a>编程式使用Hystrix</h2><h3 id="（1）HystrixCommand-vs-HystrixObservableCommand"><a href="#（1）HystrixCommand-vs-HystrixObservableCommand" class="headerlink" title="（1）HystrixCommand vs HystrixObservableCommand"></a>（1）HystrixCommand vs HystrixObservableCommand</h3><p>想要编程式使用Hystrix，只需要继承<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>，这两者的主要区别是：</p><ul><li><code>HystrixCommand</code>的命令逻辑写在run()；<code>HystrixObservableCommand</code>的命令逻辑写在construct()。</li><li><code>HystrixCommand</code>的run()是由新创建的线程执行；<code>HystrixObservableCommand</code>的construct()是由调用程序线程执行。</li><li><code>HystrixCommand</code>一个实例只能向调用程序发送（emit）单条数据，也就是run()只能返回一个结果；<br><code>HystrixObservableCommand</code>一个实例可以顺序发送多条数据，顺序调用多个onNext()，便实现了向调用程序发送多条数据，甚至还能发送一个范围的数据集。</li></ul><h3 id="（2）4个命令执行方法"><a href="#（2）4个命令执行方法" class="headerlink" title="（2）4个命令执行方法"></a>（2）4个命令执行方法</h3><p>execute()、queue()、observe()、toObservable()这4个方法用来触发执行run()/construct()，一个实例只能执行一次这4个方法，特别说明的是<code>HystrixObservableCommand</code>没有execute()和queue()，<code>HystrixCommand</code>对应run()，<code>HystrixObservableCommand</code>对应construct()。这4个方法的主要区别如下：</p><ul><li>execute()：以同步堵塞方式执行run()。<code>HystrixCommand</code>实例调用execute()后，hystrix先创建一个新线程运行run()，接着调用程序要在execute()调用处一直堵塞着，直到run()运行完成。</li><li>queue()：以异步非堵塞方式执行run()。<code>HystrixCommand</code>实例调用queue()就直接返回一个Future对象，同时hystrix创建一个新线程运行run()，调用程序通过Future.get()拿到run()的返回结果，而Future.get()是堵塞执行的。</li><li>observe()：<strong>事件注册前</strong>执行run()/construct()。第一步是事件注册前，先调用observe()自动触发执行run()/construct()（如果继承的是<code>HystrixCommand</code>，hystrix将创建新线程非堵塞执行run()；如果继承的是<code>HystrixObservableCommand</code>，将以调用程序线程堵塞执行construct()），第二步是从observe()返回后调用程序调用subscribe()完成事件注册，如果run()/construct()执行成功则触发onNext()和onCompleted()，如果执行异常则触发onError()。</li><li>toObservable()：<strong>事件注册后</strong>执行run()/construct()。第一步是事件注册前，一调用toObservable()就直接返回一个Observable<t>对象，第二步调用subscribe()完成事件注册后自动触发执行run()/construct()（如果继承的是<code>HystrixCommand</code>，hystrix将创建新线程非堵塞执行run()，调用程序不必等待run()；如果继承的是<code>HystrixObservableCommand</code>，将以调用程序线程堵塞执行construct()，调用程序等待construct()执行完才能继续往下走），如果run()/construct()执行成功则触发onNext()和onCompleted()，如果执行异常则触发onError()。</t></li></ul><h3 id="（3）fallback（降级）"><a href="#（3）fallback（降级）" class="headerlink" title="（3）fallback（降级）"></a>（3）fallback（降级）</h3><p>使用fallback机制很简单，继承<code>HystrixCommand</code>只需重写<code>getFallback()</code>，继承<code>HystrixObservableCommand</code>只需重写<code>resumeWithFallback()</code>。fallback实际流程是当run()/construct()被触发执行时或执行中发生错误时，将转向执行getFallback()/resumeWithFallback()。调用程序可以通过isResponseFromFallback()查询结果是由run()/construct()还是getFallback()/resumeWithFallback()返回的。下面的情况会触发fallback：</p><ul><li>非HystrixBadRequestException异常：当抛出HystrixBadRequestException时，调用程序可以捕获异常，此时不会触发fallback，而其他异常则会触发fallback，调用程序将获得fallback逻辑的返回结果。</li><li>run()/construct()运行超时：执行命令的方法超时，将会触发fallback。</li><li>熔断器开启：当熔断器处于开启的状态，将会触发fallback。</li><li>线程池/信号量已满：当线程池/信号量已满的状态，将会触发fallback。</li></ul><p><strong>这里需要注意：触发了降级逻辑不一定是熔断器开启，但是熔断器开启一定会执行降级逻辑</strong>。</p><h3 id="例子1（四种命令执行方法的结果获取）："><a href="#例子1（四种命令执行方法的结果获取）：" class="headerlink" title="例子1（四种命令执行方法的结果获取）："></a>例子1（四种命令执行方法的结果获取）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommand;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandGroupKey;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandKey;</div><div class="line"><span class="keyword">import</span> rx.Observable;</div><div class="line"><span class="keyword">import</span> rx.Observer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> throwable</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/28 15:32</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldCommand</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="comment">//最小配置,指定groupKey</span></div><div class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"helloWorldGroup"</span>))</div><div class="line">                <span class="comment">//commonKey代表一个依赖抽象,相同的依赖要用相同的commonKey,依赖隔离的根本就是依据commonKey进行隔离</span></div><div class="line">        .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"helloWorld"</span>)));</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">",current thread:"</span> + Thread.currentThread().getName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        HelloWorldCommand command = <span class="keyword">new</span> HelloWorldCommand(<span class="string">"doge"</span>);</div><div class="line">        <span class="comment">//1、同步调用</span></div><div class="line">        String result = command.execute();</div><div class="line">        System.out.println(<span class="string">"Sync call result --&gt; "</span> + result);</div><div class="line"></div><div class="line">        <span class="comment">//2、异步调用</span></div><div class="line">        command = <span class="keyword">new</span> HelloWorldCommand(<span class="string">"doge async"</span>);</div><div class="line">        Future&lt;String&gt; future = command.queue();</div><div class="line">        result = future.get();</div><div class="line">        System.out.println(<span class="string">"Async call result --&gt; "</span> + result);</div><div class="line"></div><div class="line">        <span class="comment">//3.1、注册观察者事件订阅 -- 事件注册前执行</span></div><div class="line">        Observable&lt;String&gt; observable = <span class="keyword">new</span> HelloWorldCommand(<span class="string">"doge observable"</span>).observe();</div><div class="line"></div><div class="line">        observable.subscribe(result1 -&gt; System.out.println(<span class="string">"Observable call result --&gt; "</span> + result1));</div><div class="line"></div><div class="line">        <span class="comment">//3.2、注册完整执行生命周期事件 -- 事件注册前执行</span></div><div class="line">        observable.subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//onNext/onError完成之后最后回调</span></div><div class="line">                System.out.println(<span class="string">"Execute onCompleted"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">                <span class="comment">// 当产生异常时回调</span></div><div class="line">                System.out.println(<span class="string">"Execute error"</span>);</div><div class="line">                throwable.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="comment">// 获取结果后回调</span></div><div class="line">                System.out.println(<span class="string">"Execute onNext --&gt; "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//4、注册观察者事件订阅 -- 事件注册后执行</span></div><div class="line">command = <span class="keyword">new</span> HelloWorldCommand(<span class="string">"doge toObservable"</span>);</div><div class="line">Observable&lt;String&gt; toObservable = command.toObservable();</div><div class="line">toObservable.subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//onNext/onError完成之后最后回调</span></div><div class="line">System.out.println(<span class="string">"Execute onCompleted"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line"><span class="comment">// 当产生异常时回调</span></div><div class="line">System.out.println(<span class="string">"Execute error"</span>);</div><div class="line">throwable.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line"><span class="comment">// 获取结果后回调</span></div><div class="line">System.out.println(<span class="string">"Execute onNext --&gt; "</span> + s);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//异步执行需要时间，先阻塞主线程</span></div><div class="line">Thread.sleep(<span class="number">5000</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="控制台输出："><a href="#控制台输出：" class="headerlink" title="控制台输出："></a>控制台输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sync call result --&gt; Hello doge,current thread:hystrix-helloWorldGroup-1</div><div class="line">Async call result --&gt; Hello doge async,current thread:hystrix-helloWorldGroup-2</div><div class="line">Observable call result --&gt; Hello doge observable,current thread:hystrix-helloWorldGroup-3</div><div class="line">Execute onNext --&gt; Hello doge observable,current thread:hystrix-helloWorldGroup-3</div><div class="line">Execute onCompleted</div><div class="line">Execute onNext --&gt; Hello doge toObservable,current thread:hystrix-helloWorldGroup-4</div><div class="line">Execute onCompleted</div></pre></td></tr></table></figure><h3 id="例子2（超时降级）："><a href="#例子2（超时降级）：" class="headerlink" title="例子2（超时降级）："></a>例子2（超时降级）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommand;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandGroupKey;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandKey;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandProperties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> throwable</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/28 15:32</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTimeoutCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldTimeoutCommand</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="comment">//最小配置,指定groupKey</span></div><div class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"helloWorldGroup"</span>))</div><div class="line">                <span class="comment">//指定超时时间为500ms</span></div><div class="line">        .andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class="number">500</span>))</div><div class="line">                <span class="comment">//commonKey</span></div><div class="line">        .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"helloWorldTimeout"</span>)));</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"HelloWorldTimeoutCommand --&gt; "</span>+ Thread.currentThread().getName());</div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">",current thread:"</span> + Thread.currentThread().getName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"fallback!"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        HelloWorldTimeoutCommand command = <span class="keyword">new</span> HelloWorldTimeoutCommand(<span class="string">"doge"</span>);</div><div class="line">        <span class="comment">//超时执行getFallback</span></div><div class="line">        System.out.println(command.execute());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="控制台输出：-1"><a href="#控制台输出：-1" class="headerlink" title="控制台输出："></a>控制台输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HelloWorldTimeoutCommand --&gt; hystrix-helloWorldGroup-1</div><div class="line">fallback!</div></pre></td></tr></table></figure><h3 id="例子3（触发熔断器熔断）："><a href="#例子3（触发熔断器熔断）：" class="headerlink" title="例子3（触发熔断器熔断）："></a>例子3（触发熔断器熔断）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> throwable</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/28 15:32</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldBreakerCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HelloWorldBreakerCommand</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="comment">//最小配置,指定groupKey</span></div><div class="line"><span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"helloWorldGroup"</span>))</div><div class="line">.andThreadPoolPropertiesDefaults(</div><div class="line">HystrixThreadPoolProperties.Setter()</div><div class="line">.withCoreSize(<span class="number">500</span>))</div><div class="line">.andCommandPropertiesDefaults(</div><div class="line">HystrixCommandProperties.Setter()</div><div class="line">.withCircuitBreakerEnabled(<span class="keyword">true</span>)</div><div class="line">.withCircuitBreakerErrorThresholdPercentage(<span class="number">50</span>)</div><div class="line">.withCircuitBreakerRequestVolumeThreshold(<span class="number">3</span>)</div><div class="line">.withExecutionTimeoutInMilliseconds(<span class="number">1000</span>))</div><div class="line"><span class="comment">//commonKey</span></div><div class="line">.andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"helloWorldBreaker"</span>)));</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"RUNNABLE --&gt; "</span> + name);</div><div class="line">Integer num = Integer.valueOf(name);</div><div class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; num &lt; <span class="number">10</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">",current thread:"</span> + Thread.currentThread().getName();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">Thread.sleep(<span class="number">1500</span>);</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"FALLBACK --&gt; !"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">System.out.println(<span class="keyword">new</span> HelloWorldBreakerCommand(String.valueOf(i)).execute());</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thread.sleep(Integer.MAX_VALUE);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="控制台输出：-2"><a href="#控制台输出：-2" class="headerlink" title="控制台输出："></a>控制台输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">RUNNABLE --&gt; 0</div><div class="line">Hello 0,current thread:hystrix-helloWorldGroup-1</div><div class="line">RUNNABLE --&gt; 1</div><div class="line">FALLBACK --&gt; !</div><div class="line">RUNNABLE --&gt; 2</div><div class="line">Hello 2,current thread:hystrix-helloWorldGroup-3</div><div class="line">RUNNABLE --&gt; 3</div><div class="line">FALLBACK --&gt; !</div><div class="line">RUNNABLE --&gt; 4</div><div class="line">Hello 4,current thread:hystrix-helloWorldGroup-5</div><div class="line">RUNNABLE --&gt; 5</div><div class="line">FALLBACK --&gt; !</div><div class="line">RUNNABLE --&gt; 6</div><div class="line">Hello 6,current thread:hystrix-helloWorldGroup-7</div><div class="line">RUNNABLE --&gt; 7</div><div class="line">FALLBACK --&gt; !</div><div class="line">RUNNABLE --&gt; 8</div><div class="line">Hello 8,current thread:hystrix-helloWorldGroup-9</div><div class="line">RUNNABLE --&gt; 9</div><div class="line">FALLBACK --&gt; !</div><div class="line">RUNNABLE --&gt; 10</div><div class="line">FALLBACK --&gt; !</div><div class="line">FALLBACK --&gt; !</div><div class="line">...</div></pre></td></tr></table></figure><h3 id="（4）请求结果缓存（Request-Cahce）"><a href="#（4）请求结果缓存（Request-Cahce）" class="headerlink" title="（4）请求结果缓存（Request Cahce）"></a>（4）请求结果缓存（Request Cahce）</h3><p>hystrix支持将一个请求结果缓存起来，下一个具有相同key的请求将直接从缓存中取出结果，减少请求开销。要使用hystrix cache功能，第一个要求是重写<code>getCacheKey()</code>，用来构造cache key；第二个要求是构建context，如果请求B要用到请求A的结果缓存，A和B必须同处一个context。通过<code>HystrixRequestContext.initializeContext()</code>和<code>context.shutdown()</code>可以构建一个context，这两条语句间的所有请求都处于同一个context，同一个context中可以从缓存中直接获取cache key相同的响应结果。</p><h3 id="例子4（请求结果缓存）："><a href="#例子4（请求结果缓存）：" class="headerlink" title="例子4（请求结果缓存）："></a>例子4（请求结果缓存）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommand;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandGroupKey;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.HystrixCommandKey;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> throwable</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/28 15:32</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRequestCacheCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Integer value;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HelloWorldRequestCacheCommand</span><span class="params">(Integer value,String name)</span> </span>&#123;</div><div class="line"><span class="comment">//最小配置,指定groupKey</span></div><div class="line"><span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"helloWorldGroup"</span>))</div><div class="line"><span class="comment">//commonKey</span></div><div class="line">.andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"helloWorldRequestCache"</span>)));</div><div class="line"><span class="keyword">this</span>.value = value;</div><div class="line"><span class="keyword">this</span>.name  = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Boolean <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">return</span> value == <span class="number">0</span> || value %<span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name + value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">HystrixRequestContext context = HystrixRequestContext.initializeContext();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">HelloWorldRequestCacheCommand command1 = <span class="keyword">new</span> HelloWorldRequestCacheCommand(<span class="number">1</span>,<span class="string">"doge"</span>);</div><div class="line">HelloWorldRequestCacheCommand command2 = <span class="keyword">new</span> HelloWorldRequestCacheCommand(<span class="number">1</span>,<span class="string">"doge"</span>);</div><div class="line">HelloWorldRequestCacheCommand command3 = <span class="keyword">new</span> HelloWorldRequestCacheCommand(<span class="number">1</span>,<span class="string">"doge-ex"</span>);</div><div class="line">System.out.println(<span class="string">"command1 result --&gt; "</span> + command1.execute());</div><div class="line">System.out.println(<span class="string">"command1 isResponseFromCache --&gt; "</span> + command1.isResponseFromCache());</div><div class="line"></div><div class="line">System.out.println(<span class="string">"command2 result --&gt; "</span> + command2.execute());</div><div class="line">System.out.println(<span class="string">"command2 isResponseFromCache --&gt; "</span> + command2.isResponseFromCache());</div><div class="line"></div><div class="line">System.out.println(<span class="string">"command3 result --&gt; "</span> + command3.execute());</div><div class="line">System.out.println(<span class="string">"command3 isResponseFromCache --&gt; "</span> + command3.isResponseFromCache());</div><div class="line">&#125;<span class="keyword">finally</span> &#123;</div><div class="line">context.shutdown();</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thread.sleep(Integer.MAX_VALUE);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="控制台输出：-3"><a href="#控制台输出：-3" class="headerlink" title="控制台输出："></a>控制台输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">command1 result --&gt; false</div><div class="line">command1 isResponseFromCache --&gt; false</div><div class="line">command2 result --&gt; false</div><div class="line">command2 isResponseFromCache --&gt; true</div><div class="line">command3 result --&gt; false</div><div class="line">command3 isResponseFromCache --&gt; false</div></pre></td></tr></table></figure><h3 id="（5）请求合并（Request-Collapsing）"><a href="#（5）请求合并（Request-Collapsing）" class="headerlink" title="（5）请求合并（Request Collapsing）"></a>（5）请求合并（Request Collapsing）</h3><p>hystrix支持N个请求自动合并为一个请求，这个功能在有网络交互的场景下尤其有用，比如每个请求都要网络访问远程资源，如果把请求合并为一个，将使多次网络交互变成一次，极大节省开销。重要一点，两个请求能自动合并的前提是两者足够“近”，即两者启动执行的间隔（timerDelayInMilliseconds）时长要足够小，默认为10ms，即超过10ms将不自动合并。请求合并需要继承<code>HystrixCollapser&lt;BatchReturnType, ResponseType, RequestArgumentType&gt;</code>，三个泛型参数的含义分别是：</p><ul><li>BatchReturnType：createCommand()方法创建批量命令的返回值的类型。 </li><li>ResponseType：单个请求返回的类型。 </li><li>RequestArgumentType：getRequestArgument()方法请求参数的类型。</li></ul><p>继承HystrixCollapser后需要覆写三个方法：<code>getRequestArgument()</code>、<code>createCommand()</code>、<code>mapResponseToRequests()</code>。</p><h3 id="例子5（请求合并）："><a href="#例子5（请求合并）：" class="headerlink" title="例子5（请求合并）："></a>例子5（请求合并）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.*;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> throwable</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/9/28 15:32</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRequestCollapsingCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCollapser</span>&lt;<span class="title">List</span>&lt;<span class="title">Boolean</span>&gt;, <span class="title">Boolean</span>, <span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Integer value;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HelloWorldRequestCollapsingCommand</span><span class="params">(Integer value)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.value = value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getRequestArgument</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> HystrixCommand&lt;List&lt;Boolean&gt;&gt; createCommand(Collection&lt;CollapsedRequest&lt;Boolean, Integer&gt;&gt; collapsedRequests) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> BatchCommand(collapsedRequests);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">List</span>&lt;<span class="title">Boolean</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;CollapsedRequest&lt;Boolean, Integer&gt;&gt; requests;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">BatchCommand</span><span class="params">(Collection&lt;CollapsedRequest&lt;Boolean, Integer&gt;&gt; requests)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"helloWorldGroup"</span>))</div><div class="line">.andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"helloWorldRequestCollapsing"</span>)));</div><div class="line"><span class="keyword">this</span>.requests = requests;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;Boolean&gt; <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">List&lt;Boolean&gt; response = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (CollapsedRequest&lt;Boolean, Integer&gt; request : requests) &#123;</div><div class="line">Integer argument = request.getArgument();</div><div class="line">response.add(<span class="number">0</span> == argument || argument % <span class="number">2</span> == <span class="number">0</span>);  <span class="comment">//这里就是执行单元的逻辑</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> response;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">mapResponseToRequests</span><span class="params">(List&lt;Boolean&gt; batchResponse, Collection&lt;CollapsedRequest&lt;Boolean, Integer&gt;&gt; collapsedRequests)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (CollapsedRequest&lt;Boolean, Integer&gt; request : collapsedRequests) &#123;</div><div class="line">request.setResponse(batchResponse.get(count++));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">HystrixRequestContext context = HystrixRequestContext.initializeContext();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Future&lt;Boolean&gt; command1 = <span class="keyword">new</span> HelloWorldRequestCollapsingCommand(<span class="number">1</span>).queue();</div><div class="line">Future&lt;Boolean&gt; command2 = <span class="keyword">new</span> HelloWorldRequestCollapsingCommand(<span class="number">2</span>).queue();</div><div class="line">Future&lt;Boolean&gt; command3 = <span class="keyword">new</span> HelloWorldRequestCollapsingCommand(<span class="number">3</span>).queue();</div><div class="line">Future&lt;Boolean&gt; command4 = <span class="keyword">new</span> HelloWorldRequestCollapsingCommand(<span class="number">4</span>).queue();</div><div class="line">Future&lt;Boolean&gt; command5 = <span class="keyword">new</span> HelloWorldRequestCollapsingCommand(<span class="number">5</span>).queue();</div><div class="line"><span class="comment">//故意sleep超过10ms,第六个命令不会合并到本次批量请求</span></div><div class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">13</span>);</div><div class="line">Future&lt;Boolean&gt; command6 = <span class="keyword">new</span> HelloWorldRequestCollapsingCommand(<span class="number">6</span>).queue();</div><div class="line"></div><div class="line">System.out.println(command1.get());</div><div class="line">System.out.println(command2.get());</div><div class="line">System.out.println(command3.get());</div><div class="line">System.out.println(command4.get());</div><div class="line">System.out.println(command5.get());</div><div class="line">System.out.println(command6.get());</div><div class="line"><span class="comment">// note：numExecuted表示共有几个命令执行，1个批量多命令请求算一个，这个实际值可能比代码写的要多，</span></div><div class="line"><span class="comment">// 因为due to non-determinism of scheduler since this example uses the real timer</span></div><div class="line"><span class="keyword">int</span> numExecuted = HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size();</div><div class="line">System.out.println(<span class="string">"num executed: "</span> + numExecuted);</div><div class="line"><span class="keyword">int</span> numLogs = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (HystrixInvokableInfo&lt;?&gt; command : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) &#123;</div><div class="line">numLogs++;</div><div class="line">System.out.println(command.getCommandKey().name() + <span class="string">" =&gt; command.getExecutionEvents(): "</span> + command.getExecutionEvents());</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"num logs:"</span> + numLogs);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">context.shutdown();</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thread.sleep(Integer.MAX_VALUE);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="控制台输出：-4"><a href="#控制台输出：-4" class="headerlink" title="控制台输出："></a>控制台输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">false</div><div class="line">true</div><div class="line">false</div><div class="line">true</div><div class="line">false</div><div class="line">true</div><div class="line">num executed: 2</div><div class="line">helloWorldRequestCollapsing =&gt; command.getExecutionEvents(): [SUCCESS, COLLAPSED]</div><div class="line">helloWorldRequestCollapsing =&gt; command.getExecutionEvents(): [SUCCESS, COLLAPSED]</div><div class="line">num logs:2</div></pre></td></tr></table></figure><h2 id="通过注解使用Hystrix"><a href="#通过注解使用Hystrix" class="headerlink" title="通过注解使用Hystrix"></a>通过注解使用Hystrix</h2><p>如果想要通过注解使用Hystrix，需要引入一个第三方依赖<code>hystrix-javanica</code>，注解使用方式和编程式大致相同，只是属性参数配置都注解化了。三个核心注解分别为@HystrixCommand、@HystrixProperty和@HystrixCollapser。当然还有和请求缓存相关的三个注解@CacheResult、@CacheRemove、@CacheKey。</p><h3 id="例子6（注解同步执行）："><a href="#例子6（注解同步执行）：" class="headerlink" title="例子6（注解同步执行）："></a>例子6（注解同步执行）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHystrixAnnotation</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@HystrixCommand</span>(groupKey = <span class="string">"helloWorldHystrixAnnotation"</span>,</div><div class="line">commandKey = <span class="string">"helloWorldHystrixAnnotationSync"</span>, fallbackMethod = <span class="string">"fallbck"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">(Integer value)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span> == value || value % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">fallbck</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="例子7（注解异步执行）："><a href="#例子7（注解异步执行）：" class="headerlink" title="例子7（注解异步执行）："></a>例子7（注解异步执行）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</div><div class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.command.AsyncResult;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> throwable</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/10/8 17:41</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHystrixAnnotationAsync</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@HystrixCommand</span>(groupKey = <span class="string">"helloWorldHystrixAnnotation"</span>,</div><div class="line">commandKey = <span class="string">"helloWorldHystrixAnnotationAsync"</span>, fallbackMethod = <span class="string">"fallbck"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Future&lt;Boolean&gt; <span class="title">run</span><span class="params">(Integer value)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;Boolean&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">invoke</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span> == value || value % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">fallbck</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="例子8（注解订阅执行）："><a href="#例子8（注解订阅执行）：" class="headerlink" title="例子8（注解订阅执行）："></a>例子8（注解订阅执行）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</div><div class="line"><span class="keyword">import</span> rx.Observable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> throwable</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/10/8 17:41</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHystrixAnnotationObervable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@HystrixCommand</span>(groupKey = <span class="string">"helloWorldHystrixAnnotation"</span>,</div><div class="line">commandKey = <span class="string">"helloWorldHystrixAnnotationObervable"</span>, fallbackMethod = <span class="string">"fallbck"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Observable&lt;Boolean&gt; <span class="title">run</span><span class="params">(Integer value)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> Observable.create(subscriber -&gt; &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">if</span> (!subscriber.isUnsubscribed()) &#123;</div><div class="line">subscriber.onNext(value == <span class="number">0</span> || value % <span class="number">2</span> == <span class="number">0</span>);</div><div class="line">subscriber.onCompleted();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">subscriber.onError(e);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">fallbck</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Hystrix的一些使用和属性配置介绍到此结束，一些细节的用法没有给出具体的例子，例如注解中的一些参数配置，注解中的请求缓存使用，注解中的请求合并等。有些是个人认为不常用的，或者说，从Hystrix的Github中的WIKI可以得到更加详细的介绍，本文仅仅对最为常用的部分做了总结，如果未能帮助到你，请见谅。另外，如果使用了Spring(Boot)项目在使用<code>hystrix-javanica</code>必须把相关的切面类注册到Spring容器，否则你做的一切操作都不会生效。</p><p><a href="https://github.com/zjcscut/Reading-Notes-Repository/blob/master/%E5%85%B6%E4%BB%96/Hystrix.md" target="_blank" rel="external">本文原始链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在大中型分布式系统中，通常系统很多依赖。在高并发访问下,这些依赖的稳定性与否对系统的影响非常大,但是依赖有很多不可控问题:如网络连接缓慢，资源繁忙，暂时不可用，服务脱机等。在复杂的分布式架构的应用程序有很多的依赖，都会不可避免地在某些时候失败。高并发的依赖失败时如果没有隔离措施，当前应用服务就有被拖垮的风险。一般来说，随着服务依赖数量的变多，服务不稳定的概率会成指数性提高&lt;br&gt;
    
    </summary>
    
      <category term="Netflix黑科技" scheme="https://zjcscut.github.io/categories/Netflix%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="Hystrix" scheme="https://zjcscut.github.io/tags/Hystrix/"/>
    
      <category term="Netflix" scheme="https://zjcscut.github.io/tags/Netflix/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zjcscut.github.io/2017/10/14/hello-world/"/>
    <id>https://zjcscut.github.io/2017/10/14/hello-world/</id>
    <published>2017-10-14T12:45:50.000Z</published>
    <updated>2017-10-14T12:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
