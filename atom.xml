<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Throwable&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/f911a15e0873ff511c29d73cd84dfa48</icon>
  <subtitle>去创业了，太忙了，可能会不定期鸽😁😁😁😂😂😂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://throwable.club/"/>
  <updated>2020-02-09T14:45:48.809Z</updated>
  <id>http://throwable.club/</id>
  
  <author>
    <name>Throwable</name>
    <email>739805340@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解和运用Java中的Lambda</title>
    <link href="http://throwable.club/2020/02/09/java-understand-and-use-lambda/"/>
    <id>http://throwable.club/2020/02/09/java-understand-and-use-lambda/</id>
    <published>2020-02-09T10:13:50.000Z</published>
    <updated>2020-02-09T14:45:48.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>回想一下，<code>JDK8</code>是2014年发布正式版的，到现在为（<code>2020-02-08</code>）止已经过去了5年多。<code>JDK8</code>引入的两个比较强大的新特性是<code>Lambda</code>表达式（下文的<code>Lambda</code>特指<code>JDK</code>提供的<code>Lambda</code>）和<code>Stream</code>，这两个强大的特性让函数式编程在<code>Java</code>开发中发扬光大。这篇文章会从基本概念、使用方式、实现原理和实战场景等角度介绍<code>Lambda</code>的全貌，其中还会涉及一些函数式编程概念、<code>JVM</code>一些知识等等。</p><a id="more"></a><h2 id="基本概念">基本概念</h2><p>下面介绍一些基本概念，一步一步引出<code>Lambda</code>的概念。</p><h3 id="函数式接口">函数式接口</h3><p>函数式接口和接口默认方法都是<code>JDK8</code>引入的新特性。函数式接口的概念可以从<code>java.lang.FunctionalInterface</code>注解的<code>API</code>注释中得知：</p><blockquote><p>An informative annotation type used to indicate that an interface type declaration is intended to be a functional interface as defined by the Java Language Specification.</p></blockquote><blockquote><p>Conceptually, a functional interface has exactly one abstract method.  Since {@linkplain java.lang.reflect.Method#isDefault() default methods} have an implementation, they are not abstract.</p></blockquote><p>简单来说就是：<code>@FunctionalInterface</code>是一个提供信息的接口（其实就是<strong>标识接口</strong>），用于表明对应的接口类型声明是一个<code>Java</code>语言规范定义的函数式接口。从概念上说，一个函数式接口有且仅有一个抽象方法，因为接口默认方法必须予以实现，它们不是抽象方法。</p><p>所以可以这样给函数式接口定义：如果一个接口声明的时候<strong>有且仅有一个抽象方法</strong>，那么它就是函数式接口，可以使用<code>@FunctionalInterface</code>注解标识。</p><p><code>JDK</code>中已经定义了很多内置的函数式接口，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.Runnable</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// java.util.function.Supplier</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以自定义函数式接口，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomFunctionalInterface</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以缩写为void process();  接口方法定义的时候，默认使用public abstract修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口默认方法">接口默认方法</h3><p>接口默认方法的含义可以见<code>Java</code>官方教程中对应的章节，在文末的参考资料可以查看具体的链接：</p><blockquote><p>Default methods enable you to add new functionality to the interfaces of your libraries and ensure binary compatibility with code written for older versions of those interfaces.</p></blockquote><p>简单来说就是：默认方法允许你在你的类库中向接口添加新的功能，并确保新增的默认方法与这些接口的较早版本编写的代码<strong>二进制兼容</strong>。</p><p>接口默认方法（下称默认方法）通过<code>default</code>关键字声明，可以直接在接口中编写方法体。<strong>也就是默认方法既声明了方法，也实现了方法</strong>。这一点很重要，在默认方法特性出现之前，<code>Java</code>编程语言规范中，接口的本质就是方法声明的集合体，而自默认方法特性出现之后，接口的本质也改变了。默认方法的一个例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaultMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultVoidMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s say hello!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Impl</span> <span class="keyword">implements</span> <span class="title">DefaultMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        DefaultMethod defaultMethod = <span class="keyword">new</span> Impl();</span><br><span class="line">        System.out.println(defaultMethod.sayHello(<span class="string">"throwable"</span>));  <span class="comment">// throwable say hello!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果继承一个定义了默认方法的接口，那么可以有如下的做法：</p><ul><li>完全忽略父接口的默认方法，那么相当于直接继承父接口的默认方法的实现（<strong>方法继承</strong>）。</li><li>重新声明默认方法，这里特指去掉<code>default</code>关键字，用<code>public abstract</code>关键字重新声明对应的方法，相当于让默认方法转变为抽象方法，子类需要进行实现（<strong>方法抽象</strong>）。</li><li>重新定义默认方法，也就是直接覆盖父接口中的实现（<strong>方法覆盖</strong>）。</li></ul><p>结合前面一节提到的函数式接口，这里可以综合得出一个结论：<strong>函数式接口，也就是有且仅有一个抽象方法的接口，可以定义0个或者N（N &gt;= 1）个默认方法</strong>。这一点正是<code>Stream</code>特性引入的理论基础。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomFunctionalInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultVoidMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s say hello!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里说点题外话。</p><p>在写这篇文章的时候，笔者想起了一个前同事说过的话，大意如下：<strong>在软件工程中，如果从零做起，任何新功能的开发都是十分简单的，困难的是在兼容所有历史功能的前提下进行新功能的迭代</strong>。试想一下，<code>Java</code>迭代到今天已经过去十多年了，<code>Hotspot VM</code>源码工程已经十分庞大（手动编译过<code>OpenJDK Hotspot VM</code>源码的人都知道过程的痛苦），任何新增的特性都要向前兼容，否则很多用了历史版本的<code>Java</code>应用会无法升级新的<code>JDK</code>版本。既要二进制向前兼容，又要迭代出新的特性，<code>Java</code>需要进行舍夺，默认方法就是一个例子，必须舍去接口只能定义抽象方法这个延续了多年在<code>Java</code>开发者中根深蒂固的概念，夺取了基于默认方法实现构筑出来的流式编程体系。笔者有时候也在思考：如果要我去开发<code>Stream</code>这个新特性，我会怎么做或者我能怎么做？</p><h3 id="嵌套类-Nested-Classes">嵌套类(Nested Classes)</h3><p>嵌套类（<code>Nested Classes</code>），简单来说就是：在一个类中定义另一个类，那么在类内<strong>被定义</strong>的那个类就是嵌套类，最外层的类一般称为封闭类（<code>Enclosing Class</code>）。嵌套类主要分为两种：静态嵌套类和非静态嵌套类，而<strong>非静态嵌套类又称为内部类（<code>Inner Classes</code>）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封闭类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 静态嵌套类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticNestedClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态嵌套类可以直接使用封闭的类名称去访问例如：<code>OuterClass.StaticNestedClass x = new OuterClass.StaticNestedClass();</code>，这种使用形式和一般类实例化基本没有区别。</p><p>内部类实例的存在必须依赖于封闭类实例的存在，并且内部类可以直接访问封闭类的任意属性和方法，简单来说就是内部类的实例化必须在封闭类实例化之后，并且依赖于封闭类的实例，声明的语法有点奇特：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticNestedClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 内部类可以访问封闭类的属性</span></span><br><span class="line">        <span class="keyword">int</span> y = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须这样实例化内部类 - 声明的语法相对奇特</span></span><br><span class="line">        OuterClass.InnerClass innerClass = outerClass.<span class="keyword">new</span> InnerClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态嵌套类可以一般实例化,形式为:封闭类.静态嵌套类</span></span><br><span class="line">        OuterClass.StaticNestedClass staticNestedClass = <span class="keyword">new</span> OuterClass.StaticNestedClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果main方法在封闭类内,可以直接使用静态嵌套类进行实例化</span></span><br><span class="line">        StaticNestedClass x = <span class="keyword">new</span> StaticNestedClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类中有两种特殊的类型：本地类(<code>Local Classes</code>)和匿名类(<code>Anonymous Classes</code>)。</p><p>本地类是一种声明在任意块（<code>block</code>）的类，例如声明在代码块、静态代码块、实例方法或者静态方法中，它可以访问封闭类的所有成员属性和方法，它的作用域就是块内，不能在块外使用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="comment">// 本地类A</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> z = y;</span><br><span class="line">        &#125;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 本地类B</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> z = y;</span><br><span class="line">        &#125;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 本地类C</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> z = y;</span><br><span class="line">        &#125;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名类可以让代码更加简明，允许使用者在<strong>定义类的同时予以实现</strong>，匿名类和其他内部类不同的地方是：它是一种<strong>表达式</strong>，而不是类声明。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">In</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(String value)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 本地类 - 类声明</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LocalClass</span></span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 匿名类 - 是一个表达式</span></span><br><span class="line">        In in = <span class="keyword">new</span> In() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用<code>Java</code>做过<code>GUI</code>开发，匿名类在<code>Swing</code>或者<code>JavaFx</code>的事件回调中大量使用，经常会看到类似这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JButton button = <span class="keyword">new</span> JButton();</span><br><span class="line">button.addActionListener(<span class="keyword">new</span> AbstractAction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"按钮事件被触发..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>嵌套类的类型关系图如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nested Classes</span><br><span class="line">  - Static Nested Classes</span><br><span class="line">  - None Nested Classes</span><br><span class="line">    - Local Classes</span><br><span class="line">    - Anonymous Classes</span><br><span class="line">    - Other Inner Classes</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式">Lambda表达式</h2><p>下面是来自某搜索引擎百科关于<code>Lambda</code>表达式的定义：</p><p><code>Lambda</code>表达式（<code>Lambda Expression</code>）是一个匿名函数，<code>Lambda</code>表达式基于数学中的<code>λ</code>演算得名，直接对应于其中的<code>Lambda</code>抽象（<code>Lambda Abstraction</code>），是一个匿名函数，即没有函数名的函数。<code>Lambda</code>表达式可以表示闭包（注意和数学传统意义上的不同）。</p><p><code>Java</code>中的<code>Lambda</code>表达式（下面称<code>Lambda</code>）表面上和上面的定义类似，本质也是匿名函数，但其实现原理区别于一般的匿名类中的匿名函数实现，她是<code>JDK8</code>引入的一颗新的语法糖。</p><h3 id="引入Lambda表达式的初衷">引入Lambda表达式的初衷</h3><p>如果一个接口只包含一个方法，那么匿名类的语法会变得十分笨拙和不清楚，产生大量的模板代码，归结一下就是：代码冗余是匿名类的最大弊端。在编程的时候，我们很多时候希望把功能作为参数传递到另一个方法，<code>Lambda</code>就是为此而生，<code>Lambda</code>允许使用者将功能视为方法参数，将代码视为数据。引入<code>Lambda</code>带来了如下优势：</p><ul><li>简化代码，引入了强大的类型推断和方法引用特性，简单的功能甚至可以一行代码解决，解放匿名类的束缚。</li><li>把功能作为参数向下传递，为函数式编程提供了支持。</li></ul><p>至此还得出一个结论：<strong><code>Lambda</code>只适用于函数式接口对应唯一抽象方法的实现</strong>。</p><h3 id="Lambda表达式的语法定义">Lambda表达式的语法定义</h3><p><code>Lambda</code>语法的详细定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// en_US</span></span><br><span class="line">InterfaceType interfaceObject = [Method Argument List] -&gt; Method Body</span><br><span class="line"></span><br><span class="line"><span class="comment">// zh_CN</span></span><br><span class="line">接口类型 接口实例 = [方法参数列表] -&gt; 方法体</span><br></pre></td></tr></table></figure><p>更具体的描述应该是：</p><p><code>接口类型 接口实例临时变量 = (方法参数类型X 方法参数类型X临时变量 , 方法参数类型Y 方法参数类型Y临时变量...) -&gt; { 方法体... return 接口抽象方法返回值对应类型类型实例;}</code></p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/j-l-u-u-1.png" alt=""></p><p>一个<code>Lambda</code>表达式由五个部分组成：</p><ul><li>返回值：接口类型以及接口类型对应的临时实例变量。</li><li>等号：<code>=</code>。</li><li>方法参数列表：一般由中括号<code>()</code>包裹，格式是<code>(类型1 类型1的临时变量,...,类型N 类型N的临时变量)</code>，在方法没有重载可以明确推断参数类型的时候，参数类型可以省略，只留下临时变量列表。特殊地，空参数列表用<code>()</code>表示，如果参数只有一个，可以省略<code>()</code>。</li><li>箭头：<code>-&gt;</code>。</li><li>方法体：一般由花括号<code>{}</code>包裹，格式是<code>{方法逻辑... return 函数式接口方法返回值类型的值;}</code>，有几点需要注意：<ul><li>如果方法体是空实现，用<code>{}</code>表示，如<code>Runnable runnable = () -&gt; {};</code>。</li><li>如果函数式接口抽象方法的返回值为<code>void</code>类型，则不需要<code>return</code>关键字语句，如<code>Runnable runnable = () -&gt; {int i=0; i++;};</code>。</li><li>如果函数式接口抽象方法的方法体仅仅包含一个表达式，则不需要使用<code>{}</code>包裹，如<code>Runnable runnable = () -&gt; System.out.println(&quot;Hello World!&quot;);</code>。</li></ul></li></ul><p>举一些例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function - 具体</span></span><br><span class="line">java.util.function.Function&lt;String, Integer&gt; functionY = (String string) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(string);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Function - 简化</span></span><br><span class="line">java.util.function.Function&lt;String, Integer&gt; functionX = string -&gt; Integer.parseInt(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Runnable - 具体</span></span><br><span class="line">Runnable runnableX = () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Runnable - 简化</span></span><br><span class="line">Runnable runnableY = () -&gt; System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数1-100的和 - 具体</span></span><br><span class="line"><span class="keyword">int</span> reduceX = IntStream.range(<span class="number">1</span>, <span class="number">101</span>).reduce(<span class="number">0</span>, (<span class="keyword">int</span> addend, <span class="keyword">int</span> augend) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> addend + augend;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 整数1-100的和 - 简化</span></span><br><span class="line"><span class="keyword">int</span> reduceY = IntStream.range(<span class="number">1</span>, <span class="number">101</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure><h3 id="目标类型与类型推断">目标类型与类型推断</h3><p>先引入下面的一个场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// club.throwable.Runnable</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        java.lang.Runnable langRunnable = () -&gt; &#123;&#125;;</span><br><span class="line">        club.throwable.Runnable customRunnable = () -&gt; &#123;&#125;;</span><br><span class="line">        langRunnable.run();</span><br><span class="line">        customRunnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者定义了一个和<code>java.lang.Runnable</code>完全一致的函数式接口<code>club.throwable.Runnable</code>，上面<code>main()</code>方法中，可以看到两个接口对应的<code>Lambda</code>表达式的方法体实现也是完全一致，但是很明显最终可以使用不同类型的接口去接收返回值，也就是这两个<code>Lambda</code>的类型是不相同的。而这两个<code>Lambda</code>表达式返回值的类型是我们最终期待的返回值类型（<code>expecting a data type of XX</code>），那么<code>Lambda</code>表达式就是对应的<strong>被期待的类型</strong>，这个被期待的类型就是<code>Lambda</code>表达式的<strong>目标类型</strong>。</p><p>为了确定<code>Lambda</code>表达式的目标类型，<code>Java</code>编译器会基于对应的<code>Lambda</code>表达式，使用<strong>上下文</strong>或者场景进行综合推导，判断的一个因素就是上下文中对该<code>Lambda</code>表达式所期待的类型。因此，<strong>只能在<code>Java</code>编译器能够正确推断<code>Lambda</code>表达式目标类型的场景下才能使用<code>Lambda</code>表达式</strong>，这些场景包括：</p><ul><li>变量声明。</li><li>赋值。</li><li>返回语句。</li><li>数组初始化器。</li><li><code>Lambda</code>表达式函数体。</li><li>条件表达式（<code>condition ? processIfTrue() : processIfFalse()</code>）。</li><li>类型转换（Cast）表达式。</li></ul><p><code>Lambda</code>表达式除了目标类型，还包含参数列表和方法体，而方法体需要依赖于参数列表进行实现，所以方法参数也是决定目标类型的一个因素。</p><p>方法参数的类型推导的过程主要依赖于两个语言特性：重载解析（<code>Overload Resolution</code>）和参数类型推导（<code>Type Argument Inference</code>）。</p><blockquote><p>原文：For method arguments, the Java compiler determines the target type with two other language features: overload resolution and type argument inference</p></blockquote><p>重载解析会为一个给定的方法调用（<code>Method Invocation</code>）寻找最合适的方法声明（<code>Method Declaration</code>）。由于不同的声明具有不同的签名，当<code>Lambda</code>表达式作为方法参数时，重载解析就会影响到<code>Lambda</code>表达式的目标类型。编译器会根据它对该<code>Lambda</code>表达式的所提供的信息的理解做出决定。如果<code>Lambda</code>表达式具有显式类型（参数类型被显式指定），编译器就可以直接使用<code>Lambda</code>表达式的返回类型；如果<code>Lambda</code>表达式具有隐式类型（参数类型被推导而知），重载解析则会忽略<code>Lambda</code>表达式函数体而只依赖<code>Lambda</code>表达式参数的数量。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式类型</span></span><br><span class="line">Function&lt;String, String&gt; functionX = (String x) -&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式类型</span></span><br><span class="line">Function&lt;String, Integer&gt; functionY = x -&gt; Integer.parseInt(x);</span><br></pre></td></tr></table></figure><p>如果依赖于方法参数的类型推导最佳方法声明时存在二义性（<code>Ambiguous</code>），我们就需要利用转型（<code>Cast</code>）或显式<code>Lambda</code>表达式来提供更多的类型信息，从而<code>Lambda</code>表达式的目标类型。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译不通过</span></span><br><span class="line">Object runnableX = () -&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译通过 - Cast</span></span><br><span class="line">Object runnableY = (Runnable) () -&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法入参类型是函数式接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">(java.util.function.Function function)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function((Function&lt;String, Long&gt;) (x) -&gt; Long.parseLong(x));</span><br></pre></td></tr></table></figure><h3 id="作用域">作用域</h3><p>关于作用域的问题记住几点即可：</p><ul><li><code>&lt;1&gt;</code>：<code>Lambda</code>表达式内的<code>this</code>引用和封闭类的<code>this</code>引用相同。</li><li><code>&lt;2&gt;</code>：<code>Lambda</code>表达式基于词法作用域，它不会从超类中继承任何变量，方法体里面的变量和它外部环境的变量具有相同的语义。</li><li><code>&lt;3&gt;</code>：<code>Lambda expressions close over values, not variables</code>，也就是<code>Lambda</code>表达式对值类型封闭，对变量（引用）类型开放（这一点正好解释了<code>Lambda</code>表达式内部引用外部的属性的时候，该属性必须定义为<code>final</code>）。</li></ul><p>对于第<code>&lt;1&gt;</code>点举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaThis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> y = <span class="keyword">this</span>.x;</span><br><span class="line">            y++;</span><br><span class="line">            System.out.println(y);</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LambdaThis lambdaThis = <span class="keyword">new</span> LambdaThis();</span><br><span class="line">        lambdaThis.method();   <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于第<code>&lt;2&gt;</code>点举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaScope</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 编译不通过 - Lambda方法体外部已经定义了同名变量</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于第<code>&lt;3&gt;</code>点举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        (<span class="keyword">final</span>) <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 编译不通过 - 外部值类型使用了final</span></span><br><span class="line">            x ++;</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        (<span class="keyword">final</span>) IntHolder holder = <span class="keyword">new</span> IntHolder();</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 编译通过 - 使用了引用类型</span></span><br><span class="line">            holder.x++;</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法引用">方法引用</h3><p>方法引用（<code>Method Reference</code>）是一种功能和<code>Lambda</code>表达式类似的表达式，需要目标类型和实现函数式接口，但是这个实现形式并不是通过方法体，而是通过方法名称（或者关键字）关联到一个已经存在的方法，本质是编译层面的技术，旨在进一步简化<code>Lambda</code>表达式方法体和一些特定表达式的实现。方法引用的类型归结如下：</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">静态方法引用</td><td style="text-align:center"><code>ClassName::methodName</code></td></tr><tr><td style="text-align:center">指定对象实例方法引用</td><td style="text-align:center"><code>instanceRef::methodName</code></td></tr><tr><td style="text-align:center">特定类型任意对象方法引用</td><td style="text-align:center"><code>ContainingType::methodName</code></td></tr><tr><td style="text-align:center">超类方法引用</td><td style="text-align:center"><code>supper::methodName</code></td></tr><tr><td style="text-align:center">构造器方法引用</td><td style="text-align:center"><code>ClassName::new</code></td></tr><tr><td style="text-align:center">数组构造器方法引用</td><td style="text-align:center"><code>TypeName[]::new</code></td></tr></tbody></table><p>可见其基本形式是：<code>方法容器::方法名称或者关键字</code>。</p><p>举一些基本的使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态方法引用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticMethodRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Function&lt;String, Integer&gt; function = StaticMethodRef::staticMethod;</span><br><span class="line">        Integer result = function.apply(<span class="string">"10086"</span>);</span><br><span class="line">        System.out.println(result);  <span class="comment">// 10086</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">staticMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定对象实例方法引用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticularInstanceRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">refMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ParticularInstanceRef ref = <span class="keyword">new</span> ParticularInstanceRef();</span><br><span class="line">        Function&lt;String, Integer&gt; function = ref::refMethod;</span><br><span class="line">        Integer result = function.apply(<span class="string">"10086"</span>);</span><br><span class="line">        System.out.println(result);  <span class="comment">// 10086</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特定类型任意对象方法引用</span></span><br><span class="line">String[] stringArray = &#123;<span class="string">"C"</span>, <span class="string">"a"</span>, <span class="string">"B"</span>&#125;;</span><br><span class="line">Arrays.sort(stringArray, String::compareToIgnoreCase);</span><br><span class="line">System.out.println(Arrays.toString(stringArray)); <span class="comment">// [a, B, C]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超类方法引用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupperRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(sub.refMethod(<span class="string">"10086"</span>)); <span class="comment">// 10086</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Supper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Integer <span class="title">supperRefMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Supper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Integer <span class="title">refMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            Function&lt;String, Integer&gt; function = <span class="keyword">super</span>::supperRefMethod;</span><br><span class="line">            <span class="keyword">return</span> function.apply(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器方法引用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Function&lt;String, Person&gt; function = Person::<span class="keyword">new</span>;</span><br><span class="line">        Person person = function.apply(<span class="string">"doge"</span>);</span><br><span class="line">        System.out.println(person.getName()); <span class="comment">// doge</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组构造器方法引用</span></span><br><span class="line">Function&lt;Integer, Integer[]&gt; function = Integer[]::<span class="keyword">new</span>;</span><br><span class="line">Integer[] array = function.apply(<span class="number">10</span>);</span><br><span class="line">System.out.println(array.length); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="Java中Lambda的底层实现原理">Java中Lambda的底层实现原理</h2><p>重点要说三次：</p><ul><li><code>Lambda</code>表达式底层<strong>不是</strong>匿名类实现。</li><li><code>Lambda</code>表达式底层<strong>不是</strong>匿名类实现。</li><li><code>Lambda</code>表达式底层<strong>不是</strong>匿名类实现。</li></ul><p>在深入学习<code>Lambda</code>表达式之前，笔者也曾经认为<code>Lambda</code>就是匿名类的语法糖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lambda</span></span><br><span class="line">Function&lt;String, String&gt; functionX = (String x) -&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误认知</span></span><br><span class="line">Function&lt;String, String&gt; functionX = <span class="keyword">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Void <span class="title">apply</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Lambda</code>就是匿名类的语法糖这个认知是错误的</strong>。下面举一个例子，从源码和字节码的角度分析一下<code>Lambda</code>表达式编译和执行的整个流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">        String hello = <span class="string">"Hello "</span>;</span><br><span class="line">        Function&lt;String, String&gt; function = string -&gt; hello + string;</span><br><span class="line">        function.apply(<span class="string">"Doge"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<code>VM</code>参数<code>-Djdk.internal.lambda.dumpProxyClasses=.</code>运行上面的<code>Sample#main()</code>方法，项目根目录动态生成了两个类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.invoke.LambdaForm.Hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $FF: synthetic class</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span>$$<span class="title">Lambda</span>$14 <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Sample$$Lambda$<span class="number">14</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Hidden</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Sample.lambda$main$<span class="number">0</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.LambdaForm.Hidden;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $FF: synthetic class</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span>$$<span class="title">Lambda</span>$15 <span class="keyword">implements</span> <span class="title">Function</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String arg$<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sample$$Lambda$<span class="number">15</span>(String var1) &#123;</span><br><span class="line">        <span class="keyword">this</span>.arg$<span class="number">1</span> = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Function get$Lambda(String var0) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sample$$Lambda$<span class="number">15</span>(var0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Hidden</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">apply</span><span class="params">(Object var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Sample.lambda$main$<span class="number">1</span>(<span class="keyword">this</span>.arg$<span class="number">1</span>, (String)var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反查两个类的字节码，发现了类修饰符为<code>final synthetic</code>。接着直接看封闭类<code>Sample</code>的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">club</span>/<span class="title">throwable</span>/<span class="title">Sample</span> </span>&#123;</span><br><span class="line">     &lt;ClassVersion=<span class="number">52</span>&gt;</span><br><span class="line">     &lt;SourceFile=Sample.java&gt;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Sample</span><span class="params">()</span> </span>&#123; <span class="comment">// &lt;init&gt; //()V</span></span><br><span class="line">         &lt;localVar:index=<span class="number">0</span> , name=<span class="keyword">this</span> , desc=Lclub/throwable/Sample;, sig=<span class="keyword">null</span>, start=L1, end=L2&gt;</span><br><span class="line"></span><br><span class="line">         L1 &#123;</span><br><span class="line">             aload0 <span class="comment">// reference to self</span></span><br><span class="line">             invokespecial java/lang/Object.&lt;init&gt;()V</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         &#125;</span><br><span class="line">         L2 &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(java.lang.String[] arg0)</span> <span class="keyword">throws</span> java/lang/Exception </span>&#123; <span class="comment">//([Ljava/lang/String;)V</span></span><br><span class="line">         &lt;localVar:index=<span class="number">0</span> , name=args , desc=[Ljava/lang/String;, sig=<span class="keyword">null</span>, start=L1, end=L2&gt;</span><br><span class="line">         &lt;localVar:index=<span class="number">1</span> , name=runnable , desc=Lclub/throwable/Runnable;, sig=<span class="keyword">null</span>, start=L3, end=L2&gt;</span><br><span class="line">         &lt;localVar:index=<span class="number">2</span> , name=hello , desc=Ljava/lang/String;, sig=<span class="keyword">null</span>, start=L4, end=L2&gt;</span><br><span class="line">         &lt;localVar:index=<span class="number">3</span> , name=function , desc=Ljava/util/function/Function;, sig=Ljava/util/function/Function&lt;Ljava/lang/String;Ljava/lang/String;&gt;;, start=L5, end=L2&gt;</span><br><span class="line"></span><br><span class="line">         L1 &#123;</span><br><span class="line">             invokedynamic java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; : run()Lclub/throwable/Runnable; ()V club/throwable/Sample.lambda$main$<span class="number">0</span>()V (<span class="number">6</span>) ()V</span><br><span class="line">             astore1</span><br><span class="line">         &#125;</span><br><span class="line">         L3 &#123;</span><br><span class="line">             aload1</span><br><span class="line">             invokeinterface club/throwable/Runnable.run()V</span><br><span class="line">         &#125;</span><br><span class="line">         L6 &#123;</span><br><span class="line">             ldc <span class="string">"Hello "</span> (java.lang.String)</span><br><span class="line">             astore2</span><br><span class="line">         &#125;</span><br><span class="line">         L4 &#123;</span><br><span class="line">             aload2</span><br><span class="line">             invokedynamic java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; : apply(Ljava/lang/String;)Ljava/util/function/Function; (Ljava/lang/Object;)Ljava/lang/Object; club/throwable/Sample.lambda$main$<span class="number">1</span>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (<span class="number">6</span>) (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">             astore3</span><br><span class="line">         &#125;</span><br><span class="line">         L5 &#123;</span><br><span class="line">             aload3</span><br><span class="line">             ldc <span class="string">"Doge"</span> (java.lang.String)</span><br><span class="line">             invokeinterface java/util/function/Function.apply(Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">             pop</span><br><span class="line">         &#125;</span><br><span class="line">         L7 &#123;</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         &#125;</span><br><span class="line">         L2 &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> synthetic lambda$main$<span class="number">1</span>(java.lang.String arg0, java.lang.String arg1) &#123; <span class="comment">//(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line">         &lt;localVar:index=<span class="number">0</span> , name=hello , desc=Ljava/lang/String;, sig=<span class="keyword">null</span>, start=L1, end=L2&gt;</span><br><span class="line">         &lt;localVar:index=<span class="number">1</span> , name=string , desc=Ljava/lang/String;, sig=<span class="keyword">null</span>, start=L1, end=L2&gt;</span><br><span class="line"></span><br><span class="line">         L1 &#123;</span><br><span class="line">             <span class="keyword">new</span> java/lang/StringBuilder</span><br><span class="line">             dup</span><br><span class="line">             invokespecial java/lang/StringBuilder.&lt;init&gt;()V</span><br><span class="line">             aload0 <span class="comment">// reference to arg0</span></span><br><span class="line">             invokevirtual java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">             aload1</span><br><span class="line">             invokevirtual java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">             invokevirtual java/lang/StringBuilder.toString()Ljava/lang/String;</span><br><span class="line">             areturn</span><br><span class="line">         &#125;</span><br><span class="line">         L2 &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> synthetic lambda$main$<span class="number">0</span>() &#123; <span class="comment">//()V</span></span><br><span class="line">         L1 &#123;</span><br><span class="line">             getstatic java/lang/System.out:java.io.PrintStream</span><br><span class="line">             ldc <span class="string">"Hello World!"</span> (java.lang.String)</span><br><span class="line">             invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V</span><br><span class="line">         &#125;</span><br><span class="line">         L2 &#123;</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// The following inner classes couldn't be decompiled: java/lang/invoke/MethodHandles$Lookup </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的字节码已经被<code>Bytecode-Viewer</code>工具格式化过，符合于人的阅读习惯，从字节码的阅读，结合前面的分析大概可以得出下面的结论：</p><ul><li><code>&lt;1&gt;</code>：<code>Lambda</code>表达式在编译期通过字节码增强技术新增一个模板类实现对应的接口类型，这个<strong>模板类</strong>的所有属性都使用<code>final</code>修饰，模板类由关键字<code>final synthetic</code>修饰。</li><li><code>&lt;2&gt;</code>：封闭类会基于类内的<code>Lambda</code>表达式类型生成<code>private static synthetic</code>修饰的静态方法，该静态方法的方法体就是来源于<code>Lambda</code>方法体，这些静态方法的名称是<code>lambda$封闭类方法名$递增数字</code>。</li><li><code>&lt;3&gt;</code>：<code>Lambda</code>表达式调用最终通过字节码指令<code>invokedynamic</code>，忽略中间过程，最后调用到第<code>&lt;2&gt;</code>步中对应的方法。</li></ul><p>限于篇幅问题，这里把<code>Lambda</code>表达式的底层原理做了简单的梳理（这个推导过程仅限于个人理解，依据尚未充分）：</p><ul><li><code>&lt;1&gt;</code>：封闭类会基于类内的<code>Lambda</code>表达式类型生成<code>private static synthetic</code>修饰的静态方法，该静态方法的方法体就是来源于<code>Lambda</code>方法体，这些静态方法的名称是<code>lambda$封闭类方法名$递增数字</code>。</li><li><code>&lt;2&gt;</code>：<code>Lambda</code>表达式会通过<code>LambdaMetafactory#metafactory()</code>方法，生成一个对应函数式接口的模板类，模板类的接口方法实现引用了第<code>&lt;1&gt;</code>步中定义的静态方法，同时创建一个调用点<code>ConstantCallSite</code>实例，后面会通过<code>Unsafe#defineAnonymousClass()</code>实例化模板类。。</li><li><code>&lt;3&gt;</code>：调用点<code>ConstantCallSite</code>实例中的方法句柄<code>MethodHandle</code>会根据不同场景选取不同的实现，<code>MethodHandle</code>的子类很多，这里无法一一展开。</li><li><code>&lt;4&gt;</code>：通过<code>invokedynamice</code>指令，基于第<code>&lt;1&gt;</code>步中的模板类实例、第<code>&lt;3&gt;</code>步中的方法句柄以及方法入参进行方法句柄的调用，实际上最终委托到第<code>&lt;1&gt;</code>步中定义的静态方法中执行。</li></ul><p>如果想要跟踪<code>Lambda</code>表达式的整个调用生命周期，可以以<code>LambdaMetafactory#metafactory()</code>方法为入口开始<code>DEBUG</code>，调用链路十分庞大，需要有足够的耐心。总的来说就是：<code>Lambda</code>表达式是基于<code>JSR-292</code>引入的动态语言调用包<code>java.lang.invoke</code>和<code>Unsafe#defineAnonymousClass()</code>定义的轻量级模板类实现的，主要用到了<code>invokedynamice</code>字节码指令，关联到方法句柄<code>MethodHandle</code>、调用点<code>CallSite</code>等相对复杂的知识点，这里不再详细展开。</p><h2 id="实战">实战</h2><h3 id="基于JdbcTemplate进行轻量级DAO封装">基于JdbcTemplate进行轻量级DAO封装</h3><p>假设订单表的<code>DDL</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t_order`</span><br><span class="line">(</span><br><span class="line">    id          BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    create_time DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    edit_time   DATETIME        NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">    user_id     BIGINT UNSIGNED NOT NULL COMMENT <span class="string">'用户ID'</span>,</span><br><span class="line">    <span class="function">order_id    <span class="title">VARCHAR</span><span class="params">(<span class="number">64</span>)</span>     NOT NULL COMMENT '订单ID',</span></span><br><span class="line"><span class="function">    amount      <span class="title">DECIMAL</span><span class="params">(<span class="number">12</span>, <span class="number">2</span>)</span>  NOT NULL DEFAULT 0 COMMENT '订单金额',</span></span><br><span class="line"><span class="function">    INDEX <span class="title">idx_user_id</span> <span class="params">(user_id)</span>,</span></span><br><span class="line"><span class="function">    UNIQUE <span class="title">uniq_order_id</span> <span class="params">(order_id)</span></span></span><br><span class="line"><span class="function">) COMMENT '订单表'</span>;</span><br></pre></td></tr></table></figure><p>下面基于<code>JdbcTemplate</code>封装一个轻量级的<code>OrderDao</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 辅助接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PreparedStatementProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultSetConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderDao接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Order record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateSelective</span><span class="params">(Order record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Order <span class="title">selectOneByOrderId</span><span class="params">(String orderId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">selectByUserId</span><span class="params">(Long userId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderDao实现</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlOrderDao</span> <span class="keyword">implements</span> <span class="title">OrderDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResultSetConverter&lt;Order&gt; CONVERTER = r -&gt; &#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setId(r.getLong(<span class="string">"id"</span>));</span><br><span class="line">        order.setCreateTime(r.getTimestamp(<span class="string">"create_time"</span>).toLocalDateTime());</span><br><span class="line">        order.setEditTime(r.getTimestamp(<span class="string">"edit_time"</span>).toLocalDateTime());</span><br><span class="line">        order.setUserId(r.getLong(<span class="string">"user_id"</span>));</span><br><span class="line">        order.setAmount(r.getBigDecimal(<span class="string">"amount"</span>));</span><br><span class="line">        order.setOrderId(r.getString(<span class="string">"order_id"</span>));</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResultSetExtractor&lt;List&lt;Order&gt;&gt; MULTI = r -&gt; &#123;</span><br><span class="line">        List&lt;Order&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (r.next()) &#123;</span><br><span class="line">            list.add(CONVERTER.convert(r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResultSetExtractor&lt;Order&gt; SINGLE = r -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (r.next()) &#123;</span><br><span class="line">            <span class="keyword">return</span> CONVERTER.convert(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Order record)</span> </span>&#123;</span><br><span class="line">        List&lt;PreparedStatementProcessor&gt; processors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"INSERT INTO t_order("</span>);</span><br><span class="line">        Cursor cursor = <span class="keyword">new</span> Cursor();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getId()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"id,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setLong(idx, record.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getOrderId()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"order_id,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setString(idx, record.getOrderId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getUserId()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"user_id,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setLong(idx, record.getUserId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getAmount()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"amount,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setBigDecimal(idx, record.getAmount()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getCreateTime()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"create_time,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setTimestamp(idx, Timestamp.valueOf(record.getCreateTime())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getEditTime()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"edit_time,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setTimestamp(idx, Timestamp.valueOf(record.getEditTime())));</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder realSql = <span class="keyword">new</span> StringBuilder(sql.substring(<span class="number">0</span>, sql.lastIndexOf(<span class="string">","</span>)));</span><br><span class="line">        realSql.append(<span class="string">") VALUES ("</span>);</span><br><span class="line">        <span class="keyword">int</span> idx = cursor.idx();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; idx; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != idx - <span class="number">1</span>) &#123;</span><br><span class="line">                realSql.append(<span class="string">"?,"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                realSql.append(<span class="string">"?"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        realSql.append(<span class="string">")"</span>);</span><br><span class="line">        <span class="comment">// 传入主键的情况</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getId()) &#123;</span><br><span class="line">            <span class="keyword">return</span> jdbcTemplate.update(realSql.toString(), p -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (PreparedStatementProcessor processor : processors) &#123;</span><br><span class="line">                    processor.process(p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 自增主键的情况</span></span><br><span class="line">            KeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();</span><br><span class="line">            <span class="keyword">int</span> count = jdbcTemplate.update(p -&gt; &#123;</span><br><span class="line">                PreparedStatement ps = p.prepareStatement(realSql.toString(), Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">                <span class="keyword">for</span> (PreparedStatementProcessor processor : processors) &#123;</span><br><span class="line">                    processor.process(ps);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ps;</span><br><span class="line">            &#125;, keyHolder);</span><br><span class="line">            record.setId(Objects.requireNonNull(keyHolder.getKey()).longValue());</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateSelective</span><span class="params">(Order record)</span> </span>&#123;</span><br><span class="line">        List&lt;PreparedStatementProcessor&gt; processors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"UPDATE t_order SET "</span>);</span><br><span class="line">        Cursor cursor = <span class="keyword">new</span> Cursor();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getOrderId()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"order_id = ?,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setString(idx, record.getOrderId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getUserId()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"user_id = ?,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setLong(idx, record.getUserId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getAmount()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"amount = ?,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setBigDecimal(idx, record.getAmount()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getCreateTime()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"create_time = ?,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setTimestamp(idx, Timestamp.valueOf(record.getCreateTime())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != record.getEditTime()) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">            sql.append(<span class="string">"edit_time = ?,"</span>);</span><br><span class="line">            processors.add(p -&gt; p.setTimestamp(idx, Timestamp.valueOf(record.getEditTime())));</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder realSql = <span class="keyword">new</span> StringBuilder(sql.substring(<span class="number">0</span>, sql.lastIndexOf(<span class="string">","</span>)));</span><br><span class="line">        <span class="keyword">int</span> idx = cursor.add();</span><br><span class="line">        processors.add(p -&gt; p.setLong(idx, record.getId()));</span><br><span class="line">        realSql.append(<span class="string">" WHERE id = ?"</span>);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(realSql.toString(), p -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (PreparedStatementProcessor processor : processors) &#123;</span><br><span class="line">                processor.process(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">selectOneByOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">"SELECT * FROM t_order WHERE order_id = ?"</span>, p -&gt; p.setString(<span class="number">1</span>, orderId), SINGLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">selectByUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">"SELECT * FROM t_order WHERE order_id = ?"</span>, p -&gt; p.setLong(<span class="number">1</span>, userId), MULTI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cursor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            idx++;</span><br><span class="line">            <span class="keyword">return</span> idx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">idx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> idx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于<code>Mybatis Generator</code>，上面的<code>DAO</code>实现笔者已经做了一个简单的生成器，只要配置好数据源的连接属性和表过滤规则就可以生成对应的实体类和<code>DAO</code>类。</p><h3 id="基于Optional进行VO设置值">基于Optional进行VO设置值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设VO有多个层级，每个层级都不知道父节点是否为NULL，如下</span></span><br><span class="line"><span class="comment">// - OrderInfoVo</span></span><br><span class="line"><span class="comment">//   - UserInfoVo</span></span><br><span class="line"><span class="comment">//     - AddressInfoVo</span></span><br><span class="line"><span class="comment">//        - address(属性)</span></span><br><span class="line"><span class="comment">// 假设我要为address属性赋值，那么就会产生箭头型代码。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规方法</span></span><br><span class="line">String address = <span class="string">"xxx"</span>;</span><br><span class="line">OrderInfoVo o = ...;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != o)&#123;</span><br><span class="line">    UserInfoVo uiv = o.getUserInfoVo();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != uiv)&#123;</span><br><span class="line">        AddressInfoVo aiv = uiv.getAddressInfoVo();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != aiv)&#123;</span><br><span class="line">            aiv.setAddress(address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Optional和Lambda</span></span><br><span class="line">String address = <span class="string">"xxx"</span>;</span><br><span class="line">OrderInfoVo o = ...;</span><br><span class="line">Optional.ofNullable(o).map(OrderInfoVo::getUserInfoVo).map(UserInfoVo::getAddressInfoVo).ifPresent(a -&gt; a.setAddress(address));</span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p><code>Lambda</code>是<code>Java</code>中一个香甜的语法糖，拥抱<code>Lambda</code>，拥抱函数式编程，笔者也经历过抗拒、不看好、上手和真香的过程，目前也大量使用<code>Stream</code>和<code>Lambda</code>，能在保证性能的前提下，尽可能简化代码，解放劳动力。时代在进步，<code>Java</code>也在进步，这是很多人活着和坚持编程事业的信念。</p><p>参考资料：</p><ul><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener">Lambda Expressions</a></li><li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="noopener">Default Methods</a></li><li><a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html" target="_blank" rel="noopener">State of the Lambda</a></li><li>JDK11部分源码</li></ul><p>（本文完 e-a-20200208 c-5-d）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;回想一下，&lt;code&gt;JDK8&lt;/code&gt;是2014年发布正式版的，到现在为（&lt;code&gt;2020-02-08&lt;/code&gt;）止已经过去了5年多。&lt;code&gt;JDK8&lt;/code&gt;引入的两个比较强大的新特性是&lt;code&gt;Lambda&lt;/code&gt;表达式（下文的&lt;code&gt;Lambda&lt;/code&gt;特指&lt;code&gt;JDK&lt;/code&gt;提供的&lt;code&gt;Lambda&lt;/code&gt;）和&lt;code&gt;Stream&lt;/code&gt;，这两个强大的特性让函数式编程在&lt;code&gt;Java&lt;/code&gt;开发中发扬光大。这篇文章会从基本概念、使用方式、实现原理和实战场景等角度介绍&lt;code&gt;Lambda&lt;/code&gt;的全貌，其中还会涉及一些函数式编程概念、&lt;code&gt;JVM&lt;/code&gt;一些知识等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Java/"/>
    
      <category term="Lambda" scheme="http://throwable.club/blog/categories/Java/Lambda/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Lambda" scheme="http://throwable.club/blog/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>一个基于RabbitMQ的可复用的事务消息方案</title>
    <link href="http://throwable.club/2020/02/05/j-action-transactional-message-by-rabbit/"/>
    <id>http://throwable.club/2020/02/05/j-action-transactional-message-by-rabbit/</id>
    <published>2020-02-05T13:37:56.000Z</published>
    <updated>2020-02-05T13:39:07.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>分布式事务是微服务实践中一个比较棘手的问题，在笔者所实施的微服务实践方案中，都采用了折中或者规避强一致性的方案。参考<code>Ebay</code>多年前提出的本地消息表方案，基于<code>RabbitMQ</code>和<code>MySQL</code>（<code>JDBC</code>）做了轻量级的封装，实现了低入侵性的事务消息模块。本文的内容就是详细分析整个方案的设计思路和实施。环境依赖如下：</p><ul><li><code>JDK1.8+</code></li><li><code>spring-boot-start-web:2.x.x</code>、<code>spring-boot-start-jdbc:2.x.x</code>、<code>spring-boot-start-amqp:2.x.x</code></li><li><code>HikariCP:3.x.x</code>（<code>spring-boot-start-jdbc</code>自带）、<code>mysql-connector-java:5.1.48</code></li><li><code>redisson:3.12.1</code></li></ul><a id="more"></a><h2 id="方案设计思路">方案设计思路</h2><p>事务消息原则上只适合弱一致性（或者说<strong>最终一致性</strong>）的场景，常见的弱一致性场景如：</p><ul><li>用户服务完成了注册动作，向短信服务推送一条营销相关的消息。</li><li>信贷体系中，订单服务保存订单完毕，向审批服务推送一条待审批的订单记录信息。</li><li>…</li></ul><p><strong>强一致性的场景一般不应该选用事务消息</strong>。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-3.png" alt=""></p><p>一般情况下，要求强一致性说明要严格同步，也就是所有操作必须同时成功或者同时失败，这样就会引入同步带来的额外消耗。如果一个事务消息模块设计合理，补偿、查询、监控等等功能都完毕，由于系统交互是异步的，整体吞吐要比严格同步高。在笔者负责的业务系统中基于事务消息使用还定制了一条基本原则：<strong>消息内容正确的前提下，消费方出现异常需要自理</strong>。</p><blockquote><p>简单来说就是：上游保证了自身的业务正确性，成功推送了正确的消息到RabbitMQ就认为上游义务已经结束。</p></blockquote><p>为了降低代码的入侵性，事务消息需要借助<code>Spring</code>的<strong>编程式事务</strong>或者<strong>声明式事务</strong>。编程式事务一般依赖于<code>TransactionTemplate</code>，而声明式事务依托于<code>AOP</code>模块，依赖于注解<code>@Transactional</code>。</p><p>接着需要自定义一个事务消息功能模块，新增一个事务消息记录表（其实就是<strong>本地消息表</strong>），用于保存每一条需要发送的消息记录。事务消息功能模块的主要功能是：</p><ul><li>保存消息记录。</li><li>推送消息到<code>RabbitMQ</code>服务端。</li><li>消息记录的查询、补偿推送等等。</li></ul><h3 id="事务执行的逻辑单元">事务执行的逻辑单元</h3><p>在事务执行的逻辑单元里面，需要进行待推送的事务消息记录的保存，也就是：<strong>本地（业务）逻辑和事务消息记录保存操作绑定在同一个事务</strong>。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-1.png" alt=""></p><p>发送消息到<code>RabbitMQ</code>服务端这一步需要延后到<strong>事务提交之后</strong>，这样才能保证事务提交成功和消息成功发送到<code>RabbitMQ</code>服务端这两个操作是一致的。为了把<strong>保存待发送的事务消息</strong>和<strong>发送消息到RabbitMQ</strong>两个动作从使用者感知角度合并为一个动作，这里需要用到<code>Spring</code>特有的事务同步器<code>TransactionSynchronization</code>，这里分析一下事务同步器的主要方法的回调位置，主要参考<code>AbstractPlatformTransactionManager#commit()</code>或者<code>AbstractPlatformTransactionManager#processCommit()</code>方法：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-2.png" alt=""></p><p>上图仅仅演示了事务正确提交的场景（不包含异常的场景）。这里可以明确知道，事务同步器<code>TransactionSynchronization</code>的<code>afterCommit()</code>和<code>afterCompletion(int status)</code>方法都在真正的事务提交点<code>AbstractPlatformTransactionManager#doCommit()</code>之后回调，因此可以选用这两个方法其中之一用于执行推送消息到<code>RabbitMQ</code>服务端，整体的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dto <span class="title">businessMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    business transaction code block ...</span><br><span class="line">    <span class="comment">// 保存事务消息</span></span><br><span class="line">    [saveTransactionMessageRecord()]</span><br><span class="line">    <span class="comment">// 注册事务同步器 - 在afterCommit()方法中推送消息到RabbitMQ</span></span><br><span class="line">    [register TransactionSynchronization,<span class="function">send message in method <span class="title">afterCommit</span><span class="params">()</span>]</span></span><br><span class="line"><span class="function">    business transaction code block ...</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>上面伪代码中，<strong>保存事务消息</strong>和<strong>注册事务同步器</strong>两个步骤可以安插在事务方法中的任意位置，也就是说与执行顺序无关。</p><h3 id="事务消息的补偿">事务消息的补偿</h3><p>虽然之前提到笔者建议下游服务自理自身服务消费异常的场景，但是有些时候迫于无奈还是需要上游把对应的消息重新推送，这个算是特殊的场景。另外还有一个场景需要考虑：事务提交之后触发事务同步器<code>TransactionSynchronization</code>的<code>afterCommit()</code>方法失败。这是一个低概率的场景，但是在生产中一定会出现，一个比较典型的原因就是：<strong>事务提交完成后尚未来得及触发<code>TransactionSynchronization#afterCommit()</code>方法进行推送服务实例就被重启</strong>。如下图所示：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-5.png" alt=""></p><p>为了统一处理补偿推送的问题，使用了有限状态判断消息是否已经推送成功：</p><ul><li>在事务方法内，保存事务消息的时候，标记消息记录推送状态为<strong>处理中</strong>。</li><li>事务同步器接口<code>TransactionSynchronization</code>的<code>afterCommit()</code>方法的实现中，推送对应的消息到<code>RabbitMQ</code>，然后更变事务消息记录的状态为<strong>推送成功</strong>。</li></ul><p>还有一种极为特殊的情况是<code>RabbitMQ</code>服务端本身出现故障导致消息推送异常，这种情况下需要进行重试（补偿推送），<strong>经验证明短时间内的反复重试是没有意义的</strong>，故障的服务一般不会瞬时恢复，所以可以考虑使用<strong>指数退避算法</strong>进行重试，同时需要限制最大重试次数。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-6.png" alt=""></p><p>指数值、间隔值和最大重试次数上限需要根据实际情况设定，否则容易出现消息延时过大或者重试过于频繁等问题。</p><h2 id="方案实施">方案实施</h2><p>引入核心依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">redisson.version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">redisson.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.connector.version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">mysql.connector.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;redisson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>spring-boot-starter-jdbc</code>、<code>mysql-connector-java</code>和<code>spring-boot-starter-aop</code>是<code>MySQL</code>事务相关，而<code>spring-boot-starter-amqp</code>是<code>RabbitMQ</code>客户端的封装，<code>redisson</code>主要使用其分布式锁，用于补偿定时任务的加锁执行（以防止服务多个节点并发执行补偿推送）。</p><h3 id="表设计">表设计</h3><p>事务消息模块主要涉及两张表，以<code>MySQL</code>为例，建表<code>DDL</code>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_transactional_message`</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>                  <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    create_time         DATETIME        <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    edit_time           DATETIME        <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    creator             <span class="built_in">VARCHAR</span>(<span class="number">20</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'admin'</span>,</span><br><span class="line">    editor              <span class="built_in">VARCHAR</span>(<span class="number">20</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'admin'</span>,</span><br><span class="line">    deleted             <span class="built_in">TINYINT</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    current_retry_times <span class="built_in">TINYINT</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'当前重试次数'</span>,</span><br><span class="line">    max_retry_times     <span class="built_in">TINYINT</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">5</span> <span class="keyword">COMMENT</span> <span class="string">'最大重试次数'</span>,</span><br><span class="line">    queue_name          <span class="built_in">VARCHAR</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'队列名'</span>,</span><br><span class="line">    exchange_name       <span class="built_in">VARCHAR</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'交换器名'</span>,</span><br><span class="line">    exchange_type       <span class="built_in">VARCHAR</span>(<span class="number">8</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'交换类型'</span>,</span><br><span class="line">    routing_key         <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">COMMENT</span> <span class="string">'路由键'</span>,</span><br><span class="line">    business_module     <span class="built_in">VARCHAR</span>(<span class="number">32</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'业务模块'</span>,</span><br><span class="line">    business_key        <span class="built_in">VARCHAR</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'业务键'</span>,</span><br><span class="line">    next_schedule_time  DATETIME        <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'下一次调度时间'</span>,</span><br><span class="line">    message_status      <span class="built_in">TINYINT</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'消息状态'</span>,</span><br><span class="line">    init_backoff        <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">10</span> <span class="keyword">COMMENT</span> <span class="string">'退避初始化值,单位为秒'</span>,</span><br><span class="line">    backoff_factor      <span class="built_in">TINYINT</span>         <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">2</span> <span class="keyword">COMMENT</span> <span class="string">'退避因子(也就是指数)'</span>,</span><br><span class="line">    <span class="keyword">INDEX</span> idx_queue_name (queue_name),</span><br><span class="line">    <span class="keyword">INDEX</span> idx_create_time (create_time),</span><br><span class="line">    <span class="keyword">INDEX</span> idx_next_schedule_time (next_schedule_time),</span><br><span class="line">    <span class="keyword">INDEX</span> idx_business_key (business_key)</span><br><span class="line">) <span class="keyword">COMMENT</span> <span class="string">'事务消息表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_transactional_message_content`</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>         <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    message_id <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'事务消息记录ID'</span>,</span><br><span class="line">    <span class="keyword">content</span>    <span class="built_in">TEXT</span> <span class="keyword">COMMENT</span> <span class="string">'消息内容'</span></span><br><span class="line">) <span class="keyword">COMMENT</span> <span class="string">'事务消息内容表'</span>;</span><br></pre></td></tr></table></figure><p>因为此模块有可能扩展出一个后台管理模块，所以要把消息的管理和状态相关字段和大体积的消息内容分别存放在两个表，从而避免大批量查询消息记录的时候<code>MySQL</code>服务<code>IO</code>使用率过高的问题（这是和上一个公司的<code>DBA</code>团队商讨后得到的一个比较合理的方案）。预留了两个业务字段<code>business_module</code>和<code>business_key</code>用于标识业务模块和业务键（一般是唯一识别号，例如订单号）。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-4.png" alt=""></p><p>一般情况下，如果服务通过配置自行提前声明队列和交换器的绑定关系，那么发送<code>RabbitMQ</code>消息的时候其实只依赖于<code>exchangeName</code>和<code>routingKey</code>两个字段（<code>header</code>类型的交换器是特殊的，也比较少用，这里暂时不用考虑），考虑到服务可能会遗漏声明操作，发送消息的时候会基于队列进行首次绑定声明并且缓存相关的信息（<code>RabbitMQ</code>中的队列-交换器绑定声明只要每次声明绑定关系的参数一致，则不会抛出异常）。</p><h3 id="方案代码设计">方案代码设计</h3><p>下面的方案设计描述中，暂时忽略了消息事务管理后台的<code>API</code>设计，这些可以在后期补充。</p><p>定义贫血模型实体类<code>TransactionalMessage</code>和<code>TransactionalMessageContent</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime editTime;</span><br><span class="line">    <span class="keyword">private</span> String creator;</span><br><span class="line">    <span class="keyword">private</span> String editor;</span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">    <span class="keyword">private</span> Integer currentRetryTimes;</span><br><span class="line">    <span class="keyword">private</span> Integer maxRetryTimes;</span><br><span class="line">    <span class="keyword">private</span> String queueName;</span><br><span class="line">    <span class="keyword">private</span> String exchangeName;</span><br><span class="line">    <span class="keyword">private</span> String exchangeType;</span><br><span class="line">    <span class="keyword">private</span> String routingKey;</span><br><span class="line">    <span class="keyword">private</span> String businessModule;</span><br><span class="line">    <span class="keyword">private</span> String businessKey;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime nextScheduleTime;</span><br><span class="line">    <span class="keyword">private</span> Integer messageStatus;</span><br><span class="line">    <span class="keyword">private</span> Long initBackoff;</span><br><span class="line">    <span class="keyword">private</span> Integer backoffFactor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalMessageContent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long messageId;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义<code>dao</code>接口（这里暂时不展开实现的细节代码，存储使用<code>MySQL</code>，如果要替换为其他类型的数据库，只需要使用不同的实现即可）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionalMessageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertSelective</span><span class="params">(TransactionalMessage record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStatusSelective</span><span class="params">(TransactionalMessage record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;TransactionalMessage&gt; <span class="title">queryPendingCompensationRecords</span><span class="params">(LocalDateTime minScheduleTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                               LocalDateTime maxScheduleTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                               <span class="keyword">int</span> limit)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionalMessageContentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(TransactionalMessageContent record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;TransactionalMessageContent&gt; <span class="title">queryByMessageIds</span><span class="params">(String messageIds)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着定义事务消息服务接口<code>TransactionalMessageService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对外提供的服务类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionalMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendTransactionalMessage</span><span class="params">(Destination destination, TxMessage message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExchangeType &#123;</span><br><span class="line"></span><br><span class="line">    FANOUT(<span class="string">"fanout"</span>),</span><br><span class="line"></span><br><span class="line">    DIRECT(<span class="string">"direct"</span>),</span><br><span class="line"></span><br><span class="line">    TOPIC(<span class="string">"topic"</span>),</span><br><span class="line"></span><br><span class="line">    DEFAULT(<span class="string">""</span>),</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息的目的地</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">ExchangeType <span class="title">exchangeType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">queueName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">exchangeName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">routingKey</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDestination</span> <span class="keyword">implements</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExchangeType exchangeType;</span><br><span class="line">    <span class="keyword">private</span> String queueName;</span><br><span class="line">    <span class="keyword">private</span> String exchangeName;</span><br><span class="line">    <span class="keyword">private</span> String routingKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExchangeType <span class="title">exchangeType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchangeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queueName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queueName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exchangeName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchangeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">routingKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> routingKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TxMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">businessModule</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">businessKey</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">content</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTxMessage</span> <span class="keyword">implements</span> <span class="title">TxMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String businessModule;</span><br><span class="line">    <span class="keyword">private</span> String businessKey;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">businessModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> businessModule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">businessKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> businessKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">content</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息状态</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TxMessageStatus &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 待处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PENDING(<span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FAIL(-<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TransactionalMessageService</code>的实现类是事务消息的核心功能实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitTransactionalMessageService</span> <span class="keyword">implements</span> <span class="title">TransactionalMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AmqpAdmin amqpAdmin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionalMessageManagementService managementService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, Boolean&gt; QUEUE_ALREADY_DECLARE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTransactionalMessage</span><span class="params">(Destination destination, TxMessage message)</span> </span>&#123;</span><br><span class="line">        String queueName = destination.queueName();</span><br><span class="line">        String exchangeName = destination.exchangeName();</span><br><span class="line">        String routingKey = destination.routingKey();</span><br><span class="line">        ExchangeType exchangeType = destination.exchangeType();</span><br><span class="line">        <span class="comment">// 原子性的预声明</span></span><br><span class="line">        QUEUE_ALREADY_DECLARE.computeIfAbsent(queueName, k -&gt; &#123;</span><br><span class="line">            Queue queue = <span class="keyword">new</span> Queue(queueName);</span><br><span class="line">            amqpAdmin.declareQueue(queue);</span><br><span class="line">            Exchange exchange = <span class="keyword">new</span> CustomExchange(exchangeName, exchangeType.getType());</span><br><span class="line">            amqpAdmin.declareExchange(exchange);</span><br><span class="line">            Binding binding = BindingBuilder.bind(queue).to(exchange).with(routingKey).noargs();</span><br><span class="line">            amqpAdmin.declareBinding(binding);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        TransactionalMessage record = <span class="keyword">new</span> TransactionalMessage();</span><br><span class="line">        record.setQueueName(queueName);</span><br><span class="line">        record.setExchangeName(exchangeName);</span><br><span class="line">        record.setExchangeType(exchangeType.getType());</span><br><span class="line">        record.setRoutingKey(routingKey);</span><br><span class="line">        record.setBusinessModule(message.businessModule());</span><br><span class="line">        record.setBusinessKey(message.businessKey());</span><br><span class="line">        String content = message.content();</span><br><span class="line">        <span class="comment">// 保存事务消息记录</span></span><br><span class="line">        managementService.saveTransactionalMessageRecord(record, content);</span><br><span class="line">        <span class="comment">// 注册事务同步器</span></span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                managementService.sendMessageSync(record, content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息记录状态和内容持久化的管理统一放在<code>TransactionalMessageManagementService</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalMessageManagementService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionalMessageDao messageDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionalMessageContentDao contentDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LocalDateTime END = LocalDateTime.of(<span class="number">2999</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_INIT_BACKOFF = <span class="number">10L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_BACKOFF_FACTOR = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX_RETRY_TIMES = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveTransactionalMessageRecord</span><span class="params">(TransactionalMessage record, String content)</span> </span>&#123;</span><br><span class="line">        record.setMessageStatus(TxMessageStatus.PENDING.getStatus());</span><br><span class="line">        record.setNextScheduleTime(calculateNextScheduleTime(LocalDateTime.now(), DEFAULT_INIT_BACKOFF,</span><br><span class="line">                DEFAULT_BACKOFF_FACTOR, <span class="number">0</span>));</span><br><span class="line">        record.setCurrentRetryTimes(<span class="number">0</span>);</span><br><span class="line">        record.setInitBackoff(DEFAULT_INIT_BACKOFF);</span><br><span class="line">        record.setBackoffFactor(DEFAULT_BACKOFF_FACTOR);</span><br><span class="line">        record.setMaxRetryTimes(DEFAULT_MAX_RETRY_TIMES);</span><br><span class="line">        messageDao.insertSelective(record);</span><br><span class="line">        TransactionalMessageContent messageContent = <span class="keyword">new</span> TransactionalMessageContent();</span><br><span class="line">        messageContent.setContent(content);</span><br><span class="line">        messageContent.setMessageId(record.getId());</span><br><span class="line">        contentDao.insert(messageContent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageSync</span><span class="params">(TransactionalMessage record, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(record.getExchangeName(), record.getRoutingKey(), content);</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">"发送消息成功,目标队列:&#123;&#125;,消息内容:&#123;&#125;"</span>, record.getQueueName(), content);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 标记成功</span></span><br><span class="line">            markSuccess(record);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 标记失败</span></span><br><span class="line">            markFail(record, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">markSuccess</span><span class="params">(TransactionalMessage record)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 标记下一次执行时间为最大值</span></span><br><span class="line">        record.setNextScheduleTime(END);</span><br><span class="line">        record.setCurrentRetryTimes(record.getCurrentRetryTimes().compareTo(record.getMaxRetryTimes()) &gt;= <span class="number">0</span> ?</span><br><span class="line">                record.getMaxRetryTimes() : record.getCurrentRetryTimes() + <span class="number">1</span>);</span><br><span class="line">        record.setMessageStatus(TxMessageStatus.SUCCESS.getStatus());</span><br><span class="line">        record.setEditTime(LocalDateTime.now());</span><br><span class="line">        messageDao.updateStatusSelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">markFail</span><span class="params">(TransactionalMessage record, Exception e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"发送消息失败,目标队列:&#123;&#125;"</span>, record.getQueueName(), e);</span><br><span class="line">        record.setCurrentRetryTimes(record.getCurrentRetryTimes().compareTo(record.getMaxRetryTimes()) &gt;= <span class="number">0</span> ?</span><br><span class="line">                record.getMaxRetryTimes() : record.getCurrentRetryTimes() + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 计算下一次的执行时间</span></span><br><span class="line">        LocalDateTime nextScheduleTime = calculateNextScheduleTime(</span><br><span class="line">                record.getNextScheduleTime(),</span><br><span class="line">                record.getInitBackoff(),</span><br><span class="line">                record.getBackoffFactor(),</span><br><span class="line">                record.getCurrentRetryTimes()</span><br><span class="line">        );</span><br><span class="line">        record.setNextScheduleTime(nextScheduleTime);</span><br><span class="line">        record.setMessageStatus(TxMessageStatus.FAIL.getStatus());</span><br><span class="line">        record.setEditTime(LocalDateTime.now());</span><br><span class="line">        messageDao.updateStatusSelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算下一次执行时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> base          基础时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initBackoff   退避基准值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> backoffFactor 退避指数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> round         轮数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LocalDateTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LocalDateTime <span class="title">calculateNextScheduleTime</span><span class="params">(LocalDateTime base,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">long</span> initBackoff,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">long</span> backoffFactor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">long</span> round)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> delta = initBackoff * Math.pow(backoffFactor, round);</span><br><span class="line">        <span class="keyword">return</span> base.plusSeconds((<span class="keyword">long</span>) delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推送补偿 - 里面的参数应该根据实际场景定制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processPendingCompensationRecords</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 时间的右值为当前时间减去退避初始值，这里预防把刚保存的消息也推送了</span></span><br><span class="line">        LocalDateTime max = LocalDateTime.now().plusSeconds(-DEFAULT_INIT_BACKOFF);</span><br><span class="line">        <span class="comment">// 时间的左值为右值减去1小时</span></span><br><span class="line">        LocalDateTime min = max.plusHours(-<span class="number">1</span>);</span><br><span class="line">        Map&lt;Long, TransactionalMessage&gt; collect = messageDao.queryPendingCompensationRecords(min, max, LIMIT)</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(TransactionalMessage::getId, x -&gt; x));</span><br><span class="line">        <span class="keyword">if</span> (!collect.isEmpty()) &#123;</span><br><span class="line">            StringJoiner joiner = <span class="keyword">new</span> StringJoiner(<span class="string">","</span>, <span class="string">"("</span>, <span class="string">")"</span>);</span><br><span class="line">            collect.keySet().forEach(x -&gt; joiner.add(x.toString()));</span><br><span class="line">            contentDao.queryByMessageIds(joiner.toString())</span><br><span class="line">                    .forEach(item -&gt; &#123;</span><br><span class="line">                        TransactionalMessage message = collect.get(item.getMessageId());</span><br><span class="line">                        sendMessageSync(message, item.getContent());</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一点尚待优化：更新事务消息记录状态的方法可以优化为批量更新，在<code>limit</code>比较大的时候，批量更新的效率会更高。</p><p>最后是定时任务的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleJobAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionalMessageManagementService managementService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里用的是本地的Redis,实际上要做成配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedissonClient redisson = Redisson.create();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">10000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionalMessageCompensationTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RLock lock = redisson.getLock(<span class="string">"transactionalMessageCompensationTask"</span>);</span><br><span class="line">        <span class="comment">// 等待时间5秒,预期300秒执行完毕,这两个值需要按照实际场景定制</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLock = lock.tryLock(<span class="number">5</span>, <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (tryLock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">                log.info(<span class="string">"开始执行事务消息推送补偿定时任务..."</span>);</span><br><span class="line">                managementService.processPendingCompensationRecords();</span><br><span class="line">                <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">long</span> delta = end - start;</span><br><span class="line">                <span class="comment">// 以防锁过早释放</span></span><br><span class="line">                <span class="keyword">if</span> (delta &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span> - delta);</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">"执行事务消息推送补偿定时任务完毕,耗时:&#123;&#125; ms..."</span>, end - start);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本代码编写完，整个项目的结构如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-7.png" alt=""></p><p>最后添加两个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockBusinessRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MockBusinessService mockBusinessService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockBusinessService.saveOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockBusinessService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionalMessageService transactionalMessageService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">saveOrder</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        BigDecimal amount = BigDecimal.valueOf(<span class="number">100L</span>);</span><br><span class="line">        Map&lt;String, Object&gt; message = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        message.put(<span class="string">"orderId"</span>, orderId);</span><br><span class="line">        message.put(<span class="string">"amount"</span>, amount);</span><br><span class="line">        jdbcTemplate.update(<span class="string">"INSERT INTO t_order(order_id,amount) VALUES (?,?)"</span>, p -&gt; &#123;</span><br><span class="line">            p.setString(<span class="number">1</span>, orderId);</span><br><span class="line">            p.setBigDecimal(<span class="number">2</span>, amount);</span><br><span class="line">        &#125;);</span><br><span class="line">        String content = objectMapper.writeValueAsString(message);</span><br><span class="line">        transactionalMessageService.sendTransactionalMessage(</span><br><span class="line">                DefaultDestination.builder()</span><br><span class="line">                        .exchangeName(<span class="string">"tm.test.exchange"</span>)</span><br><span class="line">                        .queueName(<span class="string">"tm.test.queue"</span>)</span><br><span class="line">                        .routingKey(<span class="string">"tm.test.key"</span>)</span><br><span class="line">                        .exchangeType(ExchangeType.DIRECT)</span><br><span class="line">                        .build(),</span><br><span class="line">                DefaultTxMessage.builder()</span><br><span class="line">                        .businessKey(orderId)</span><br><span class="line">                        .businessModule(<span class="string">"SAVE_ORDER"</span>)</span><br><span class="line">                        .content(content)</span><br><span class="line">                        .build()</span><br><span class="line">        );</span><br><span class="line">        log.info(<span class="string">"保存订单:&#123;&#125;成功..."</span>, orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>某次测试结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-02-05 21:10:13.287  INFO 49556 --- [           main] club.throwable.cm.MockBusinessService    : 保存订单:07a75323-460b-42cb-aa63-1a0a45ce19bf成功...</span><br></pre></td></tr></table></figure><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202002/r-r-t-m-8.png" alt=""></p><p>模拟订单数据成功保存，而且<code>RabbitMQ</code>消息在事务成功提交后正常发送到<code>RabbitMQ</code>服务端中，如<code>RabbitMQ</code>控制台数据所示。</p><h2 id="小结">小结</h2><p>事务消息模块的设计仅仅是使异步消息推送这个功能实现趋向于完备，其实一个合理的异步消息交互系统，一定会提供同步查询接口，这一点是基于异步消息没有回调或者没有响应的特性导致的。一般而言，一个系统的吞吐量和系统的异步化处理占比成正相关（这一点可以参考<code>Amdahl's Law</code>），所以在系统架构设计实际中应该尽可能使用异步交互，提高系统吞吐量同时减少同步阻塞带来的无谓等待。事务消息模块可以扩展出一个后台管理，甚至可以配合<code>Micrometer</code>、<code>Prometheus</code>和<code>Grafana</code>体系做实时数据监控。</p><p>本文<code>demo</code>项目仓库：<a href="https://github.com/zjcscut/framework-mesh/tree/master/rabbit-transactional-message" target="_blank" rel="noopener">rabbit-transactional-message</a></p><p><code>demo</code>必须本地安装<code>MySQL</code>、<code>Redis</code>和<code>RabbitMQ</code>才能正常启动，本地必须新建一个数据库命名<code>local</code>。</p><p>（本文完 c-5-d e-a-20200202 疫情严重，马上要开始在家办公，少出门多看书）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;分布式事务是微服务实践中一个比较棘手的问题，在笔者所实施的微服务实践方案中，都采用了折中或者规避强一致性的方案。参考&lt;code&gt;Ebay&lt;/code&gt;多年前提出的本地消息表方案，基于&lt;code&gt;RabbitMQ&lt;/code&gt;和&lt;code&gt;MySQL&lt;/code&gt;（&lt;code&gt;JDBC&lt;/code&gt;）做了轻量级的封装，实现了低入侵性的事务消息模块。本文的内容就是详细分析整个方案的设计思路和实施。环境依赖如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK1.8+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-boot-start-web:2.x.x&lt;/code&gt;、&lt;code&gt;spring-boot-start-jdbc:2.x.x&lt;/code&gt;、&lt;code&gt;spring-boot-start-amqp:2.x.x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HikariCP:3.x.x&lt;/code&gt;（&lt;code&gt;spring-boot-start-jdbc&lt;/code&gt;自带）、&lt;code&gt;mysql-connector-java:5.1.48&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redisson:3.12.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="In Action" scheme="http://throwable.club/blog/categories/In-Action/"/>
    
      <category term="Distributed Transaction" scheme="http://throwable.club/blog/categories/In-Action/Distributed-Transaction/"/>
    
    
      <category term="In Action" scheme="http://throwable.club/blog/tags/In-Action/"/>
    
      <category term="Distributed Transaction" scheme="http://throwable.club/blog/tags/Distributed-Transaction/"/>
    
  </entry>
  
  <entry>
    <title>从源码上理解Netty并发工具-Promise</title>
    <link href="http://throwable.club/2020/01/23/netty-common-promise-source-code-usage/"/>
    <id>http://throwable.club/2020/01/23/netty-common-promise-source-code-usage/</id>
    <published>2020-01-23T15:34:42.000Z</published>
    <updated>2020-01-23T15:36:23.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近一直在看<code>Netty</code>相关的内容，也在编写一个轻量级的<code>RPC</code>框架来练手，途中发现了<code>Netty</code>的源码有很多亮点，某些实现甚至可以用<strong>苛刻</strong>来形容。另外，<code>Netty</code>提供的工具类也是相当优秀，可以开箱即用。这里分析一下个人比较喜欢的领域，并发方面的一个<code>Netty</code>工具模块 - <code>Promise</code>。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/n-c-u-p-1.png" alt=""></p><p>环境版本：</p><ul><li><code>Netty:4.1.44.Final</code></li><li><code>JDK1.8</code></li></ul><a id="more"></a><h2 id="Promise简介">Promise简介</h2><blockquote><p>Promise，中文翻译为承诺或者许诺，含义是人与人之间，一个人对另一个人所说的具有一定憧憬的话，一般是可以实现的。</p></blockquote><p><code>io.netty.util.concurrent.Promise</code>在注释中只有一句话：<strong>特殊的可写的</strong><code>io.netty.util.concurrent.Future</code>（<code>Promise</code>接口是<code>io.netty.util.concurrent.Future</code>的子接口）。而<code>io.netty.util.concurrent.Future</code>是<code>java.util.concurrent.Future</code>的扩展，表示<strong>一个异步操作的结果</strong>。我们知道，<code>JDK</code>并发包中的<code>Future</code>是不可写，也没有提供可监听的入口（没有应用观察者模式），而<code>Promise</code>很好地弥补了这两个问题。另一方面从继承关系来看，<code>DefaultPromise</code>是这些接口的最终实现类，所以分析源码的时候需要把重心放在<code>DefaultPromise</code>类。一般一个模块提供的功能都由接口定义，这里分析一下两个接口的功能列表：</p><ul><li><code>io.netty.util.concurrent.Promise</code></li><li><code>io.netty.util.concurrent.Future</code></li></ul><p>先看<code>io.netty.util.concurrent.Future</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">concurrent</span>.<span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// I/O操作是否执行成功</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSuccess</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记是否可以通过下面的cancel(boolean mayInterruptIfRunning)取消I/O操作</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancellable</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回I/O操作的异常实例 - 如果I/O操作本身是成功的，此方法返回null</span></span><br><span class="line">    <span class="function">Throwable <span class="title">cause</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为当前Future实例添加监听Future操作完成的监听器 - isDone()方法激活之后所有监听器实例会得到回调</span></span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">addListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span></span>;</span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">addListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt;... listeners)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为当前Future移除监听Future操作完成的监听器</span></span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">removeListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span></span>;</span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">removeListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt;... listeners)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步等待Future完成得到最终结果（成功）或者抛出异常（失败），响应中断</span></span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步等待Future完成得到最终结果（成功）或者抛出异常（失败），不响应中断</span></span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">syncUninterruptibly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待Future完成，响应中断</span></span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待Future完成，不响应中断</span></span><br><span class="line">    <span class="function">Future&lt;V&gt; <span class="title">awaitUninterruptibly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带超时时限的等待Future完成，响应中断</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeoutMillis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带超时时限的等待Future完成，不响应中断</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitUninterruptibly</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitUninterruptibly</span><span class="params">(<span class="keyword">long</span> timeoutMillis)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非阻塞马上返回Future的结果，如果Future未完成，此方法一定返回null；有些场景下如果Future成功获取到的结果是null则需要二次检查isDone()方法是否为true</span></span><br><span class="line">    <span class="function">V <span class="title">getNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消当前Future实例的执行，如果取消成功会抛出CancellationException异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sync()</code>和<code>await()</code>方法类似，只是<code>sync()</code>会检查异常执行的情况，一旦发现执行异常马上把异常实例包装抛出，而<code>await()</code>方法对异常无感知。</p><p>接着看<code>io.netty.util.concurrent.Promise</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Promise</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 标记当前Future成功，设置结果，如果设置成功，则通知所有的监听器，如果Future已经成功或者失败，则抛出IllegalStateException</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">setSuccess</span><span class="params">(V result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记当前Future成功，设置结果，如果设置成功，则通知所有的监听器并且返回true，否则返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">trySuccess</span><span class="params">(V result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记当前Future失败，设置结果为异常实例，如果设置成功，则通知所有的监听器，如果Future已经成功或者失败，则抛出IllegalStateException</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">setFailure</span><span class="params">(Throwable cause)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记当前Future失败，设置结果为异常实例，如果设置成功，则通知所有的监听器并且返回true，否则返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryFailure</span><span class="params">(Throwable cause)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标记当前的Promise实例为不可取消，设置成功返回true，否则返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">setUncancellable</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面的方法和io.netty.util.concurrent.Future中的方法基本一致，只是修改了返回类型为Promise</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">addListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">addListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt;... listeners)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">removeListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">removeListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt;... listeners)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">awaitUninterruptibly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Promise&lt;V&gt; <span class="title">syncUninterruptibly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，<code>Promise</code>接口的所有功能都分析完毕，接下来从源码角度详细分析<code>Promise</code>的实现。</p><h2 id="Promise源码实现">Promise源码实现</h2><p><code>Promise</code>的实现类为<code>io.netty.util.concurrent.DefaultPromise</code>（其实<code>DefaultPromise</code>还有很多子类，某些实现是为了定制特定的场景做了扩展），而<code>DefaultPromise</code>继承自<code>io.netty.util.concurrent.AbstractFuture</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 永久阻塞等待获取结果的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用响应中断的永久等待方法进行阻塞</span></span><br><span class="line">        await();</span><br><span class="line">        <span class="comment">// 从永久阻塞中唤醒后，先判断Future是否执行异常</span></span><br><span class="line">        Throwable cause = cause();</span><br><span class="line">        <span class="keyword">if</span> (cause == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 异常为空说明执行成功，调用getNow()方法返回结果</span></span><br><span class="line">            <span class="keyword">return</span> getNow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 异常为空不为空，这里区分特定的取消异常则转换为CancellationException抛出</span></span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> CancellationException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (CancellationException) cause;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 非取消异常的其他所有异常都被包装为执行异常ExecutionException抛出</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(cause);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带超时阻塞等待获取结果的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 调用响应中断的带超时时限等待方法进行阻塞</span></span><br><span class="line">        <span class="keyword">if</span> (await(timeout, unit)) &#123;</span><br><span class="line">             <span class="comment">// 从带超时时限阻塞中唤醒后，先判断Future是否执行异常</span></span><br><span class="line">            Throwable cause = cause();</span><br><span class="line">            <span class="keyword">if</span> (cause == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 异常为空说明执行成功，调用getNow()方法返回结果</span></span><br><span class="line">                <span class="keyword">return</span> getNow();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 异常为空不为空，这里区分特定的取消异常则转换为CancellationException抛出</span></span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> CancellationException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (CancellationException) cause;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在非等待超时的前提下，非取消异常的其他所有异常都被包装为执行异常ExecutionException抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(cause);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法步入此处说明等待超时，则抛出超时异常TimeoutException</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractFuture</code>仅仅对<code>get()</code>和<code>get(long timeout, TimeUnit unit)</code>两个方法进行了实现，其实这两处的实现和<code>java.util.concurrent.FutureTask</code>中的实现方式十分相似。</p><p><code>DefaultPromise</code>的源码比较多，这里分开多个部分去阅读，先看它的属性和构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPromise</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Promise</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常日志的日志句柄，InternalLogger是Netty内部封装的日志接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalLogger logger = InternalLoggerFactory.getInstance(DefaultPromise<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务拒绝执行时候的日志句柄 - Promise需要作为一个任务提交到线程中执行，如果任务拒绝则使用此日志句柄打印日志</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalLogger rejectedExecutionLogger =</span><br><span class="line">            InternalLoggerFactory.getInstance(DefaultPromise.class.getName() + ".rejectedExecution");</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听器的最大栈深度，默认值为8，这个值是防止嵌套回调调用的时候栈深度过大导致内存溢出，后面会举个例子说明它的用法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LISTENER_STACK_DEPTH = Math.min(<span class="number">8</span>,</span><br><span class="line">            SystemPropertyUtil.getInt(<span class="string">"io.netty.defaultPromise.maxListenerStackDepth"</span>, <span class="number">8</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结果更新器，用于CAS更新结果result的值</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;DefaultPromise, Object&gt; RESULT_UPDATER =</span><br><span class="line">            AtomicReferenceFieldUpdater.newUpdater(DefaultPromise.class, Object.class, "result");</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于填充result的值，当设置结果result传入null，Promise执行成功，用这个值去表示成功的结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object SUCCESS = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于填充result的值，表示Promise不能被取消</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object UNCANCELLABLE = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// CancellationException实例的持有器，用于判断Promise取消状态和抛出CancellationException</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CauseHolder CANCELLATION_CAUSE_HOLDER = <span class="keyword">new</span> CauseHolder(ThrowableUtil.unknownStackTrace(</span><br><span class="line">            new CancellationException(), DefaultPromise.class, "cancel(...)"));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// CANCELLATION_CAUSE_HOLDER的异常栈信息元素数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StackTraceElement[] CANCELLATION_STACK = CANCELLATION_CAUSE_HOLDER.cause.getStackTrace();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 真正的结果对象，使用Object类型，最终有可能为null、真正的结果实例、SUCCESS、UNCANCELLABLE或者CANCELLATION_CAUSE_HOLDER等等</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Object result;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 事件执行器，这里暂时不做展开，可以理解为单个调度线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventExecutor executor;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 监听器集合，可能是单个GenericFutureListener实例或者DefaultFutureListeners（监听器集合）实例</span></span><br><span class="line">    <span class="keyword">private</span> Object listeners;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待获取结果的线程数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">short</span> waiters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记是否正在回调监听器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> notifyingListeners;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数依赖于EventExecutor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultPromise</span><span class="params">(EventExecutor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.executor = checkNotNull(executor, <span class="string">"executor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">DefaultPromise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// only for subclasses - 这个构造函数预留给子类</span></span><br><span class="line">        executor = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有静态内部类，用于存放Throwable实例，也就是持有异常的原因实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CauseHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Throwable cause;</span><br><span class="line">        CauseHolder(Throwable cause) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cause = cause;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有静态内部类，用于覆盖CancellationException的栈信息为前面定义的CANCELLATION_STACK，同时覆盖了toString()返回CancellationException的全类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LeanCancellationException</span> <span class="keyword">extends</span> <span class="title">CancellationException</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2794674970981187807L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Throwable <span class="title">fillInStackTrace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            setStackTrace(CANCELLATION_STACK);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> CancellationException<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Promise</code>目前支持两种类型的监听器：</p><ul><li><code>GenericFutureListener</code>：支持泛型的<code>Future</code>监听器。</li><li><code>GenericProgressiveFutureListener</code>：它是<code>GenericFutureListener</code>的子类，支持进度表示和支持泛型的<code>Future</code>监听器（有些场景需要多个步骤实现，类似于进度条那样）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GenericFutureListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericFutureListener</span>&lt;<span class="title">F</span> <span class="keyword">extends</span> <span class="title">Future</span>&lt;?&gt;&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(F future)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenericProgressiveFutureListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericProgressiveFutureListener</span>&lt;<span class="title">F</span> <span class="keyword">extends</span> <span class="title">ProgressiveFuture</span>&lt;?&gt;&gt; <span class="keyword">extends</span> <span class="title">GenericFutureListener</span>&lt;<span class="title">F</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationProgressed</span><span class="params">(F future, <span class="keyword">long</span> progress, <span class="keyword">long</span> total)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让<code>Promise</code>支持多个监听器，<code>Netty</code>添加了一个默认修饰符修饰的<code>DefaultFutureListeners</code>类用于保存监听器实例数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultFutureListeners</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFutureListeners</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;[] listeners;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> progressiveSize; <span class="comment">// the number of progressive listeners</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个构造相对特别，是为了让Promise中的listeners（Object类型）实例由单个GenericFutureListener实例转换为DefaultFutureListeners类型</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    DefaultFutureListeners(GenericFutureListener&lt;? extends Future&lt;?&gt;&gt; first, GenericFutureListener&lt;? extends Future&lt;?&gt;&gt; second) &#123;</span><br><span class="line">        listeners = <span class="keyword">new</span> GenericFutureListener[<span class="number">2</span>];</span><br><span class="line">        listeners[<span class="number">0</span>] = first;</span><br><span class="line">        listeners[<span class="number">1</span>] = second;</span><br><span class="line">        size = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (first <span class="keyword">instanceof</span> GenericProgressiveFutureListener) &#123;</span><br><span class="line">            progressiveSize ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (second <span class="keyword">instanceof</span> GenericProgressiveFutureListener) &#123;</span><br><span class="line">            progressiveSize ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;?&gt;&gt; l)</span> </span>&#123;</span><br><span class="line">        GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;[] listeners = <span class="keyword">this</span>.listeners;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="comment">// 注意这里，每次扩容数组长度是原来的2倍</span></span><br><span class="line">        <span class="keyword">if</span> (size == listeners.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.listeners = listeners = Arrays.copyOf(listeners, size &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把当前的GenericFutureListener加入数组中</span></span><br><span class="line">        listeners[size] = l;</span><br><span class="line">        <span class="comment">// 监听器总数量加1</span></span><br><span class="line">        <span class="keyword">this</span>.size = size + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果为GenericProgressiveFutureListener，则带进度指示的监听器总数量加1</span></span><br><span class="line">        <span class="keyword">if</span> (l <span class="keyword">instanceof</span> GenericProgressiveFutureListener) &#123;</span><br><span class="line">            progressiveSize ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;?&gt;&gt; l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;[] listeners = <span class="keyword">this</span>.listeners;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (listeners[i] == l) &#123;</span><br><span class="line">                <span class="comment">// 计算需要需要移动的监听器的下标</span></span><br><span class="line">                <span class="keyword">int</span> listenersToMove = size - i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (listenersToMove &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// listenersToMove后面的元素全部移动到数组的前端</span></span><br><span class="line">                    System.arraycopy(listeners, i + <span class="number">1</span>, listeners, i, listenersToMove);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 当前监听器总量的最后一个位置设置为null，数量减1</span></span><br><span class="line">                listeners[-- size] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">this</span>.size = size;</span><br><span class="line">                <span class="comment">// 如果监听器是GenericProgressiveFutureListener，则带进度指示的监听器总数量减1</span></span><br><span class="line">                <span class="keyword">if</span> (l <span class="keyword">instanceof</span> GenericProgressiveFutureListener) &#123;</span><br><span class="line">                    progressiveSize --;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回监听器实例数组</span></span><br><span class="line">    <span class="keyword">public</span> GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;[] listeners() &#123;</span><br><span class="line">        <span class="keyword">return</span> listeners;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回监听器总数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回带进度指示的监听器总数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">progressiveSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> progressiveSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看<code>DefaultPromise</code>的剩余方法实现，笔者觉得<code>DefaultPromise</code>方法实现在代码顺序上是有一定的艺术的。先看几个判断<code>Promise</code>执行状态的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPromise</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Promise</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setUncancellable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过结果更新器CAS更新result为UNCANCELLABLE，期望旧值为null，更新值为UNCANCELLABLE属性，如果成功则返回true</span></span><br><span class="line">        <span class="keyword">if</span> (RESULT_UPDATER.compareAndSet(<span class="keyword">this</span>, <span class="keyword">null</span>, UNCANCELLABLE)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="comment">// 步入这里说明result当前值不为null，isDone0()和isCancelled0()都是终态，这里如果命中终态就返回false</span></span><br><span class="line">        <span class="comment">//（笔者注：其实可以这样认为，这里result不能为null，如果不为终态，它只能是UNCANCELLABLE属性实例）</span></span><br><span class="line">        <span class="keyword">return</span> !isDone0(result) || !isCancelled0(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="comment">// 如果执行成功，则结果不为null，同时不为UNCANCELLABLE，同时不为CauseHolder类型</span></span><br><span class="line">        <span class="comment">//（笔者注：其实可以这样认为，Promise为成功，则result只能是一个开发者定义的实例或者SUCCESS属性实例）</span></span><br><span class="line">        <span class="keyword">return</span> result != <span class="keyword">null</span> &amp;&amp; result != UNCANCELLABLE &amp;&amp; !(result <span class="keyword">instanceof</span> CauseHolder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCancellable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否可取消的，result为null说明Promise处于初始化状态尚未执行，则认为可以取消</span></span><br><span class="line">        <span class="keyword">return</span> result == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Throwable <span class="title">cause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过当前result获取Throwable实例</span></span><br><span class="line">        <span class="keyword">return</span> cause0(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Throwable <span class="title">cause0</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// result非CauseHolder类型，则直接返回null</span></span><br><span class="line">        <span class="keyword">if</span> (!(result <span class="keyword">instanceof</span> CauseHolder)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果result为CANCELLATION_CAUSE_HOLDER（静态CancellationException的持有）</span></span><br><span class="line">        <span class="keyword">if</span> (result == CANCELLATION_CAUSE_HOLDER) &#123;</span><br><span class="line">            <span class="comment">// 则新建一个自定义LeanCancellationException实例</span></span><br><span class="line">            CancellationException ce = <span class="keyword">new</span> LeanCancellationException();</span><br><span class="line">            <span class="comment">// 如果CAS更新结果result为LeanCancellationException新实例则返回</span></span><br><span class="line">            <span class="keyword">if</span> (RESULT_UPDATER.compareAndSet(<span class="keyword">this</span>, CANCELLATION_CAUSE_HOLDER, <span class="keyword">new</span> CauseHolder(ce))) &#123;</span><br><span class="line">                <span class="keyword">return</span> ce;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 走到这里说明了result是非CANCELLATION_CAUSE_HOLDER的自定义CauseHolder实例</span></span><br><span class="line">            result = <span class="keyword">this</span>.result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 兜底返回CauseHolder持有的cause</span></span><br><span class="line">        <span class="keyword">return</span> ((CauseHolder) result).cause;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 静态方法，判断Promise是否为取消，依据是result必须是CauseHolder类型，同时CauseHolder中的cause必须为CancellationException类型或者其子类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCancelled0</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result <span class="keyword">instanceof</span> CauseHolder &amp;&amp; ((CauseHolder) result).cause <span class="keyword">instanceof</span> CancellationException;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法，判断Promise是否完成，依据是result不为null同时不为UNCANCELLABLE属性实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDone0</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result != <span class="keyword">null</span> &amp;&amp; result != UNCANCELLABLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断Promise实例是否取消</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isCancelled0(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断Promise实例是否完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isDone0(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看监听器的添加和移除方法（这其中也包含了通知监听器的逻辑）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPromise</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Promise</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">addListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 入参非空校验</span></span><br><span class="line">        checkNotNull(listener, <span class="string">"listener"</span>);</span><br><span class="line">        <span class="comment">// 加锁，锁定的对象是Promise实例自身</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 添加监听器</span></span><br><span class="line">            addListener0(listener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果Promise实例已经执行完毕，则通知监听器进行回调</span></span><br><span class="line">        <span class="keyword">if</span> (isDone()) &#123;</span><br><span class="line">            notifyListeners();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">addListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt;... listeners)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 入参非空校验</span></span><br><span class="line">        checkNotNull(listeners, <span class="string">"listeners"</span>);</span><br><span class="line">        <span class="comment">// 加锁，锁定的对象是Promise实例自身</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历入参数组添加监听器，有空元素直接跳出</span></span><br><span class="line">            <span class="keyword">for</span> (GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener : listeners) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listener == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                addListener0(listener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果Promise实例已经执行完毕，则通知监听器进行回调</span></span><br><span class="line">        <span class="keyword">if</span> (isDone()) &#123;</span><br><span class="line">            notifyListeners();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">removeListener</span><span class="params">(<span class="keyword">final</span> GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 入参非空校验</span></span><br><span class="line">        checkNotNull(listener, <span class="string">"listener"</span>);</span><br><span class="line">        <span class="comment">// 加锁，锁定的对象是Promise实例自身</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 移除监听器</span></span><br><span class="line">            removeListener0(listener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">removeListeners</span><span class="params">(<span class="keyword">final</span> GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt;... listeners)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 入参非空校验</span></span><br><span class="line">        checkNotNull(listeners, <span class="string">"listeners"</span>);</span><br><span class="line">        <span class="comment">// 加锁，锁定的对象是Promise实例自身</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历入参数组移除监听器，有空元素直接跳出</span></span><br><span class="line">            <span class="keyword">for</span> (GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener : listeners) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listener == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                removeListener0(listener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addListener0</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果Promise实例持有listeners为null，则直接设置为入参listener</span></span><br><span class="line">        <span class="keyword">if</span> (listeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">            listeners = listener;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (listeners <span class="keyword">instanceof</span> DefaultFutureListeners) &#123;</span><br><span class="line">             <span class="comment">// 如果当前Promise实例持有listeners的是DefaultFutureListeners类型，则调用它的add()方法进行添加</span></span><br><span class="line">            ((DefaultFutureListeners) listeners).add(listener);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 步入这里说明当前Promise实例持有listeners为单个GenericFutureListener实例，需要转换为DefaultFutureListeners实例</span></span><br><span class="line">            listeners = <span class="keyword">new</span> DefaultFutureListeners((GenericFutureListener&lt;?&gt;) listeners, listener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeListener0</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> V&gt;&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果当前Promise实例持有listeners的是DefaultFutureListeners类型，则调用它的remove()方法进行移除</span></span><br><span class="line">        <span class="keyword">if</span> (listeners <span class="keyword">instanceof</span> DefaultFutureListeners) &#123;</span><br><span class="line">            ((DefaultFutureListeners) listeners).remove(listener);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (listeners == listener) &#123;</span><br><span class="line">            <span class="comment">// 如果当前Promise实例持有listeners不为DefaultFutureListeners类型，也就是单个GenericFutureListener并且和传入的listener相同，</span></span><br><span class="line">            <span class="comment">// 则Promise实例持有listeners置为null</span></span><br><span class="line">            listeners = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventExecutor executor = executor();</span><br><span class="line">        <span class="comment">// 当前执行线程是事件循环线程，那么直接同步调用，简单来说就是调用notifyListeners()方法的线程和EventExecutor是同一个线程</span></span><br><span class="line">        <span class="keyword">if</span> (executor.inEventLoop()) &#123;</span><br><span class="line">            <span class="comment">// 下面的ThreadLocal和listenerStackDepth是调用栈深度保护相关，博文会另起一个章节专门讲解这个问题，这里可以暂时忽略</span></span><br><span class="line">            <span class="keyword">final</span> InternalThreadLocalMap threadLocals = InternalThreadLocalMap.get();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> stackDepth = threadLocals.futureListenerStackDepth();</span><br><span class="line">            <span class="keyword">if</span> (stackDepth &lt; MAX_LISTENER_STACK_DEPTH) &#123;</span><br><span class="line">                threadLocals.setFutureListenerStackDepth(stackDepth + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    notifyListenersNow();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    threadLocals.setFutureListenerStackDepth(stackDepth);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前执行线程不是事件循环线程，则把notifyListenersNow()包装为Runnable实例放到EventExecutor中执行</span></span><br><span class="line">        safeExecute(executor, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                notifyListenersNow();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用EventExecutor进行任务执行，execute()方法抛出的异常会使用rejectedExecutionLogger句柄打印</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">safeExecute</span><span class="params">(EventExecutor executor, Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            rejectedExecutionLogger.error(<span class="string">"Failed to submit a listener notification task. Event loop shut down?"</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 马上通知所有监听器进行回调</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyListenersNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object listeners;</span><br><span class="line">        <span class="comment">// 这里加锁，在锁的保护下设置notifyingListeners的值，如果多个线程调用同一个Promise实例的notifyListenersNow()方法</span></span><br><span class="line">        <span class="comment">// 命中notifyingListeners的线程可以直接返回</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// Only proceed if there are listeners to notify and we are not already notifying listeners.</span></span><br><span class="line">            <span class="keyword">if</span> (notifyingListeners || <span class="keyword">this</span>.listeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            notifyingListeners = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 临时变量listeners存放瞬时的监听器实例，方便下一步设置Promise实例的listeners为null</span></span><br><span class="line">            listeners = <span class="keyword">this</span>.listeners;</span><br><span class="line">            <span class="comment">// 重置当前Promise实例的listeners为null</span></span><br><span class="line">            <span class="keyword">this</span>.listeners = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (listeners <span class="keyword">instanceof</span> DefaultFutureListeners) &#123;</span><br><span class="line">                <span class="comment">// 多个监听器情况下的通知</span></span><br><span class="line">                notifyListeners0((DefaultFutureListeners) listeners);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 单个监听器情况下的通知</span></span><br><span class="line">                notifyListener0(<span class="keyword">this</span>, (GenericFutureListener&lt;?&gt;) listeners);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.listeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 这里因为没有异常抛出的可能，不用在finally块中编写，重置notifyingListeners为false并且返回跳出循环</span></span><br><span class="line">                    notifyingListeners = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                  <span class="comment">// 临时变量listeners存放瞬时的监听器实例，回调操作判断是基于临时实例去做 - 这里可能由另一个线程更新了listeners的值</span></span><br><span class="line">                listeners = <span class="keyword">this</span>.listeners;</span><br><span class="line">                <span class="comment">// 重置当前Promise实例的listeners为null，确保监听器只会被回调一次，下一次跳出for死循环</span></span><br><span class="line">                <span class="keyword">this</span>.listeners = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 遍历DefaultFutureListeners中的listeners数组，调用静态方法notifyListener0()</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyListeners0</span><span class="params">(DefaultFutureListeners listeners)</span> </span>&#123;</span><br><span class="line">        GenericFutureListener&lt;?&gt;[] a = listeners.listeners();</span><br><span class="line">        <span class="keyword">int</span> size = listeners.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i ++) &#123;</span><br><span class="line">            notifyListener0(<span class="keyword">this</span>, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个静态方法是最终监听器回调的方法,也就是简单调用GenericFutureListener#operationComplete()传入的是当前的Promise实例，捕获一切异常打印warn日志</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notifyListener0</span><span class="params">(Future future, GenericFutureListener l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            l.operationComplete(future);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"An exception was thrown by "</span> + l.getClass().getName() + <span class="string">".operationComplete()"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看<code>wait()</code>和<code>sync()</code>方法体系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPromise</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Promise</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果Promise执行完毕，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (isDone()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果当前线程中断则直接抛出InterruptedException</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException(toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 死锁检测</span></span><br><span class="line">        checkDeadLock();</span><br><span class="line">        <span class="comment">// 加锁，加锁对象是当前Promise实例</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里设置一个死循环，终止条件是isDone()为true</span></span><br><span class="line">            <span class="keyword">while</span> (!isDone()) &#123;</span><br><span class="line">                <span class="comment">// 等待线程数加1</span></span><br><span class="line">                incWaiters();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 这里调用的是Object#wait()方法进行阻塞，如果线程被中断会抛出InterruptedException</span></span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 解除阻塞后等待线程数减1</span></span><br><span class="line">                    decWaiters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">awaitUninterruptibly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果Promise执行完毕，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (isDone()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 死锁检测</span></span><br><span class="line">        checkDeadLock();</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 加锁，加锁对象是当前Promise实例</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里设置一个死循环，终止条件是isDone()为true</span></span><br><span class="line">            <span class="keyword">while</span> (!isDone()) &#123;</span><br><span class="line">                 <span class="comment">// 等待线程数加1</span></span><br><span class="line">                incWaiters();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 这里调用的是Object#wait()方法进行阻塞，捕获了InterruptedException异常，如果抛出InterruptedException记录线程的中断状态到interrupted</span></span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// Interrupted while waiting.</span></span><br><span class="line">                    interrupted = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 解除阻塞后等待线程数减1</span></span><br><span class="line">                    decWaiters();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果线程被中断跳出等待阻塞，则清除线程的中断标志位</span></span><br><span class="line">        <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面的几个带超时时限的wait()方法都是调用await0()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> await0(unit.toNanos(timeout), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeoutMillis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> await0(MILLISECONDS.toNanos(timeoutMillis), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitUninterruptibly</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> await0(unit.toNanos(timeout), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// Should not be raised at all.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitUninterruptibly</span><span class="params">(<span class="keyword">long</span> timeoutMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> await0(MILLISECONDS.toNanos(timeoutMillis), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// Should not be raised at all.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查死锁，这里判断了等待线程是事件循环线程则直接抛出BlockingOperationException异常</span></span><br><span class="line">    <span class="comment">// 简单来说就是：Promise的执行线程和等待结果的线程，不能是同一个线程，否则依赖会成环</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkDeadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventExecutor e = executor();</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.inEventLoop()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlockingOperationException(toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 同步永久阻塞等待</span></span><br><span class="line">        await();</span><br><span class="line">        <span class="comment">// 阻塞等待解除，如果执行存在异常，则直接抛出</span></span><br><span class="line">        rethrowIfFailed();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">syncUninterruptibly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同步永久阻塞等待 - 响应中断</span></span><br><span class="line">        awaitUninterruptibly();</span><br><span class="line">        <span class="comment">// 塞等待解除，如果执行存在异常，则直接抛出</span></span><br><span class="line">        rethrowIfFailed();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// waiters加1，如果超过Short.MAX_VALUE则抛出IllegalStateException</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">incWaiters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (waiters == Short.MAX_VALUE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"too many waiters: "</span> + <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ++waiters;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// waiters减1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decWaiters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        --waiters;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause不为null则抛出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rethrowIfFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Throwable cause = cause();</span><br><span class="line">        <span class="keyword">if</span> (cause == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PlatformDependent.throwException(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">await0</span><span class="params">(<span class="keyword">long</span> timeoutNanos, <span class="keyword">boolean</span> interruptable)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果Promise执行完毕，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (isDone()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果超时时限小于0那么返回isDone()的结果</span></span><br><span class="line">        <span class="keyword">if</span> (timeoutNanos &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> isDone();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果允许中断，当前线程的中断标志位为true，则抛出InterruptedException</span></span><br><span class="line">        <span class="keyword">if</span> (interruptable &amp;&amp; Thread.interrupted()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException(toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 死锁检测</span></span><br><span class="line">        checkDeadLock();</span><br><span class="line">        <span class="comment">// 记录当前的纳秒时间戳</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        <span class="comment">// 等待时间的长度 - 单位为纳秒</span></span><br><span class="line">        <span class="keyword">long</span> waitTime = timeoutNanos;</span><br><span class="line">        <span class="comment">// 记录线程是否被中断</span></span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 死循环</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果Promise执行完毕，直接返回true - 这一步是先验判断，命中了就不需要阻塞等待</span></span><br><span class="line">                    <span class="keyword">if</span> (isDone()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 等待线程数加1</span></span><br><span class="line">                    incWaiters();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 这里调用的是带超时时限的Object#wait()方法进行阻塞</span></span><br><span class="line">                        wait(waitTime / <span class="number">1000000</span>, (<span class="keyword">int</span>) (waitTime % <span class="number">1000000</span>));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// 线程被中断并且外部允许中断，那么直接抛出InterruptedException</span></span><br><span class="line">                        <span class="keyword">if</span> (interruptable) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> e;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 否则只记录中断过的状态</span></span><br><span class="line">                            interrupted = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">// 解除阻塞后等待线程数减1</span></span><br><span class="line">                        decWaiters();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解除阻塞后，如果Promise执行完毕，直接返回true</span></span><br><span class="line">                <span class="keyword">if</span> (isDone()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 步入这里说明Promise尚未执行完毕，则重新计算等待时间间隔的长度数量（修正），如果大于0则进入下一轮循环</span></span><br><span class="line">                    waitTime = timeoutNanos - (System.nanoTime() - startTime);</span><br><span class="line">                    <span class="keyword">if</span> (waitTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> isDone();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 如果线程被中断跳出等待阻塞，则清除线程的中断标志位</span></span><br><span class="line">            <span class="keyword">if</span> (interrupted) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是几个设置结果和获取结果的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPromise</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Promise</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">setSuccess</span><span class="params">(V result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置成功结果，如果设置成功则返回当前Promise实例</span></span><br><span class="line">        <span class="keyword">if</span> (setSuccess0(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置失败说明了多次设置，Promise已经执行完毕，则抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"complete already: "</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">trySuccess</span><span class="params">(V result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置成功结果，返回的布尔值表示成功或失败</span></span><br><span class="line">        <span class="keyword">return</span> setSuccess0(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Promise&lt;V&gt; <span class="title">setFailure</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置失败结果，如果设置成功则返回当前Promise实例</span></span><br><span class="line">        <span class="keyword">if</span> (setFailure0(cause)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置失败说明了多次设置，Promise已经执行完毕，则抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"complete already: "</span> + <span class="keyword">this</span>, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryFailure</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置失败结果，返回的布尔值表示成功或失败</span></span><br><span class="line">        <span class="keyword">return</span> setFailure0(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 非阻塞获取结果，如果result是CauseHolder类型、SUCCESS属性实例或者UNCANCELLABLE实行实例则返回null，否则返回转换类型后的result值</span></span><br><span class="line">        <span class="comment">// 对异常无感知，如果CauseHolder包裹了异常，此方法依然返回null</span></span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> CauseHolder || result == SUCCESS || result == UNCANCELLABLE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (V) result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">// 永久阻塞获取结果</span></span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="comment">// 如果Promise未执行完毕则进行永久阻塞等待</span></span><br><span class="line">        <span class="keyword">if</span> (!isDone0(result)) &#123;</span><br><span class="line">            await();</span><br><span class="line">            <span class="comment">// 更新结果临时变量</span></span><br><span class="line">            result = <span class="keyword">this</span>.result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// result为SUCCESS属性实例或者UNCANCELLABLE属性实例的时候直接返回null</span></span><br><span class="line">        <span class="keyword">if</span> (result == SUCCESS || result == UNCANCELLABLE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果result为CauseHolder类型，则获取其中持有的cause属性，也有可能为null</span></span><br><span class="line">        Throwable cause = cause0(result);</span><br><span class="line">        <span class="keyword">if</span> (cause == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 执行成功的前提下转换类型后的result值返回</span></span><br><span class="line">            <span class="keyword">return</span> (V) result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取消的情况，抛出CancellationException</span></span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> CancellationException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (CancellationException) cause;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 剩余的情况一律封装为ExecutionException异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 带超时时限的阻塞获取结果</span></span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="comment">// 如果Promise未执行完毕则进行带超时时限的阻塞等待</span></span><br><span class="line">        <span class="keyword">if</span> (!isDone0(result)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!await(timeout, unit)) &#123;</span><br><span class="line">                <span class="comment">// 等待超时直接抛出TimeoutException</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新结果临时变量</span></span><br><span class="line">            result = <span class="keyword">this</span>.result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// result为SUCCESS属性实例或者UNCANCELLABLE属性实例的时候直接返回null</span></span><br><span class="line">        <span class="keyword">if</span> (result == SUCCESS || result == UNCANCELLABLE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果result为CauseHolder类型，则获取其中持有的cause属性，也有可能为null</span></span><br><span class="line">        Throwable cause = cause0(result);</span><br><span class="line">        <span class="keyword">if</span> (cause == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 执行成功的前提下转换类型后的result值返回</span></span><br><span class="line">            <span class="keyword">return</span> (V) result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取消的情况，抛出CancellationException</span></span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> CancellationException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (CancellationException) cause;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 剩余的情况一律封装为ExecutionException异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// CAS更新result为CANCELLATION_CAUSE_HOLDER，result的期望值必须为null</span></span><br><span class="line">        <span class="keyword">if</span> (RESULT_UPDATER.compareAndSet(<span class="keyword">this</span>, <span class="keyword">null</span>, CANCELLATION_CAUSE_HOLDER)) &#123;</span><br><span class="line">            <span class="comment">// 判断是否需要进行等待线程的通知</span></span><br><span class="line">            <span class="keyword">if</span> (checkNotifyWaiters()) &#123;</span><br><span class="line">                <span class="comment">// 通知监听器进行回调</span></span><br><span class="line">                notifyListeners();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setSuccess0</span><span class="params">(V result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置执行成功的结果，如果入参result为null，则选用SUCCESS属性，否则使用result</span></span><br><span class="line">        <span class="keyword">return</span> setValue0(result == <span class="keyword">null</span> ? SUCCESS : result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setFailure0</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置执行失败的结果，入参是Throwable类型，封装为CauseHolder，存放在CauseHolder实例的cause属性</span></span><br><span class="line">        <span class="keyword">return</span> setValue0(<span class="keyword">new</span> CauseHolder(checkNotNull(cause, <span class="string">"cause"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setValue0</span><span class="params">(Object objResult)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// CAS更新result为入参objResult，result的期望值必须为null或者UNCANCELLABLE才能更新成功</span></span><br><span class="line">        <span class="keyword">if</span> (RESULT_UPDATER.compareAndSet(<span class="keyword">this</span>, <span class="keyword">null</span>, objResult) || RESULT_UPDATER.compareAndSet(<span class="keyword">this</span>, UNCANCELLABLE, objResult)) &#123;</span><br><span class="line">            <span class="comment">// 判断是否需要进行等待线程的通知</span></span><br><span class="line">            <span class="keyword">if</span> (checkNotifyWaiters()) &#123;</span><br><span class="line">                <span class="comment">// 通知监听器进行回调</span></span><br><span class="line">                notifyListeners();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否需要进行等待线程的通知 - 其实是判断是否需要通知监听器回调</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">checkNotifyWaiters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果等待线程数量大于0则调用Object#notifyAll()唤醒所有等待线程</span></span><br><span class="line">        <span class="keyword">if</span> (waiters &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果listeners不为空（也就是存在监听器）的时候才返回true</span></span><br><span class="line">        <span class="keyword">return</span> listeners != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise的基本使用">Promise的基本使用</h2><p>要使用<code>Netty</code>的<code>Promise</code>模块，并不需要引入<code>Netty</code>的所有依赖，这里只需要引入<code>netty-common</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.44.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>EventExecutor</code>选取方面，<code>Netty</code>已经准备了一个<code>GlobalEventExecutor</code>用于全局事件处理，这里可以直接选用（当然也可以自行实现<code>EventExecutor</code>或者用<code>EventExecutor</code>的其他实现类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EventExecutor executor = GlobalEventExecutor.INSTANCE;</span><br><span class="line">Promise&lt;String&gt; promise = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br></pre></td></tr></table></figure><p>这里设计一个场景：异步下载一个链接的资源到磁盘上，下载完成之后需要异步通知下载完的磁盘文件路径，得到通知之后打印下载结果到控制台中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromiseMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">"http://xxx.yyy.zzz"</span>;</span><br><span class="line">        EventExecutor executor = GlobalEventExecutor.INSTANCE;</span><br><span class="line">        Promise&lt;DownloadResult&gt; promise = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        promise.addListener(<span class="keyword">new</span> DownloadResultListener());</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"开始下载资源,url:"</span> + url);</span><br><span class="line">                <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">                <span class="comment">// 模拟下载耗时</span></span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                String location = <span class="string">"C:\\xxx\\yyy\\z.md"</span>;</span><br><span class="line">                <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">                System.out.println(String.format(<span class="string">"下载资源成功,url:%s,保存到:%s,耗时:%d ms"</span>, url, location, cost));</span><br><span class="line">                DownloadResult result = <span class="keyword">new</span> DownloadResult();</span><br><span class="line">                result.setUrl(url);</span><br><span class="line">                result.setFileDiskLocation(location);</span><br><span class="line">                result.setCost(cost);</span><br><span class="line">                <span class="comment">// 通知结果</span></span><br><span class="line">                promise.setSuccess(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"Download-Thread"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String fileDiskLocation;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadResultListener</span> <span class="keyword">implements</span> <span class="title">GenericFutureListener</span>&lt;<span class="title">Future</span>&lt;<span class="title">DownloadResult</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;DownloadResult&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                DownloadResult downloadResult = future.getNow();</span><br><span class="line">                System.out.println(String.format(<span class="string">"下载完成通知,url:%s,文件磁盘路径:%s,耗时:%d ms"</span>, downloadResult.getUrl(),</span><br><span class="line">                        downloadResult.getFileDiskLocation(), downloadResult.getCost()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始下载资源,url:http://xxx.yyy.zzz</span><br><span class="line">下载资源成功,url:http://xxx.yyy.zzz,保存到:C:\xxx\yyy\z.md,耗时:2000 ms</span><br><span class="line">下载完成通知,url:http://xxx.yyy.zzz,文件磁盘路径:C:\xxx\yyy\z.md,耗时:2000 ms</span><br></pre></td></tr></table></figure><p><code>Promise</code>适用的场景很多，除了异步通知的场景也能用于同步调用，它在设计上比<code>JUC</code>的<code>Future</code>灵活很多，基于<code>Future</code>扩展出很多新的特性，有需要的可以单独引入此依赖直接使用。</p><h2 id="Promise监听器栈深度的问题">Promise监听器栈深度的问题</h2><p>有些时候，由于封装或者人为编码异常等原因，监听器的回调可能出现基于多个<code>Promise</code>形成的链（参考<a href="https://github.com/netty/netty/pull/5302" target="_blank" rel="noopener">Issue-5302</a>，<code>a promise listener chain</code>），这样子有可能出现递归调用深度过大而导致栈溢出，因此需要设置一个阈值，限制递归调用的最大栈深度，这个深度阈值暂且称为栈深度保护阈值，默认值是8，可以通过系统参数<code>io.netty.defaultPromise.maxListenerStackDepth</code>覆盖设置。这里贴出前面提到过的代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventExecutor executor = executor();</span><br><span class="line">    <span class="comment">// 事件执行器必须是事件循环类型，也就是executor.inEventLoop()为true的时候才启用递归栈深度保护</span></span><br><span class="line">    <span class="keyword">if</span> (executor.inEventLoop()) &#123;</span><br><span class="line">        <span class="comment">// 获取当前线程绑定的InternalThreadLocalMap实例，这里类似于ThreadLocal</span></span><br><span class="line">        <span class="keyword">final</span> InternalThreadLocalMap threadLocals = InternalThreadLocalMap.get();</span><br><span class="line">        <span class="comment">// 获取当前线程的监听器调用栈深度</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> stackDepth = threadLocals.futureListenerStackDepth();</span><br><span class="line">        <span class="comment">// 监听器调用栈深度如果不超过阈值MAX_LISTENER_STACK_DEPTH</span></span><br><span class="line">        <span class="keyword">if</span> (stackDepth &lt; MAX_LISTENER_STACK_DEPTH) &#123;</span><br><span class="line">            <span class="comment">// 调用notifyListenersNow()前先设置监听器调用栈深度 + 1</span></span><br><span class="line">            threadLocals.setFutureListenerStackDepth(stackDepth + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                notifyListenersNow();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 调用notifyListenersNow()完毕后设置监听器调用栈深度为调用前的数值，也就是恢复线程的监听器调用栈深度</span></span><br><span class="line">                threadLocals.setFutureListenerStackDepth(stackDepth);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果监听器调用栈深度超过阈值MAX_LISTENER_STACK_DEPTH，则直接每次通知监听器当成一个新的异步任务处理</span></span><br><span class="line">    safeExecute(executor, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            notifyListenersNow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想模拟一个例子触发<strong>监听器调用栈深度保护</strong>，那么只需要想办法在同一个<code>EventLoop</code>类型的线程中递归调用<code>notifyListeners()</code>方法即可。</p><p>最典型的例子就是在上一个<code>Promise</code>监听器回调的方法里面触发下一个<code>Promise</code>的监听器的<code>setSuccess()</code>（简单理解就是<strong>套娃</strong>），画个图理解一下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/n-c-u-p-2.png" alt=""></p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromiseListenerMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger COUNTER = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventExecutor executor = ImmediateEventExecutor.INSTANCE;</span><br><span class="line">        <span class="comment">// root</span></span><br><span class="line">        Promise&lt;String&gt; root = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p1 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p2 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p3 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p4 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p5 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p6 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p7 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p8 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p9 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        Promise&lt;String&gt; p10 = <span class="keyword">new</span> DefaultPromise&lt;&gt;(executor);</span><br><span class="line">        p1.addListener(<span class="keyword">new</span> Listener(p2));</span><br><span class="line">        p2.addListener(<span class="keyword">new</span> Listener(p3));</span><br><span class="line">        p3.addListener(<span class="keyword">new</span> Listener(p4));</span><br><span class="line">        p4.addListener(<span class="keyword">new</span> Listener(p5));</span><br><span class="line">        p5.addListener(<span class="keyword">new</span> Listener(p6));</span><br><span class="line">        p6.addListener(<span class="keyword">new</span> Listener(p7));</span><br><span class="line">        p7.addListener(<span class="keyword">new</span> Listener(p8));</span><br><span class="line">        p8.addListener(<span class="keyword">new</span> Listener(p9));</span><br><span class="line">        p9.addListener(<span class="keyword">new</span> Listener(p10));</span><br><span class="line">        root.addListener(<span class="keyword">new</span> Listener(p1));</span><br><span class="line">        root.setSuccess(<span class="string">"success"</span>);</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> <span class="keyword">implements</span> <span class="title">GenericFutureListener</span>&lt;<span class="title">Future</span>&lt;<span class="title">String</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Promise&lt;String&gt; promise;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Listener</span><span class="params">(Promise&lt;String&gt; promise)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">"listener-"</span> + COUNTER.getAndIncrement();</span><br><span class="line">            <span class="keyword">this</span>.promise = promise;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;String&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"监听器[%s]回调成功..."</span>, name));</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != promise) &#123;</span><br><span class="line">                promise.setSuccess(<span class="string">"success"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为有<code>safeExecute()</code>兜底执行，上面的所有<code>Promise</code>都会回调，这里可以采用<code>IDEA</code>的高级断点功能，在步入断点的地方添加额外的日志，输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">9</span>]回调成功...</span><br><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">0</span>]回调成功...</span><br><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">1</span>]回调成功...</span><br><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">2</span>]回调成功...</span><br><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">3</span>]回调成功...</span><br><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">4</span>]回调成功...</span><br><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">5</span>]回调成功...</span><br><span class="line">MAX_LISTENER_STACK_DEPTH(notifyListenersNow)执行---</span><br><span class="line">监听器[listener-<span class="number">6</span>]回调成功...</span><br><span class="line">safeExecute(notifyListenersNow)执行----------</span><br><span class="line">监听器[listener-<span class="number">7</span>]回调成功...</span><br><span class="line">safeExecute(notifyListenersNow)执行----------</span><br><span class="line">监听器[listener-<span class="number">8</span>]回调成功...</span><br></pre></td></tr></table></figure><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/n-c-u-p-3.png" alt=""></p><p>这里笔者有点疑惑，如果调用栈深度大于8，超出的部分会包装为<code>Runnable</code>实例提交到事件执行器执行，岂不是把递归栈溢出的隐患变成了内存溢出的隐患（因为异步任务也有可能积压，除非拒绝任务提交，那么具体要看<code>EventExecutor</code>的实现了）？</p><h2 id="小结">小结</h2><p><code>Netty</code>提供的<code>Promise</code>工具的源码和使用方式都分析完了，设计理念和代码都是十分值得借鉴，同时能够开箱即用，可以在日常编码中直接引入，减少重复造轮子的劳动和风险。</p><p>（本文完 e-a-20200123 c-3-d）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近一直在看&lt;code&gt;Netty&lt;/code&gt;相关的内容，也在编写一个轻量级的&lt;code&gt;RPC&lt;/code&gt;框架来练手，途中发现了&lt;code&gt;Netty&lt;/code&gt;的源码有很多亮点，某些实现甚至可以用&lt;strong&gt;苛刻&lt;/strong&gt;来形容。另外，&lt;code&gt;Netty&lt;/code&gt;提供的工具类也是相当优秀，可以开箱即用。这里分析一下个人比较喜欢的领域，并发方面的一个&lt;code&gt;Netty&lt;/code&gt;工具模块 - &lt;code&gt;Promise&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/n-c-u-p-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;环境版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Netty:4.1.44.Final&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK1.8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Netty" scheme="http://throwable.club/blog/categories/Netty/"/>
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Netty/Java/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Netty" scheme="http://throwable.club/blog/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>线程上下文类加载器ContextClassLoader内存泄漏隐患</title>
    <link href="http://throwable.club/2020/01/19/java-thread-context-class-loader-memory-leak-risk/"/>
    <id>http://throwable.club/2020/01/19/java-thread-context-class-loader-memory-leak-risk/</id>
    <published>2020-01-19T15:07:48.000Z</published>
    <updated>2020-01-20T00:32:17.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>今天（<code>2020-01-18</code>）在编写<code>Netty</code>相关代码的时候，从<code>Netty</code>源码中的<code>ThreadDeathWatcher</code>和<code>GlobalEventExecutor</code>追溯到两个和线程上下文类加载器<code>ContextClassLoader</code>内存泄漏相关的<code>Issue</code>：</p><ul><li><a href="https://github.com/netty/netty/issues/7290" target="_blank" rel="noopener">ThreadDeathWatcher causes custom classLoader script memory leaks</a></li><li><a href="https://github.com/netty/netty/pull/7493" target="_blank" rel="noopener">Ensure ThreadDeathWatcher and GlobalEventExecutor will not cause clas…</a></li></ul><p>两个<code>Issue</code>分别是两位前辈在<code>2017-12</code>的时候提出的，描述的是同一类问题，最后被<code>Netty</code>的负责人采纳，并且修复了对应的问题从而关闭了<code>Issue</code>。这里基于这两个<code>Issue</code>描述的内容，对<code>ContextClassLoader</code>内存泄漏隐患做一次复盘。</p><a id="more"></a><h2 id="ClassLoader相关的内容">ClassLoader相关的内容</h2><ul><li>一个<code>JVM</code>实例（<code>Java</code>应用程序）里面的所有类都是通过<code>ClassLoader</code>加载的。</li><li>不同的<code>ClassLoader</code>在<code>JVM</code>中有不同的命名空间，一个类实例（<code>Class</code>）的唯一标识是全类名 + <code>ClassLoader</code>，也就是不同的<code>ClassLoader</code>加载同一个类文件，也会得到不相同的<code>Class</code>实例。</li><li><code>JVM</code>不提供类卸载的功能，从目前参考到的资料来看，类卸载需要满足下面几点：<ul><li>条件一：<code>Class</code>的所有实例不被强引用（不可达）。</li><li>条件二：<code>Class</code>本身不被强引用（不可达）。</li><li><font color=red>条件三</font>：加载该<code>Class</code>的<code>ClassLoader</code>实例不被强引用（不可达）。</li></ul></li></ul><p>有些场景下需要实现类的热部署和卸载，例如定义一个接口，然后由外部动态传入代码的实现。</p><blockquote><p>这一点很常见，最典型的就是在线编程，代码传到服务端再进行编译和运行。</p></blockquote><p>由于应用启动期所有非<code>JDK</code>类库的类都是由<code>AppClassLoader</code>加载，我们没有办法通过<code>AppClassLoader</code>去加载非类路径下的已存在同名的类文件（对于一个<code>ClassLoader</code>而言，每个类文件只能加载一次，生成唯一的<code>Class</code>），所以为了动态加载类，每次必须使用完全不同的自定义<code>ClassLoader</code>实例加载同一个类文件或者使用同一个自定义的<code>ClassLoader</code>实例加载不同的类文件。类的热部署这里举个简单例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此文件在项目类路径</span></span><br><span class="line"><span class="keyword">package</span> club.throwable.loader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHelloService</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"default say hello!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两个文件编译后放在I盘根目录</span></span><br><span class="line"><span class="comment">// I:\\DefaultHelloService1.class</span></span><br><span class="line"><span class="keyword">package</span> club.throwable.loader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHelloService1</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1 say hello!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// I:\\DefaultHelloService2.class</span></span><br><span class="line"><span class="keyword">package</span> club.throwable.loader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHelloService2</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"2 say hello!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口和运行方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> DefaultHelloService();</span><br><span class="line">        System.out.println(helloService.sayHello());</span><br><span class="line">        ClassLoader loader = <span class="keyword">new</span> ClassLoader() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                String location = <span class="string">"I:\\DefaultHelloService1.class"</span>;</span><br><span class="line">                <span class="keyword">if</span> (name.contains(<span class="string">"DefaultHelloService2"</span>)) &#123;</span><br><span class="line">                    location = <span class="string">"I:\\DefaultHelloService2.class"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                File classFile = <span class="keyword">new</span> File(location);</span><br><span class="line">                ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    InputStream stream = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                    <span class="keyword">int</span> b;</span><br><span class="line">                    <span class="keyword">while</span> ((b = stream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        outputStream.write(b);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = outputStream.toByteArray();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Class&lt;?&gt; klass = loader.loadClass(<span class="string">"club.throwable.loader.DefaultHelloService1"</span>);</span><br><span class="line">        helloService = (HelloService) klass.newInstance();</span><br><span class="line">        System.out.println(helloService.sayHello());</span><br><span class="line">        klass = loader.loadClass(<span class="string">"club.throwable.loader.DefaultHelloService2"</span>);</span><br><span class="line">        helloService = (HelloService) klass.newInstance();</span><br><span class="line">        System.out.println(helloService.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="keyword">default</span> say hello!</span><br><span class="line"><span class="number">1</span> say hello!</span><br><span class="line"><span class="number">2</span> say hello!</span><br></pre></td></tr></table></figure><p>如果新建过多的<code>ClassLoader</code>实例和<code>Class</code>实例，会占用大量的内存，如果由于上面几个条件无法全部满足，也就是这些<code>ClassLoader</code>实例和<code>Class</code>实例一直堆积无法卸载，那么就会导致内存泄漏（<code>memory leak</code>，后果很严重，有可能耗尽服务器的物理内存，因为<code>JDK1.8+</code>类相关元信息存在在元空间<code>metaspace</code>，而元空间使用的是<code>native memory</code>）。</p><h2 id="线程中的ContextClassLoader">线程中的ContextClassLoader</h2><p><code>ContextClassLoader</code>其实指的是线程类<code>java.lang.Thread</code>中的<code>contextClassLoader</code>属性，它是<code>ClassLoader</code>类型，也就是类加载器实例。有些场景下，<code>JDK</code>提供了一些标准接口需要第三方提供商去实现（最常见的就是<code>SPI</code>，<code>Service Provider Interface</code>，例如<code>java.sql.Driver</code>），这些标准接口类是由启动类加载器(<code>Bootstrap ClassLoader</code>)加载，但是这些接口的实现类需要从外部引入，本身不属于<code>JDK</code>的原生类库，无法用启动类加载器加载。为了解决此困境，引入了线程上下文类加载器<code>Thread Context ClassLoader</code>。线程<code>java.lang.Thread</code>实例在初始化的时候会调用<code>Thread#init()</code>方法，<code>Thread</code>类和<code>contextClassLoader</code>相关的核心代码块如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程实例的初始化方法,new Thread()的时候一定会调用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">long</span> stackSize, AccessControlContext acc,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    Thread parent = currentThread();</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    <span class="keyword">if</span> (security == <span class="keyword">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContextClassLoader</span><span class="params">(ClassLoader cl)</span> </span>&#123;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sm.checkPermission(<span class="keyword">new</span> RuntimePermission(<span class="string">"setContextClassLoader"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    contextClassLoader = cl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getContextClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (contextClassLoader == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ClassLoader.checkClassLoaderPermission(contextClassLoader, Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> contextClassLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先明确两点：</p><ul><li><code>Thread</code>实例允许手动设置<code>contextClassLoader</code>属性，覆盖当前的线程上下文类加载器实例。</li><li><code>Thread</code>在初始化实例（调用<code>new Thread()</code>）的时候一定会调用<code>Thread#init()</code>方法，新建的子线程实例会继承父线程的<code>contextClassLoader</code>属性，而应用主线程<code>[main]</code>的<code>contextClassLoader</code>一般是应用类加载器（<code>Application ClassLoader</code>，有时也称为系统类加载器），其他用户线程都是主线程派生出来的后代线程，如果不覆盖<code>contextClassLoader</code>，那么新建的后代线程的<code>contextClassLoader</code>就是应用类加载器。</li></ul><p>分析到这里，笔者只想说明一个结论：后代线程的线程上下文类加载器会继承父线程的线程上下文类加载器，其实这里用继承这个词语也不是太准确，准确来说应该是<strong>后代线程的线程上下文类加载器和父线程的上下文类加载器完全相同，如果都派生自主线程，那么都是应用类加载器</strong>。对于这个结论可以验证一下（下面例子在<code>JDK8</code>中运行）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadContextClassLoaderMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AtomicReference&lt;Thread&gt; grandSonThreadReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">        Thread sonThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(()-&gt; &#123;&#125;,<span class="string">"grand-son-thread"</span>);</span><br><span class="line">            grandSonThreadReference.set(thread);</span><br><span class="line">        &#125;, <span class="string">"son-thread"</span>);</span><br><span class="line">        sonThread.start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        Thread main = Thread.currentThread();</span><br><span class="line">        Thread grandSonThread = grandSonThreadReference.get();</span><br><span class="line">        System.out.println(String.format(<span class="string">"ContextClassLoader of [main]:%s"</span>, main.getContextClassLoader()));</span><br><span class="line">        System.out.println(String.format(<span class="string">"ContextClassLoader of [%s]:%s"</span>,sonThread.getName(), sonThread.getContextClassLoader()));</span><br><span class="line">        System.out.println(String.format(<span class="string">"ContextClassLoader of [%s]:%s"</span>, grandSonThread.getName(), grandSonThread.getContextClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ContextClassLoader of [main]:sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">ContextClassLoader of [son-thread]:sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">ContextClassLoader of [grand-son-thread]:sun.misc.Launcher$AppClassLoader@18b4aac2</span><br></pre></td></tr></table></figure><p>印证了前面的结论，主线程、子线程、孙子线程的线程上下文类加载器都是<code>AppClassLoader</code>类型，并且指向同一个实例<code>sun.misc.Launcher$AppClassLoader@18b4aac2</code>。</p><h2 id="ContextClassLoader设置不当导致内存泄漏的隐患">ContextClassLoader设置不当导致内存泄漏的隐患</h2><p>只要有大量热加载和卸载动态类的场景，就需要警惕后代线程<code>ContextClassLoader</code>设置不当导致内存泄漏。画个图就能比较清楚：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/j-c-t-c-1.png" alt=""></p><p>父线程中设置了一个自定义类加载器，用于加载动态类，<strong>子线程新建的时候直接使用了父线程的自定义类加载器，导致该自定义类加载器一直被子线程强引用</strong>，结合前面的类卸载条件分析，所有由该自定义类加载器加载出来的动态类都不能被卸载，导致了内存泄漏。这里还是基于文章前面的那个例子做改造：</p><ul><li>新增一个线程<code>X</code>用于进行类加载，新建一个自定义类加载器，设置线程<code>X</code>的上下文类加载器为该自定义类加载器。</li><li>线程<code>X</code>运行方法中创建一个新线程<code>Y</code>，用于接收类加载成功的事件并且进行打印。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    BlockingQueue&lt;String&gt; CLASSES = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    BlockingQueue&lt;String&gt; EVENTS = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    AtomicBoolean START = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            ClassLoader loader = <span class="keyword">new</span> ClassLoader() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                    String location = <span class="string">"I:\\DefaultHelloService1.class"</span>;</span><br><span class="line">                    <span class="keyword">if</span> (name.contains(<span class="string">"DefaultHelloService2"</span>)) &#123;</span><br><span class="line">                        location = <span class="string">"I:\\DefaultHelloService2.class"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    File classFile = <span class="keyword">new</span> File(location);</span><br><span class="line">                    ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        InputStream stream = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                        <span class="keyword">int</span> b;</span><br><span class="line">                        <span class="keyword">while</span> ((b = stream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            outputStream.write(b);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = outputStream.toByteArray();</span><br><span class="line">                    Class&lt;?&gt; defineClass = <span class="keyword">super</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        EVENTS.put(String.format(<span class="string">"加载类成功,类名:%s"</span>, defineClass.getName()));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> defineClass;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Thread x = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (START.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                        Thread y = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                                    String event = EVENTS.take();</span><br><span class="line">                                    System.out.println(<span class="string">"接收到事件,事件内容:"</span> + event);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, <span class="string">"Y"</span>);</span><br><span class="line">                        y.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">                        y.start();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                        String take = CLASSES.take();</span><br><span class="line">                        Class&lt;?&gt; klass = loader.loadClass(take);</span><br><span class="line">                        HelloService helloService = (HelloService) klass.newInstance();</span><br><span class="line">                        System.out.println(helloService.sayHello());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">"X"</span>);</span><br><span class="line">            x.setContextClassLoader(loader);</span><br><span class="line">            x.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            x.start();</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        CLASSES.put(<span class="string">"club.throwable.loader.DefaultHelloService1"</span>);</span><br><span class="line">        CLASSES.put(<span class="string">"club.throwable.loader.DefaultHelloService2"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接收到事件,事件内容:加载类成功,类名:club.throwable.loader.DefaultHelloService1</span><br><span class="line">1 say hello!</span><br><span class="line">接收到事件,事件内容:加载类成功,类名:club.throwable.loader.DefaultHelloService2</span><br><span class="line">2 say hello!</span><br></pre></td></tr></table></figure><p>打开<code>VisualVM</code>，<code>Dump</code>对应进程的内存快照，多执行几次<code>GC</code>，发现了所有动态类都没有被卸载（这里除非主动终止线程<code>Y</code>释放自定义<code>ClassLoader</code>，否则永远都不可能释放该强引用），验证了前面的结论。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/j-c-t-c-2.png" alt=""></p><p>当然，这里只是加载了两个动态类，如果在特殊场景之下，例如在线编码和运行代码，那么有可能极度频繁动态编译和动态类加载，如果出现了上面类似的内存泄漏，那么很容易导致服务器内存耗尽。</p><h2 id="解决方案">解决方案</h2><p>参考那两个<code>Issue</code>，解决方案（或者说预防手段）基本上有两个：</p><ol><li>不需要使用自定义类加载器的线程（如事件派发线程等）优先初始化，那么一般它的线程上下文类加载器是应用类加载器。</li><li>新建后代线程的时候，手动覆盖它的线程上下文类加载器，参考<code>Netty</code>的做法，在线程初始化的时候做如下的操作：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadDeathWatcher || GlobalEventExecutor</span></span><br><span class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        watcherThread.setContextClassLoader(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p>这篇文章算是近期研究得比较深入的一篇文章，<code>ContextClassLoader</code>内存泄漏的隐患归根到底是引用使用不当导致一些本来在方法栈退出之后需要释放的引用无法释放导致的。这种问题有些时候隐藏得很深，而一旦命中了同样的问题并且在并发的场景之下，那么内存泄漏的问题会恶化得十分快。这类问题归类为性能优化，而性能优化是十分大的专题，以后应该也会遇到类似的各类问题，这些经验希望能对未来产生正向的作用。</p><p>参考资料：</p><ul><li>《深入理解Java虚拟机 - 3rd》</li></ul><p>（本文完 c-2-d e-a-20200119）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;今天（&lt;code&gt;2020-01-18&lt;/code&gt;）在编写&lt;code&gt;Netty&lt;/code&gt;相关代码的时候，从&lt;code&gt;Netty&lt;/code&gt;源码中的&lt;code&gt;ThreadDeathWatcher&lt;/code&gt;和&lt;code&gt;GlobalEventExecutor&lt;/code&gt;追溯到两个和线程上下文类加载器&lt;code&gt;ContextClassLoader&lt;/code&gt;内存泄漏相关的&lt;code&gt;Issue&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/netty/netty/issues/7290&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadDeathWatcher causes custom classLoader script memory leaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/netty/netty/pull/7493&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ensure ThreadDeathWatcher and GlobalEventExecutor will not cause clas…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个&lt;code&gt;Issue&lt;/code&gt;分别是两位前辈在&lt;code&gt;2017-12&lt;/code&gt;的时候提出的，描述的是同一类问题，最后被&lt;code&gt;Netty&lt;/code&gt;的负责人采纳，并且修复了对应的问题从而关闭了&lt;code&gt;Issue&lt;/code&gt;。这里基于这两个&lt;code&gt;Issue&lt;/code&gt;描述的内容，对&lt;code&gt;ContextClassLoader&lt;/code&gt;内存泄漏隐患做一次复盘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Java/"/>
    
      <category term="Concurrency" scheme="http://throwable.club/blog/categories/Java/Concurrency/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Thread" scheme="http://throwable.club/blog/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>基于Netty和SpringBoot实现一个轻量级RPC框架-Client端请求响应同步化处理</title>
    <link href="http://throwable.club/2020/01/18/netty-custom-rpc-framework-client-sync/"/>
    <id>http://throwable.club/2020/01/18/netty-custom-rpc-framework-client-sync/</id>
    <published>2020-01-18T06:52:32.000Z</published>
    <updated>2020-01-18T06:53:02.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>前置文章：</p><ul><li><a href="http://www.throwable.club/2020/01/12/netty-custom-rpc-framework-protocol" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》</a></li><li><a href="http://www.throwable.club/2020/01/15/netty-custom-rpc-framework-server" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-Server篇》</a></li><li><a href="http://www.throwable.club/2020/01/16/netty-custom-rpc-framework-client" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-Client篇》</a></li></ul><p>前一篇文章简单介绍了通过动态代理完成了<code>Client</code>端契约接口调用转换为发送<code>RPC</code>协议请求的功能。这篇文章主要解决一个遗留的技术难题：请求-响应同步化处理。</p><p>需要的依赖如下：</p><ul><li><code>JDK1.8+</code></li><li><code>Netty:4.1.44.Final</code></li><li><code>SpringBoot:2.2.2.RELEASE</code></li></ul><a id="more"></a><h2 id="简单分析Netty请求-响应的处理流程">简单分析Netty请求-响应的处理流程</h2><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/n-s-b-r-c-r-r-1.png" alt=""></p><p>图中已经忽略了编码解码器和其他入站出站处理器，不同颜色的线程代表完全不相同的线程，不同线程之间的处理逻辑是完全异步，也就是<code>Netty IO</code>线程（<code>n-l-g-1</code>）接收到<code>Server</code>端的消息并且解析完成的时候，用户调用线程（<code>u-t-1</code>）无法感知到解析完毕的消息包，那么这里要做的事情就是让用户调用线程（<code>u-t-1</code>）获取到<code>Netty IO</code>线程（<code>n-l-g-1</code>）接收并且解析完成的消息包。</p><p>这里可以用一个简单的例子来说明模拟<code>Client</code>端调用线程等待<code>Netty IO</code>线程的处理结果再同步返回的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyThreadSyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseFuture</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> beginTimestamp = System.currentTimeMillis();</span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeoutMilliseconds;</span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String requestId;</span><br><span class="line">        <span class="meta">@Setter</span></span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> sendRequestSucceed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="meta">@Setter</span></span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Throwable cause;</span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Object response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ResponseFuture</span><span class="params">(String requestId, <span class="keyword">long</span> timeoutMilliseconds)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.requestId = requestId;</span><br><span class="line">            <span class="keyword">this</span>.timeoutMilliseconds = timeoutMilliseconds;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">timeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> System.currentTimeMillis() - beginTimestamp &gt; timeoutMilliseconds;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">waitResponse</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> timeoutMilliseconds)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            latch.await(timeoutMilliseconds, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putResponse</span><span class="params">(Object response)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.response = response;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ExecutorService REQUEST_THREAD;</span><br><span class="line">    <span class="keyword">static</span> ExecutorService NETTY_IO_THREAD;</span><br><span class="line">    <span class="keyword">static</span> Callable&lt;Object&gt; REQUEST_TASK;</span><br><span class="line">    <span class="keyword">static</span> Runnable RESPONSE_TASK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">processBusiness</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s say hello!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String <span class="comment">/* request id */</span>, ResponseFuture&gt; RESPONSE_FUTURE_TABLE = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String requestId = UUID.randomUUID().toString();</span><br><span class="line">        String requestContent = <span class="string">"throwable"</span>;</span><br><span class="line">        REQUEST_TASK = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 3秒没有得到响应认为超时</span></span><br><span class="line">                ResponseFuture responseFuture = <span class="keyword">new</span> ResponseFuture(requestId, <span class="number">3000</span>);</span><br><span class="line">                RESPONSE_FUTURE_TABLE.put(requestId, responseFuture);</span><br><span class="line">                <span class="comment">// 这里忽略发送请求的操作,只打印日志和模拟耗时1秒</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                log.info(<span class="string">"发送请求成功,请求ID:&#123;&#125;,请求内容:&#123;&#125;"</span>, requestId, requestContent);</span><br><span class="line">                <span class="comment">// 更新标记属性</span></span><br><span class="line">                responseFuture.setSendRequestSucceed(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// 剩余2秒等待时间 - 这里只是粗略计算</span></span><br><span class="line">                <span class="keyword">return</span> responseFuture.waitResponse(<span class="number">3000</span> - <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.info(<span class="string">"发送请求失败,请求ID:&#123;&#125;,请求内容:&#123;&#125;"</span>, requestId, requestContent);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        RESPONSE_TASK = () -&gt; &#123;</span><br><span class="line">            String responseContent = processBusiness(requestContent);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ResponseFuture responseFuture = RESPONSE_FUTURE_TABLE.get(requestId);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != responseFuture) &#123;</span><br><span class="line">                    log.warn(<span class="string">"处理响应成功,请求ID:&#123;&#125;,响应内容:&#123;&#125;"</span>, requestId, responseContent);</span><br><span class="line">                    responseFuture.putResponse(responseContent);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.warn(<span class="string">"请求ID[&#123;&#125;]对应的ResponseFuture不存在,忽略处理"</span>, requestId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.info(<span class="string">"处理响应失败,请求ID:&#123;&#125;,响应内容:&#123;&#125;"</span>, requestId, responseContent);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        REQUEST_THREAD = Executors.newSingleThreadExecutor(runnable -&gt; &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"REQUEST_THREAD"</span>);</span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;);</span><br><span class="line">        NETTY_IO_THREAD = Executors.newSingleThreadExecutor(runnable -&gt; &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"NETTY_IO_THREAD"</span>);</span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessSync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"异步提交请求处理任务......"</span>);</span><br><span class="line">        Future&lt;Object&gt; future = REQUEST_THREAD.submit(REQUEST_TASK);</span><br><span class="line">        <span class="comment">// 模拟请求耗时</span></span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        log.info(<span class="string">"异步提交响应处理任务......"</span>);</span><br><span class="line">        NETTY_IO_THREAD.execute(RESPONSE_TASK);</span><br><span class="line">        <span class="comment">// 这里可以设置超时</span></span><br><span class="line">        log.info(<span class="string">"同步获取请求结果:&#123;&#125;"</span>, future.get());</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>testProcessSync()</code>方法，控制台输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-01-18 13:17:07 [main] INFO  c.t.client.NettyThreadSyncTest - 异步提交请求处理任务......</span><br><span class="line">2020-01-18 13:17:08 [REQUEST_THREAD] INFO  c.t.client.NettyThreadSyncTest - 发送请求成功,请求ID:71f47e27-c17c-458d-b271-4e74fad33a7b,请求内容:throwable</span><br><span class="line">2020-01-18 13:17:09 [main] INFO  c.t.client.NettyThreadSyncTest - 异步提交响应处理任务......</span><br><span class="line">2020-01-18 13:17:09 [NETTY_IO_THREAD] WARN  c.t.client.NettyThreadSyncTest - 处理响应成功,请求ID:71f47e27-c17c-458d-b271-4e74fad33a7b,响应内容:throwable say hello!</span><br><span class="line">2020-01-18 13:17:09 [main] INFO  c.t.client.NettyThreadSyncTest - 同步获取请求结果:throwable say hello!</span><br></pre></td></tr></table></figure><p>上面这个例子里面的线程同步处理主要参考主流的<code>Netty</code>框架客户端部分的实现逻辑：<code>RocketMQ</code>（具体是<code>NettyRemotingClient</code>类）以及<code>Redisson</code>（具体是<code>RedisExecutor</code>类），它们就是用这种方式使得异步线程处理转化为同步处理。</p><h2 id="Client端请求响应同步化处理">Client端请求响应同步化处理</h2><p>按照前面的例子，首先新增一个<code>ResponseFuture</code>用于承载已发送但未响应的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseFuture</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> beginTimestamp = System.currentTimeMillis();</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeoutMilliseconds;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String requestId;</span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> sendRequestSucceed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Throwable cause;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ResponseMessagePacket response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseFuture</span><span class="params">(String requestId, <span class="keyword">long</span> timeoutMilliseconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.requestId = requestId;</span><br><span class="line">        <span class="keyword">this</span>.timeoutMilliseconds = timeoutMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">timeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() - beginTimestamp &gt; timeoutMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseMessagePacket <span class="title">waitResponse</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> timeoutMilliseconds)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        latch.await(timeoutMilliseconds, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putResponse</span><span class="params">(ResponseMessagePacket response)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着需要新增一个<code>HashMap</code>去缓存这些返送成功但是未得到响应处理的<code>ResponseFuture</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String <span class="comment">/* request id */</span>, ResponseFuture&gt; RESPONSE_FUTURE_TABLE = Maps.newConcurrentMap();</span><br></pre></td></tr></table></figure><p>这里的<code>KEY</code>选用<code>requestId</code>，而<code>requestId</code>之前已经定义为<code>UUID</code>，确保每个请求不会重复。为了简单起见，目前所有的逻辑都编写在契约代理工厂<code>ContractProxyFactory</code>，添加下面的功能：</p><ul><li>添加一个同步发送方法<code>sendRequestSync()</code>处理消息包的发送和同步响应，<code>RequestMessagePacket</code>转换为调用代理目标方法返回值类型的逻辑暂时也编写在此方法中。</li><li>添加一个核心线程数量为逻辑核心数量 * 2的线程池用于处理请求。</li><li>添加一个单线程的调度线程池用于定时清理那些过期的<code>ResponseFuture</code>，清理方法为<code>scanResponseFutureTable()</code>。</li></ul><p>修改后的<code>ContractProxyFactory</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestArgumentExtractor EXTRACTOR = <span class="keyword">new</span> DefaultRequestArgumentExtractor();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, Object&gt; CACHE = Maps.newConcurrentMap();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String <span class="comment">/* request id */</span>, ResponseFuture&gt; RESPONSE_FUTURE_TABLE = Maps.newConcurrentMap();</span><br><span class="line">    <span class="comment">// 定义请求的最大超时时间为3秒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> REQUEST_TIMEOUT_MS = <span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService EXECUTOR;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService CLIENT_HOUSE_KEEPER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Serializer SERIALIZER = FastJsonSerializer.X;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">ofProxy</span><span class="params">(Class&lt;T&gt; interfaceKlass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 缓存契约接口的代理类实例</span></span><br><span class="line">        <span class="keyword">return</span> (T) CACHE.computeIfAbsent(interfaceKlass, x -&gt;</span><br><span class="line">                Proxy.newProxyInstance(interfaceKlass.getClassLoader(), <span class="keyword">new</span> Class[]&#123;interfaceKlass&#125;, (target, method, args) -&gt; &#123;</span><br><span class="line">                    RequestArgumentExtractInput input = <span class="keyword">new</span> RequestArgumentExtractInput();</span><br><span class="line">                    input.setInterfaceKlass(interfaceKlass);</span><br><span class="line">                    input.setMethod(method);</span><br><span class="line">                    RequestArgumentExtractOutput output = EXTRACTOR.extract(input);</span><br><span class="line">                    <span class="comment">// 封装请求参数</span></span><br><span class="line">                    RequestMessagePacket packet = <span class="keyword">new</span> RequestMessagePacket();</span><br><span class="line">                    packet.setMagicNumber(ProtocolConstant.MAGIC_NUMBER);</span><br><span class="line">                    packet.setVersion(ProtocolConstant.VERSION);</span><br><span class="line">                    packet.setSerialNumber(SerialNumberUtils.X.generateSerialNumber());</span><br><span class="line">                    packet.setMessageType(MessageType.REQUEST);</span><br><span class="line">                    packet.setInterfaceName(output.getInterfaceName());</span><br><span class="line">                    packet.setMethodName(output.getMethodName());</span><br><span class="line">                    packet.setMethodArgumentSignatures(output.getMethodArgumentSignatures().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">                    packet.setMethodArguments(args);</span><br><span class="line">                    Channel channel = ClientChannelHolder.CHANNEL_REFERENCE.get();</span><br><span class="line">                    <span class="keyword">return</span> sendRequestSync(channel, packet, method.getReturnType());</span><br><span class="line">                &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packet  packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Object <span class="title">sendRequestSync</span><span class="params">(Channel channel, RequestMessagePacket packet, Class&lt;?&gt; returnType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTimestamp = System.currentTimeMillis();</span><br><span class="line">        ResponseFuture responseFuture = <span class="keyword">new</span> ResponseFuture(packet.getSerialNumber(), REQUEST_TIMEOUT_MS);</span><br><span class="line">        RESPONSE_FUTURE_TABLE.put(packet.getSerialNumber(), responseFuture);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取到承载响应Packet的Future</span></span><br><span class="line">            Future&lt;ResponseMessagePacket&gt; packetFuture = EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                channel.writeAndFlush(packet).addListener((ChannelFutureListener)</span><br><span class="line">                        future -&gt; responseFuture.setSendRequestSucceed(<span class="keyword">true</span>));</span><br><span class="line">                <span class="keyword">return</span> responseFuture.waitResponse(REQUEST_TIMEOUT_MS - (System.currentTimeMillis() - beginTimestamp));</span><br><span class="line">            &#125;);</span><br><span class="line">            ResponseMessagePacket responsePacket = packetFuture.get(</span><br><span class="line">                    REQUEST_TIMEOUT_MS - (System.currentTimeMillis() - beginTimestamp), TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == responsePacket) &#123;</span><br><span class="line">                <span class="comment">// 超时导致响应包获取失败</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SendRequestException(String.format(<span class="string">"ResponseMessagePacket获取超时,请求ID:%s"</span>, packet.getSerialNumber()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ByteBuf payload = (ByteBuf) responsePacket.getPayload();</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = ByteBufferUtils.X.readBytes(payload);</span><br><span class="line">                <span class="keyword">return</span> SERIALIZER.decode(bytes, returnType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"同步发送请求异常,请求包:&#123;&#125;"</span>, JSON.toJSONString(packet), e);</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) e;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SendRequestException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanResponseFutureTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"开始执行ResponseFutureTable清理任务......"</span>);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, ResponseFuture&gt;&gt; iterator = RESPONSE_FUTURE_TABLE.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, ResponseFuture&gt; entry = iterator.next();</span><br><span class="line">            ResponseFuture responseFuture = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (responseFuture.timeout()) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">                log.warn(<span class="string">"移除过期的请求ResponseFuture,请求ID:&#123;&#125;"</span>, entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"执行ResponseFutureTable清理任务结束......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> n = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        EXECUTOR = <span class="keyword">new</span> ThreadPoolExecutor(n * <span class="number">2</span>, n * <span class="number">2</span>, <span class="number">0</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">50</span>), runnable -&gt; &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            thread.setName(<span class="string">"CLIENT_REQUEST_EXECUTOR"</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;);</span><br><span class="line">        CLIENT_HOUSE_KEEPER = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, runnable -&gt; &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            thread.setName(<span class="string">"CLIENT_HOUSE_KEEPER"</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;);</span><br><span class="line">        CLIENT_HOUSE_KEEPER.scheduleWithFixedDelay(ContractProxyFactory::scanResponseFutureTable, <span class="number">5</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着添加一个客户端入站处理器，用于通过<code>reuqestId</code>匹配目标<code>ResponseFuture</code>实例，同时设置<code>ResponseFuture</code>实例中的<code>response</code>属性为响应包，同时释放闭锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ResponseMessagePacket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ResponseMessagePacket packet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"接收到响应包,内容:&#123;&#125;"</span>, JSON.toJSONString(packet));</span><br><span class="line">        ResponseFuture responseFuture = ContractProxyFactory.RESPONSE_FUTURE_TABLE.get(packet.getSerialNumber());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != responseFuture) &#123;</span><br><span class="line">            responseFuture.putResponse(packet);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">"接收响应包查询ResponseFuture不存在,请求ID:&#123;&#125;"</span>, packet.getSerialNumber());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，客户端启动类<code>ClientApplication</code>中添加<code>ClientHandler</code>到<code>Netty</code>的处理器流水线中即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG));</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> RequestMessagePacketEncoder(FastJsonSerializer.X));</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> ResponseMessagePacketDecoder());</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>先运行之前- <a href="http://www.throwable.club/2020/01/15/netty-custom-rpc-framework-server" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-Server篇》</a>中编写好的<code>ServerApplication</code>，再启动<code>ClientApplication</code>，日志输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 服务端</span><br><span class="line">2020-01-18 14:32:59 [nioEventLoopGroup-3-2] INFO  club.throwable.server.ServerHandler - 服务端接收到:RequestMessagePacket(interfaceName=club.throwable.contract.HelloService, methodName=sayHello, methodArgumentSignatures=[java.lang.String], methodArguments=[PooledUnsafeDirectByteBuf(ridx: 0, widx: 11, cap: 11/144)])</span><br><span class="line">2020-01-18 14:32:59 [nioEventLoopGroup-3-2] INFO  club.throwable.server.ServerHandler - 查找目标实现方法成功,目标类:club.throwable.server.contract.DefaultHelloService,宿主类:club.throwable.server.contract.DefaultHelloService,宿主方法:sayHello</span><br><span class="line">2020-01-18 14:32:59 [nioEventLoopGroup-3-2] INFO  club.throwable.server.ServerHandler - 服务端输出:&#123;"attachments":&#123;&#125;,"errorCode":200,"magicNumber":10086,"message":"Success","messageType":"RESPONSE","payload":"\"throwable say hello!\"","serialNumber":"21d131d26fc74f91b4691e0207826b90","version":1&#125;</span><br><span class="line"></span><br><span class="line">// 客户端</span><br><span class="line">2020-01-18 14:32:59 [nioEventLoopGroup-2-1] INFO  club.throwable.client.ClientHandler - 接收到响应包,内容:&#123;"attachments":&#123;&#125;,"errorCode":200,"magicNumber":10086,"message":"Success","messageType":"RESPONSE","payload":&#123;"contiguous":true,"direct":true,"readOnly":false,"readable":true,"writable":false&#125;,"serialNumber":"21d131d26fc74f91b4691e0207826b90","version":1&#125;</span><br><span class="line">2020-01-18 14:32:59 [main] INFO  c.throwable.client.ClientApplication - HelloService[throwable]调用结果:"throwable say hello!"</span><br><span class="line">2020-01-18 14:33:04 [CLIENT_HOUSE_KEEPER] INFO  c.t.client.ContractProxyFactory - 开始执行ResponseFutureTable清理任务......</span><br><span class="line">2020-01-18 14:33:04 [CLIENT_HOUSE_KEEPER] WARN  c.t.client.ContractProxyFactory - 移除过期的请求ResponseFuture,请求ID:21d131d26fc74f91b4691e0207826b90</span><br></pre></td></tr></table></figure><p>可见异步线程模型已经被改造为同步化，现在可以通过契约接口通过<code>RPC</code>同步调用服务端。</p><h2 id="小结">小结</h2><p><code>Client</code>端的请求-响应同步化处理基本改造完毕，到此为止，一个<code>RPC</code>框架大致已经完成，接下来会对<code>Client</code>端和<code>Server</code>端进行一些改造，让契约相关组件托管到<code>IOC</code>容器，实现契约接口自动注入等等功能。</p><p><code>Demo</code>项目地址：</p><ul><li><a href="https://github.com/zjcscut/netty-tutorials/tree/master/ch0-custom-rpc-protocol" target="_blank" rel="noopener">ch0-custom-rpc-protocol</a></li></ul><p>（本文完e-a-20200118 c-2-d）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;前置文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.throwable.club/2020/01/12/netty-custom-rpc-framework-protocol&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.throwable.club/2020/01/15/netty-custom-rpc-framework-server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《基于Netty和SpringBoot实现一个轻量级RPC框架-Server篇》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.throwable.club/2020/01/16/netty-custom-rpc-framework-client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《基于Netty和SpringBoot实现一个轻量级RPC框架-Client篇》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前一篇文章简单介绍了通过动态代理完成了&lt;code&gt;Client&lt;/code&gt;端契约接口调用转换为发送&lt;code&gt;RPC&lt;/code&gt;协议请求的功能。这篇文章主要解决一个遗留的技术难题：请求-响应同步化处理。&lt;/p&gt;
&lt;p&gt;需要的依赖如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK1.8+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Netty:4.1.44.Final&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringBoot:2.2.2.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Netty" scheme="http://throwable.club/blog/categories/Netty/"/>
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Netty/Java/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Netty" scheme="http://throwable.club/blog/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>基于Netty和SpringBoot实现一个轻量级RPC框架-Client篇</title>
    <link href="http://throwable.club/2020/01/16/netty-custom-rpc-framework-client/"/>
    <id>http://throwable.club/2020/01/16/netty-custom-rpc-framework-client/</id>
    <published>2020-01-16T14:56:51.000Z</published>
    <updated>2020-01-16T14:57:36.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>前置文章：</p><ul><li><a href="http://www.throwable.club/2020/01/12/netty-custom-rpc-framework-protocol" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》</a></li><li><a href="http://www.throwable.club/2020/01/15/netty-custom-rpc-framework-server" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-Server篇》</a></li></ul><p>前一篇文章相对简略地介绍了<code>RPC</code>服务端的编写，而这篇博文最要介绍服务端（<code>Client</code>）的实现。<code>RPC</code>调用一般是面向契约编程的，而<code>Client</code>的核心功能就是：把契约接口方法的调用抽象为使用<code>Netty</code>向<code>RPC</code>服务端通过私有协议发送一个请求。这里最底层的实现依赖于动态代理，因此动态代理是动态实现接口的最简单方式（如果字节码研究得比较深入，可以通过字节码编程实现接口）。需要的依赖如下：</p><ul><li><code>JDK1.8+</code></li><li><code>Netty:4.1.44.Final</code></li><li><code>SpringBoot:2.2.2.RELEASE</code></li></ul><a id="more"></a><h2 id="动态代理的简单使用">动态代理的简单使用</h2><p>一般可以通过<code>JDK</code>动态代理或者<code>Cglib</code>的字节码增强来实现此功能，为了简单起见，不引入额外的依赖，这里选用<code>JDK</code>动态代理。这里重新搬出前面提到的契约接口<code>HelloService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来需要通过动态代理为此接口添加一个实现：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDynamicProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;HelloService&gt; interfaceKlass = HelloService<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> HelloServiceImpl(interfaceKlass);</span><br><span class="line">        HelloService helloService = (HelloService)</span><br><span class="line">                Proxy.newProxyInstance(interfaceKlass.getClassLoader(), <span class="keyword">new</span> Class[]&#123;interfaceKlass&#125;, handler);</span><br><span class="line">        System.out.println(helloService.sayHello(<span class="string">"throwable"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; interfaceKlass;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">// 这里应该根据方法的返回值类型去决定返回结果</span></span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">"[%s#%s]方法被调用,参数列表:%s"</span>, interfaceKlass.getName(), method.getName(),</span><br><span class="line">                    JSON.toJSONString(args));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 控制台输出结果</span></span><br><span class="line">[club.throwable.contract.HelloService#sayHello]方法被调用,参数列表:["throwable"]</span><br></pre></td></tr></table></figure><p>这里可以确认两点：</p><ol><li><code>InvocationHandler</code>实现后会对被代理接口生成一个动态实现类。</li><li>动态实现类（接口）方法被调用的时候，实际上是调用<code>InvocationHandler</code>对应实例的<code>invoke()</code>方法，传入的参数就是当前方法调用的元数据。</li></ol><h2 id="Client端代码实现">Client端代码实现</h2><p><code>Client</code>端需要通过动态代理为契约接口生成一个动态实现类，然后提取契约接口调用方法时候所能提供的元数据，通过这些元数据和<code>Netty</code>客户端的支持（例如<code>Netty</code>的<code>Channel</code>）基于私有<code>RPC</code>协议组装请求信息并且发送请求。这里先定义一个请求参数提取器接口<code>RequestArgumentExtractor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestArgumentExtractInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; interfaceKlass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestArgumentExtractOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; methodArgumentSignatures;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestArgumentExtractor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">RequestArgumentExtractOutput <span class="title">extract</span><span class="params">(RequestArgumentExtractInput input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单实现一下，解析结果添加到缓存中，实现类<code>DefaultRequestArgumentExtractor</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRequestArgumentExtractor</span> <span class="keyword">implements</span> <span class="title">RequestArgumentExtractor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;CacheKey, RequestArgumentExtractOutput&gt; cache = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestArgumentExtractOutput <span class="title">extract</span><span class="params">(RequestArgumentExtractInput input)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; interfaceKlass = input.getInterfaceKlass();</span><br><span class="line">        Method method = input.getMethod();</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">return</span> cache.computeIfAbsent(<span class="keyword">new</span> CacheKey(interfaceKlass.getName(), methodName,</span><br><span class="line">                Lists.newArrayList(parameterTypes)), x -&gt; &#123;</span><br><span class="line">            RequestArgumentExtractOutput output = <span class="keyword">new</span> RequestArgumentExtractOutput();</span><br><span class="line">            output.setInterfaceName(interfaceKlass.getName());</span><br><span class="line">            List&lt;String&gt; methodArgumentSignatures = Lists.newArrayList();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; klass : parameterTypes) &#123;</span><br><span class="line">                methodArgumentSignatures.add(klass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            output.setMethodArgumentSignatures(methodArgumentSignatures);</span><br><span class="line">            output.setMethodName(methodName);</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String interfaceName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String methodName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; parameterTypes;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            CacheKey cacheKey = (CacheKey) o;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(interfaceName, cacheKey.interfaceName) &amp;&amp;</span><br><span class="line">                    Objects.equals(methodName, cacheKey.methodName) &amp;&amp;</span><br><span class="line">                    Objects.equals(parameterTypes, cacheKey.parameterTypes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(interfaceName, methodName, parameterTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不考虑重连、断连等情况下，新增一个类<code>ClientChannelHolder</code>用于保存<code>Netty</code>客户端的<code>Channel</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientChannelHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReference&lt;Channel&gt; CHANNEL_REFERENCE = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着新增一个契约动态代理工厂（工具类）<code>ContractProxyFactory</code>，用于为契约接口生成代理类实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestArgumentExtractor EXTRACTOR = <span class="keyword">new</span> DefaultRequestArgumentExtractor();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, Object&gt; CACHE = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">ofProxy</span><span class="params">(Class&lt;T&gt; interfaceKlass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 缓存契约接口的代理类实例</span></span><br><span class="line">        <span class="keyword">return</span> (T) CACHE.computeIfAbsent(interfaceKlass, x -&gt;</span><br><span class="line">                Proxy.newProxyInstance(interfaceKlass.getClassLoader(), <span class="keyword">new</span> Class[]&#123;interfaceKlass&#125;, (target, method, args) -&gt; &#123;</span><br><span class="line">                    RequestArgumentExtractInput input = <span class="keyword">new</span> RequestArgumentExtractInput();</span><br><span class="line">                    input.setInterfaceKlass(interfaceKlass);</span><br><span class="line">                    input.setMethod(method);</span><br><span class="line">                    RequestArgumentExtractOutput output = EXTRACTOR.extract(input);</span><br><span class="line">                    <span class="comment">// 封装请求参数</span></span><br><span class="line">                    RequestMessagePacket packet = <span class="keyword">new</span> RequestMessagePacket();</span><br><span class="line">                    packet.setMagicNumber(ProtocolConstant.MAGIC_NUMBER);</span><br><span class="line">                    packet.setVersion(ProtocolConstant.VERSION);</span><br><span class="line">                    packet.setSerialNumber(SerialNumberUtils.X.generateSerialNumber());</span><br><span class="line">                    packet.setMessageType(MessageType.REQUEST);</span><br><span class="line">                    packet.setInterfaceName(output.getInterfaceName());</span><br><span class="line">                    packet.setMethodName(output.getMethodName());</span><br><span class="line">                    packet.setMethodArgumentSignatures(output.getMethodArgumentSignatures().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">                    packet.setMethodArguments(args);</span><br><span class="line">                    Channel channel = ClientChannelHolder.CHANNEL_REFERENCE.get();</span><br><span class="line">                    <span class="comment">// 发起请求</span></span><br><span class="line">                    channel.writeAndFlush(packet);</span><br><span class="line">                    <span class="comment">// 这里方法返回值需要进行同步处理,相对复杂,后面专门开一篇文章讲解,暂时统一返回字符串</span></span><br><span class="line">                    <span class="comment">// 如果契约接口的返回值类型不是字符串,这里方法返回后会抛出异常</span></span><br><span class="line">                    <span class="keyword">return</span> String.format(<span class="string">"[%s#%s]调用成功,发送了[%s]到NettyServer[%s]"</span>, output.getInterfaceName(),</span><br><span class="line">                            output.getMethodName(), JSON.toJSONString(packet), channel.remoteAddress());</span><br><span class="line">                &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编写客户端<code>ClientApplication</code>的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9092</span>;</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bootstrap.group(workerGroup);</span><br><span class="line">            bootstrap.channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            bootstrap.option(ChannelOption.SO_KEEPALIVE, Boolean.TRUE);</span><br><span class="line">            bootstrap.option(ChannelOption.TCP_NODELAY, Boolean.TRUE);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> RequestMessagePacketEncoder(FastJsonSerializer.X));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> ResponseMessagePacketDecoder());</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> SimpleChannelInboundHandler&lt;ResponseMessagePacket&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ResponseMessagePacket packet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            Object targetPayload = packet.getPayload();</span><br><span class="line">                            <span class="keyword">if</span> (targetPayload <span class="keyword">instanceof</span> ByteBuf) &#123;</span><br><span class="line">                                ByteBuf byteBuf = (ByteBuf) targetPayload;</span><br><span class="line">                                <span class="keyword">int</span> readableByteLength = byteBuf.readableBytes();</span><br><span class="line">                                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readableByteLength];</span><br><span class="line">                                byteBuf.readBytes(bytes);</span><br><span class="line">                                targetPayload = FastJsonSerializer.X.decode(bytes, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                                byteBuf.release();</span><br><span class="line">                            &#125;</span><br><span class="line">                            packet.setPayload(targetPayload);</span><br><span class="line">                            log.info(<span class="string">"接收到来自服务端的响应消息,消息内容:&#123;&#125;"</span>, JSON.toJSONString(packet));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ChannelFuture future = bootstrap.connect(<span class="string">"localhost"</span>, port).sync();</span><br><span class="line">            <span class="comment">// 保存Channel实例,暂时不考虑断连重连</span></span><br><span class="line">            ClientChannelHolder.CHANNEL_REFERENCE.set(future.channel());</span><br><span class="line">            <span class="comment">// 构造契约接口代理类实例</span></span><br><span class="line">            HelloService helloService = ContractProxyFactory.ofProxy(HelloService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            String result = helloService.sayHello(<span class="string">"throwable"</span>);</span><br><span class="line">            log.info(result);</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动<a href="http://www.throwable.club/2020/01/15/netty-custom-rpc-framework-server" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-Server篇》</a>一文中的<code>ServerApplication</code>，再启动<code>ClientApplication</code>，控制台输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 服务端日志</span><br><span class="line">2020-01-16 22:34:51 [main] INFO  c.throwable.server.ServerApplication - 启动NettyServer[9092]成功...</span><br><span class="line">2020-01-16 22:36:35 [nioEventLoopGroup-3-1] INFO  club.throwable.server.ServerHandler - 服务端接收到:RequestMessagePacket(interfaceName=club.throwable.contract.HelloService, methodName=sayHello, methodArgumentSignatures=[java.lang.String], methodArguments=[PooledUnsafeDirectByteBuf(ridx: 0, widx: 11, cap: 11/144)])</span><br><span class="line">2020-01-16 22:36:35 [nioEventLoopGroup-3-1] INFO  club.throwable.server.ServerHandler - 查找目标实现方法成功,目标类:club.throwable.server.contract.DefaultHelloService,宿主类:club.throwable.server.contract.DefaultHelloService,宿主方法:sayHello</span><br><span class="line">2020-01-16 22:36:35 [nioEventLoopGroup-3-1] INFO  club.throwable.server.ServerHandler - 服务端输出:&#123;"attachments":&#123;&#125;,"errorCode":200,"magicNumber":10086,"message":"Success","messageType":"RESPONSE","payload":"\"throwable say hello!\"","serialNumber":"63d386214d30410c9e5f04de03d8b2da","version":1&#125;</span><br><span class="line"></span><br><span class="line">// 客户端日志</span><br><span class="line">2020-01-16 22:36:35 [main] INFO  c.throwable.client.ClientApplication - [club.throwable.contract.HelloService#sayHello]调用成功,发送了[&#123;"attachments":&#123;&#125;,"interfaceName":"club.throwable.contract.HelloService","magicNumber":10086,"messageType":"REQUEST","methodArgumentSignatures":["java.lang.String"],"methodArguments":["throwable"],"methodName":"sayHello","serialNumber":"63d386214d30410c9e5f04de03d8b2da","version":1&#125;]到NettyServer[localhost/127.0.0.1:9092]</span><br><span class="line">2020-01-16 22:36:35 [nioEventLoopGroup-2-1] INFO  c.throwable.client.ClientApplication - 接收到来自服务端的响应消息,消息内容:&#123;"attachments":&#123;&#125;,"errorCode":200,"magicNumber":10086,"message":"Success","messageType":"RESPONSE","payload":"\"throwable say hello!\"","serialNumber":"63d386214d30410c9e5f04de03d8b2da","version":1&#125;</span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p><code>Client</code>端主要负责契约接口调用转换为发送<code>RPC</code>协议请求这一步，核心技术就是动态代理，在不进行模块封装优化的前提下实现是相对简单的。这里其实<code>Client</code>端还有一个比较大的技术难题没有解决，上面例子中客户端日志输出如果眼尖的伙伴会发现，<code>Client</code>端发送<code>RPC</code>请求的线程（<code>main</code>线程）和<code>Client</code>端接收<code>Server</code>端<code>RPC</code>响应处理的线程（<code>nioEventLoopGroup-2-1</code>线程）并不相同，这一点是<code>Netty</code>处理网络请求之所以能够如此高效的根源（简单来说就是请求和响应是异步的，两个流程本来是互不感知的）。但是更多情况下，我们希望外部请求是同步的，希望发送<code>RPC</code>请求的线程得到响应结果再返回（这里请求和响应有可能依然是异步流程）。下一篇文章会详细分析一下如果对请求-响应做同步化处理。</p><p><code>Demo</code>项目地址：</p><ul><li><a href="https://github.com/zjcscut/netty-tutorials/tree/master/ch0-custom-rpc-protocol" target="_blank" rel="noopener">ch0-custom-rpc-protocol</a></li></ul><p>（c-2-d e-a-20200116）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;前置文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.throwable.club/2020/01/12/netty-custom-rpc-framework-protocol&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.throwable.club/2020/01/15/netty-custom-rpc-framework-server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《基于Netty和SpringBoot实现一个轻量级RPC框架-Server篇》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前一篇文章相对简略地介绍了&lt;code&gt;RPC&lt;/code&gt;服务端的编写，而这篇博文最要介绍服务端（&lt;code&gt;Client&lt;/code&gt;）的实现。&lt;code&gt;RPC&lt;/code&gt;调用一般是面向契约编程的，而&lt;code&gt;Client&lt;/code&gt;的核心功能就是：把契约接口方法的调用抽象为使用&lt;code&gt;Netty&lt;/code&gt;向&lt;code&gt;RPC&lt;/code&gt;服务端通过私有协议发送一个请求。这里最底层的实现依赖于动态代理，因此动态代理是动态实现接口的最简单方式（如果字节码研究得比较深入，可以通过字节码编程实现接口）。需要的依赖如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK1.8+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Netty:4.1.44.Final&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringBoot:2.2.2.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Netty" scheme="http://throwable.club/blog/categories/Netty/"/>
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Netty/Java/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Netty" scheme="http://throwable.club/blog/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>基于Netty和SpringBoot实现一个轻量级RPC框架-Server篇</title>
    <link href="http://throwable.club/2020/01/15/netty-custom-rpc-framework-server/"/>
    <id>http://throwable.club/2020/01/15/netty-custom-rpc-framework-server/</id>
    <published>2020-01-14T16:13:38.000Z</published>
    <updated>2020-01-15T13:27:37.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>前置文章：</p><ul><li><code>Github Page</code>：<a href="http://throwable.club/2020/01/12/netty-custom-rpc-framework-protocol">《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》</a></li><li><code>Coding Page</code>：<a href="http://throwable.coding.me/2020/01/12/netty-custom-rpc-framework-protocol" target="_blank" rel="noopener">《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》</a></li></ul><p>在前置的《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》一文中已经定义了一个相对简单的<code>RPC</code>私有协议，并且实现了对应的编码和解码模块。这篇文章基于协议篇，完成<code>Server</code>端代码调用的编写。考虑到目前相对主流的<code>IOC</code>容器是<code>Spring</code>，这里选用了<code>spring-boot-starter</code>（非<code>MVC</code>容器，只是单纯管理<code>Bean</code>），依赖<code>JDK1.8+</code>。</p><a id="more"></a><h2 id="思路">思路</h2><p>首先<code>RPC</code>私有协议定义了<code>Client</code>端会传过来四个和服务调用息息相关的字段：接口全类名<code>interfaceName</code>、方法名<code>methodName</code>、方法参数签名字符串数组<code>methodArgumentSignatures</code>（可选，这个参数不是必须传入的）以及方法参数数组<code>methodArguments</code>（可选，空方法列表的时候不需要传入参数）。主要流程如下：</p><ul><li>把<code>Server</code>端的所有服务端（实现）类交由<code>IOC</code>容器托管。</li><li><code>Client</code>端发起<code>RPC</code>请求。</li><li>通过前面提到的最多四个参数，从<code>Server</code>服务实例的<code>IOC</code>容器中<strong>匹配出吻合度最高的一个方法</strong><code>java.lang.reflect.Method</code>实例、该方法实例的宿主类以及宿主类对应的<code>Bean</code>实例，如果这一步匹配的目标方法超过1个或者为0个，可以直接返回异常信息。</li><li>把前一步得到的<code>Method</code>实例、宿主类<code>Bean</code>实例，结合方法参数数组<code>methodArguments</code>进行反射调用，得到调用结果。</li><li><code>Server</code>端把响应结果封装到<code>payload</code>通过私有协议发送回<code>Client</code>端。</li></ul><h2 id="Server端代码实现">Server端代码实现</h2><p>为了暂时方便起见，部分数组入参被重新封装为<code>ArrayList</code>，实际上编写<code>RPC</code>框架的时候应该优先考虑性能问题，像<code>JDK</code>提供的集合类库等等应该尽可能少用（以<code>ArrayList</code>为例，扩容的时候存在底层<code>Object[]</code>拷贝，造成性能损失和额外的内存消耗），极尽可能使用基本类型和数组。</p><p>先定义<strong>方法匹配器</strong><code>MethodMatcher</code>相关的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodMatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找一个匹配度最高的方法信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input input</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> output</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">MethodMatchOutput <span class="title">selectOneBestMatchMethod</span><span class="params">(MethodMatchInput input)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入值</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodMatchInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; methodArgumentSignatures;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> methodArgumentArraySize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出值</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodMatchOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Method targetMethod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标实现类 - 这个有可能是被Cglib增强过的类型,是宿主类的子类,如果没有被Cglib增强过,那么它就是宿主类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; targetClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 宿主类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; targetUserClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 宿主类Bean实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数类型列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&lt;?&gt;&gt; parameterTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标方法匹配的逻辑大致如下：</p><ol><li>方法名称和方法实例的宿主类型一定作为匹配条件的一部分。</li><li>如果传入了参数签名列表，优先使用参数签名列表类型进行匹配。</li><li>如果没有传入参数签名列表，那么使用参数的数量进行匹配。</li><li>如果参数签名列表和参数列表都没有传入，那么只能通过方法名称和方法实例的宿主类型匹配。</li><li>考虑到方法匹配解析的过程相对耗时，需要把结果缓存起来。</li></ol><p>分析至此，可以基于反射，编写一个抽象的方法匹配器<code>BaseMethodMatcher</code>，然后把获取宿主类信息的功能委托到子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodMatchException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodMatchException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodMatchException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodMatchException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostClassMethodInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; hostClass;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; hostUserClass;</span><br><span class="line">    <span class="keyword">private</span> Object hostTarget;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMethodMatcher</span> <span class="keyword">implements</span> <span class="title">MethodMatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;MethodMatchInput, MethodMatchOutput&gt; cache = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodMatchOutput <span class="title">selectOneBestMatchMethod</span><span class="params">(MethodMatchInput input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cache.computeIfAbsent(input, in -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MethodMatchOutput output = <span class="keyword">new</span> MethodMatchOutput();</span><br><span class="line">                Class&lt;?&gt; interfaceClass = Class.forName(in.getInterfaceName());</span><br><span class="line">                <span class="comment">// 获取宿主类信息</span></span><br><span class="line">                HostClassMethodInfo info = findHostClassMethodInfo(interfaceClass);</span><br><span class="line">                List&lt;Method&gt; targetMethods = Lists.newArrayList();</span><br><span class="line">                ReflectionUtils.doWithMethods(info.getHostUserClass(), targetMethods::add, method -&gt; &#123;</span><br><span class="line">                    String methodName = method.getName();</span><br><span class="line">                    Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class="line">                    List&lt;Class&lt;?&gt;&gt; inputParameterTypes = Optional.ofNullable(in.getMethodArgumentSignatures())</span><br><span class="line">                            .map(mas -&gt; &#123;</span><br><span class="line">                                List&lt;Class&lt;?&gt;&gt; list = Lists.newArrayList();</span><br><span class="line">                                mas.forEach(ma -&gt; list.add(ClassUtils.resolveClassName(ma, <span class="keyword">null</span>)));</span><br><span class="line">                                <span class="keyword">return</span> list;</span><br><span class="line">                            &#125;).orElse(Lists.newArrayList());</span><br><span class="line">                    output.setParameterTypes(inputParameterTypes);</span><br><span class="line">                    <span class="comment">// 如果传入了参数签名列表，优先使用参数签名列表类型进行匹配</span></span><br><span class="line">                    <span class="keyword">if</span> (!inputParameterTypes.isEmpty()) &#123;</span><br><span class="line">                        List&lt;Class&lt;?&gt;&gt; parameterTypes = Lists.newArrayList(method.getParameterTypes());</span><br><span class="line">                        <span class="keyword">return</span> Objects.equals(methodName, in.getMethodName()) &amp;&amp;</span><br><span class="line">                                Objects.equals(info.getHostUserClass(), declaringClass) &amp;&amp;</span><br><span class="line">                                Objects.equals(parameterTypes, inputParameterTypes);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果没有传入参数签名列表，那么使用参数的数量进行匹配</span></span><br><span class="line">                    <span class="keyword">if</span> (in.getMethodArgumentArraySize() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        List&lt;Class&lt;?&gt;&gt; parameterTypes = Lists.newArrayList(method.getParameterTypes());</span><br><span class="line">                        <span class="keyword">return</span> Objects.equals(methodName, in.getMethodName()) &amp;&amp;</span><br><span class="line">                                Objects.equals(info.getHostUserClass(), declaringClass) &amp;&amp;</span><br><span class="line">                                in.getMethodArgumentArraySize() == parameterTypes.size();</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果参数签名列表和参数列表都没有传入，那么只能通过方法名称和方法实例的宿主类型匹配</span></span><br><span class="line">                    <span class="keyword">return</span> Objects.equals(methodName, in.getMethodName()) &amp;&amp;</span><br><span class="line">                            Objects.equals(info.getHostUserClass(), declaringClass);</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (targetMethods.size() != <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MethodMatchException(String.format(<span class="string">"查找到目标方法数量不等于1,interface:%s,method:%s"</span>,</span><br><span class="line">                            in.getInterfaceName(), in.getMethodName()));</span><br><span class="line">                &#125;</span><br><span class="line">                Method targetMethod = targetMethods.get(<span class="number">0</span>);</span><br><span class="line">                output.setTargetClass(info.getHostClass());</span><br><span class="line">                output.setTargetMethod(targetMethod);</span><br><span class="line">                output.setTargetUserClass(info.getHostUserClass());</span><br><span class="line">                output.setTarget(info.getHostTarget());</span><br><span class="line">                <span class="keyword">return</span> output;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"查找匹配度最高的方法失败,输入参数:&#123;&#125;"</span>, JSON.toJSONString(in), e);</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MethodMatchException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (MethodMatchException) e;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MethodMatchException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取宿主类的信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaceClass interfaceClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> HostClassMethodInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> HostClassMethodInfo <span class="title">findHostClassMethodInfo</span><span class="params">(Class&lt;?&gt; interfaceClass)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，通过接口类型获取宿主类的功能就委托给<code>Spring</code>实现，从<code>IOC</code>容器中获取，定义<code>SpringMethodMatcher</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMethodMatcher</span> <span class="keyword">extends</span> <span class="title">BaseMethodMatcher</span> <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(@NonNull BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = (DefaultListableBeanFactory) beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">HostClassMethodInfo <span class="title">findHostClassMethodInfo</span><span class="params">(Class&lt;?&gt; interfaceClass)</span> </span>&#123;</span><br><span class="line">        HostClassMethodInfo info = <span class="keyword">new</span> HostClassMethodInfo();</span><br><span class="line">        <span class="comment">// 从容器中通过接口类型获取对应的实现,实现必须只有一个</span></span><br><span class="line">        Object bean = beanFactory.getBean(interfaceClass);</span><br><span class="line">        info.setHostTarget(bean);</span><br><span class="line">        info.setHostClass(bean.getClass());</span><br><span class="line">        info.setHostUserClass(ClassUtils.getUserClass(bean.getClass()));</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，目标方法匹配的模块已经编写完毕，接下来需要处理方法参数列表的反序列化。编写协议的时候，笔者把方法参数列表<code>methodArguments</code>存放在<code>Object</code>数组中，传输的时候序列化为<code>byte</code>数组，经过协议解析之后，方法参数列表的实际类型为<code>ByteBuf</code>数组（这是因为<code>Netty</code>中的字节容器就是<code>ByteBuf</code>），那么需要考虑把<code>ByteBuf</code>数组转换为目标方法的参数类型实例。主要步骤如下：</p><ol><li>如果方法参数列表为空，那么什么都不用做，也就是调用了无参数的方法。</li><li>如果方法参数列表不为空同时方法参数类型列表不为空，优先选用方法参数类型列表进行转换。</li><li>如果方法参数列表不为空同时方法参数类型列表为空，则使用<code>Method#getParameterTypes()</code>得到的方法参数列表类型进行转换。</li></ol><p>定义一个方法参数转换器接口<code>MethodArgumentConverter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodArgumentConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">ArgumentConvertOutput <span class="title">convert</span><span class="params">(ArgumentConvertInput input)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgumentConvertInput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数类型列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&lt;?&gt;&gt; parameterTypes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; arguments;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgumentConvertOutput</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] arguments;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法参数转换器的默认实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMethodArgumentConverter</span> <span class="keyword">implements</span> <span class="title">MethodArgumentConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Serializer serializer = FastJsonSerializer.X;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArgumentConvertOutput <span class="title">convert</span><span class="params">(ArgumentConvertInput input)</span> </span>&#123;</span><br><span class="line">        ArgumentConvertOutput output = <span class="keyword">new</span> ArgumentConvertOutput();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == input.getArguments() || input.getArguments().isEmpty()) &#123;</span><br><span class="line">                output.setArguments(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> output;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Class&lt;?&gt;&gt; inputParameterTypes = input.getParameterTypes();</span><br><span class="line">            <span class="keyword">int</span> size = inputParameterTypes.size();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Object[] arguments = <span class="keyword">new</span> Object[size];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    ByteBuf byteBuf = (ByteBuf) input.getArguments().get(i);</span><br><span class="line">                    <span class="keyword">int</span> readableBytes = byteBuf.readableBytes();</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readableBytes];</span><br><span class="line">                    byteBuf.readBytes(bytes);</span><br><span class="line">                    arguments[i] = serializer.decode(bytes, inputParameterTypes.get(i));</span><br><span class="line">                    byteBuf.release();</span><br><span class="line">                &#125;</span><br><span class="line">                output.setArguments(arguments);</span><br><span class="line">                <span class="keyword">return</span> output;</span><br><span class="line">            &#125;</span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = input.getMethod().getParameterTypes();</span><br><span class="line">            <span class="keyword">int</span> len = parameterTypes.length;</span><br><span class="line">            Object[] arguments = <span class="keyword">new</span> Object[len];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                ByteBuf byteBuf = (ByteBuf) input.getArguments().get(i);</span><br><span class="line">                <span class="keyword">int</span> readableBytes = byteBuf.readableBytes();</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readableBytes];</span><br><span class="line">                byteBuf.readBytes(bytes);</span><br><span class="line">                arguments[i] = serializer.decode(bytes, parameterTypes[i]);</span><br><span class="line">                byteBuf.release();</span><br><span class="line">            &#125;</span><br><span class="line">            output.setArguments(arguments);</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentConvertException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有前置工作都完成了，现在编写一个<code>Server</code>端的入站处理器<code>ServerHandler</code>，暂时不做代码逻辑优化，只做实现，把反射调用的模块直接在此类中编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">RequestMessagePacket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MethodMatcher methodMatcher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MethodArgumentConverter methodArgumentConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RequestMessagePacket packet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"服务端接收到:&#123;&#125;"</span>, packet);</span><br><span class="line">        MethodMatchInput input = <span class="keyword">new</span> MethodMatchInput();</span><br><span class="line">        input.setInterfaceName(packet.getInterfaceName());</span><br><span class="line">        input.setMethodArgumentSignatures(Optional.ofNullable(packet.getMethodArgumentSignatures())</span><br><span class="line">                .map(Lists::newArrayList).orElse(Lists.newArrayList()));</span><br><span class="line">        input.setMethodName(packet.getMethodName());</span><br><span class="line">        Object[] methodArguments = packet.getMethodArguments();</span><br><span class="line">        input.setMethodArgumentArraySize(<span class="keyword">null</span> != methodArguments ? methodArguments.length : <span class="number">0</span>);</span><br><span class="line">        MethodMatchOutput output = methodMatcher.selectOneBestMatchMethod(input);</span><br><span class="line">        log.info(<span class="string">"查找目标实现方法成功,目标类:&#123;&#125;,宿主类:&#123;&#125;,宿主方法:&#123;&#125;"</span>,</span><br><span class="line">                output.getTargetClass().getCanonicalName(),</span><br><span class="line">                output.getTargetUserClass().getCanonicalName(),</span><br><span class="line">                output.getTargetMethod().getName()</span><br><span class="line">        );</span><br><span class="line">        Method targetMethod = output.getTargetMethod();</span><br><span class="line">        ArgumentConvertInput convertInput = <span class="keyword">new</span> ArgumentConvertInput();</span><br><span class="line">        convertInput.setArguments(input.getMethodArgumentArraySize() &gt; <span class="number">0</span> ? Lists.newArrayList(methodArguments) : Lists.newArrayList());</span><br><span class="line">        convertInput.setMethod(output.getTargetMethod());</span><br><span class="line">        convertInput.setParameterTypes(output.getParameterTypes());</span><br><span class="line">        ArgumentConvertOutput convertOutput = methodArgumentConverter.convert(convertInput);</span><br><span class="line">        ReflectionUtils.makeAccessible(targetMethod);</span><br><span class="line">        <span class="comment">// 反射调用</span></span><br><span class="line">        Object result = targetMethod.invoke(output.getTarget(), convertOutput.getArguments());</span><br><span class="line">        ResponseMessagePacket response = <span class="keyword">new</span> ResponseMessagePacket();</span><br><span class="line">        response.setMagicNumber(packet.getMagicNumber());</span><br><span class="line">        response.setVersion(packet.getVersion());</span><br><span class="line">        response.setSerialNumber(packet.getSerialNumber());</span><br><span class="line">        response.setAttachments(packet.getAttachments());</span><br><span class="line">        response.setMessageType(MessageType.RESPONSE);</span><br><span class="line">        response.setErrorCode(<span class="number">200L</span>);</span><br><span class="line">        response.setMessage(<span class="string">"Success"</span>);</span><br><span class="line">        response.setPayload(JSON.toJSONString(result));</span><br><span class="line">        log.info(<span class="string">"服务端输出:&#123;&#125;"</span>, JSON.toJSONString(response));</span><br><span class="line">        ctx.writeAndFlush(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个<code>Server</code>的启动类<code>ServerApplication</code>，在<code>Spring</code>容器启动之后，启动<code>Netty</code>服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"club.throwable.server"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;netty.port:9092&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer nettyPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServerHandler serverHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = nettyPort;</span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> RequestMessagePacketDecoder());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> ResponseMessagePacketEncoder(FastJsonSerializer.X));</span><br><span class="line">                            ch.pipeline().addLast(serverHandler);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = bootstrap.bind(port).sync();</span><br><span class="line">            log.info(<span class="string">"启动NettyServer[&#123;&#125;]成功..."</span>, port);</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，编写契约包和契约实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- ch0-custom-rpc-protocol          项目根目录</span><br><span class="line">  - club.throwable</span><br><span class="line">    - utils                        工具类</span><br><span class="line">    - protocol                     协议</span><br><span class="line">    - exception                    异常</span><br><span class="line">    - contract                     契约</span><br><span class="line">      - HelloService               契约接口</span><br><span class="line">    - server                       服务端</span><br><span class="line">      - contract</span><br><span class="line">        - DefaultHelloService      契约接口实现</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHelloService</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s say hello!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动服务端<code>ServerApplication</code>，再启动上一节提到的<code>TestProtocolClient</code>，输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 服务端日志</span><br><span class="line">2020-01-15 00:05:57.898  INFO 14420 --- [           main] club.throwable.server.ServerApplication  : 启动NettyServer[9092]成功...</span><br><span class="line">2020-01-15 00:06:05.980  INFO 14420 --- [ntLoopGroup-3-1] club.throwable.server.ServerHandler      : 服务端接收到:RequestMessagePacket(interfaceName=club.throwable.contract.HelloService, methodName=sayHello, methodArgumentSignatures=[java.lang.String], methodArguments=[PooledUnsafeDirectByteBuf(ridx: 0, widx: 6, cap: 6/139)])</span><br><span class="line">2020-01-15 00:06:07.448  INFO 14420 --- [ntLoopGroup-3-1] club.throwable.server.ServerHandler      : 查找目标实现方法成功,目标类:club.throwable.server.contract.DefaultHelloService,宿主类:club.throwable.server.contract.DefaultHelloService,宿主方法:sayHello</span><br><span class="line">2020-01-15 00:06:07.521  INFO 14420 --- [ntLoopGroup-3-1] club.throwable.server.ServerHandler      : 服务端输出:&#123;"attachments":&#123;&#125;,"errorCode":200,"magicNumber":10086,"message":"Success","messageType":"RESPONSE","payload":"\"doge say hello!\"","serialNumber":"65f01b8e89bb479b8a36a60bd6519617","version":1&#125;</span><br><span class="line"></span><br><span class="line">// 客户端日志</span><br><span class="line">00:06:05.891 [main] INFO club.throwable.protocol.TestProtocolClient - 启动NettyClient[9092]成功...</span><br><span class="line">...省略...</span><br><span class="line">00:06:13.197 [nioEventLoopGroup-2-1] INFO club.throwable.protocol.TestProtocolClient - 接收到来自服务端的响应消息,消息内容:&#123;"attachments":&#123;&#125;,"errorCode":200,"magicNumber":10086,"message":"Success","messageType":"RESPONSE","payload":"\"doge say hello!\"","serialNumber":"65f01b8e89bb479b8a36a60bd6519617","version":1&#125;</span><br></pre></td></tr></table></figure><p>可见<code>RPC</code>调用成功。</p><h2 id="小结">小结</h2><p>编写<code>RPC</code>的<code>Server</code>端技巧在于处理目标方法和宿主类的查找，在转换方法参数的时候，需要考虑简化处理和提高效率，剩下的就是做好异常处理和模块封装。限于篇幅，后面会先分析<code>Client</code>端的处理，再分析心跳处理、服务端优化、甚至是对接注册中心等等，在<code>Netty</code>、<code>SpringBoot</code>等优秀框架的加持下编写一个<code>RPC</code>框架其实并不困难，困难的是性能优化和生态圈的支持。</p><p><code>Demo</code>项目地址：</p><ul><li><a href="https://github.com/zjcscut/netty-tutorials/tree/master/ch0-custom-rpc-protocol" target="_blank" rel="noopener">ch0-custom-rpc-protocol</a></li></ul><p>（本文完 c-1-d e-a-20200115）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;前置文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Github Page&lt;/code&gt;：&lt;a href=&quot;http://throwable.club/2020/01/12/netty-custom-rpc-framework-protocol&quot;&gt;《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Coding Page&lt;/code&gt;：&lt;a href=&quot;http://throwable.coding.me/2020/01/12/netty-custom-rpc-framework-protocol&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在前置的《基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇》一文中已经定义了一个相对简单的&lt;code&gt;RPC&lt;/code&gt;私有协议，并且实现了对应的编码和解码模块。这篇文章基于协议篇，完成&lt;code&gt;Server&lt;/code&gt;端代码调用的编写。考虑到目前相对主流的&lt;code&gt;IOC&lt;/code&gt;容器是&lt;code&gt;Spring&lt;/code&gt;，这里选用了&lt;code&gt;spring-boot-starter&lt;/code&gt;（非&lt;code&gt;MVC&lt;/code&gt;容器，只是单纯管理&lt;code&gt;Bean&lt;/code&gt;），依赖&lt;code&gt;JDK1.8+&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Netty" scheme="http://throwable.club/blog/categories/Netty/"/>
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Netty/Java/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Netty" scheme="http://throwable.club/blog/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>基于Netty和SpringBoot实现一个轻量级RPC框架-协议篇</title>
    <link href="http://throwable.club/2020/01/12/netty-custom-rpc-framework-protocol/"/>
    <id>http://throwable.club/2020/01/12/netty-custom-rpc-framework-protocol/</id>
    <published>2020-01-12T14:47:21.000Z</published>
    <updated>2020-01-15T13:25:44.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近对网络编程方面比较有兴趣，在微服务实践上也用到了相对主流的<code>RPC</code>框架如<code>Spring Cloud Gateway</code>底层也切换为<code>Reactor-Netty</code>，像<code>Redisson</code>底层也是使用<code>Netty</code>封装通讯协议，最近调研和准备使用的<code>SOFARpc</code>也是基于<code>Netty</code>封装实现了多种协议的兼容。因此，基于<code>Netty</code>造一个轮子，在<code>SpringBoot</code>的加持下，实现一个轻量级的<code>RPC</code>框架。这篇博文介绍的是<code>RPC</code>框架协议的定义以及对应的编码解码处理的实现。</p><a id="more"></a><h2 id="依赖引入">依赖引入</h2><p>截止本文（<code>2020-01-12</code>）编写完成之时，<code>Netty</code>的最新版本为<code>4.1.44.Final</code>，而<code>SpringBoot</code>的最新版本为<code>2.2.2.RELEASE</code>，因此引入这两个版本的依赖，加上其他工具包和序列化等等的支持，<code>pom</code>文件的核心内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;netty.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.61<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>28.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>部分参数的序列化会依赖到<code>FastJson</code>或者<code>Jackson</code>，具体看偏好而定。</p><h2 id="自定义协议的定义">自定义协议的定义</h2><p>为了提高协议传输的效率，需要定制一套高效的<code>RPC</code>协议，设计协议所需的字段和类型。</p><p><strong>基础Packet字段</strong>：</p><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">字段类型</th><th style="text-align:center">字节数(byte)</th><th style="text-align:center">字段功能</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>magicNumber</code></td><td style="text-align:center"><code>int</code></td><td style="text-align:center">2</td><td style="text-align:center">魔数，类似于<code>Java</code>的字节码文件的魔数是<code>0xcafebase</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>version</code></td><td style="text-align:center"><code>int</code></td><td style="text-align:center">2</td><td style="text-align:center">版本号</td><td style="text-align:center">预留字段，默认为1</td></tr><tr><td style="text-align:center"><code>serialNumber</code></td><td style="text-align:center"><code>java.lang.String</code></td><td style="text-align:center">4</td><td style="text-align:center">请求流水号</td><td style="text-align:center">十分重要，每个请求的唯一标识</td></tr><tr><td style="text-align:center"><code>messageType</code></td><td style="text-align:center"><code>MessageType</code></td><td style="text-align:center">1</td><td style="text-align:center">消息类型</td><td style="text-align:center">自定义的枚举类型，见下面的<code>MessageType</code>类</td></tr><tr><td style="text-align:center"><code>attachments</code></td><td style="text-align:center"><code>Map&lt;String, String&gt;</code></td><td style="text-align:center">视实际情况而定</td><td style="text-align:center">附件</td><td style="text-align:center"><code>K-V</code>形式，类似于<code>HTTP</code>协议中的<code>Header</code></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消息枚举类型</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MessageType &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUEST((<span class="keyword">byte</span>) <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESPONSE((<span class="keyword">byte</span>) <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PING</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PING((<span class="keyword">byte</span>) <span class="number">3</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PONG</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PONG((<span class="keyword">byte</span>) <span class="number">4</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NULL((<span class="keyword">byte</span>) <span class="number">5</span>),</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Byte type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MessageType <span class="title">fromValue</span><span class="params">(<span class="keyword">byte</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (MessageType type : MessageType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type.getType() == value) &#123;</span><br><span class="line">                <span class="keyword">return</span> type;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"value = %s"</span>, value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础Packet</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMessagePacket</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 魔数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> magicNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 版本号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流水号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serialNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MessageType messageType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 附件 - K-V形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; attachments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加附件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAttachment</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        attachments.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求Packet扩展字段</strong>：</p><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">字段类型</th><th style="text-align:center">字节数(byte)</th><th style="text-align:center">字段功能</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>interfaceName</code></td><td style="text-align:center"><code>java.lang.String</code></td><td style="text-align:center">视实际情况而定</td><td style="text-align:center">接口全类名</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>methodName</code></td><td style="text-align:center"><code>java.lang.String</code></td><td style="text-align:center">视实际情况而定</td><td style="text-align:center">方法名</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>methodArgumentSignatures</code></td><td style="text-align:center"><code>java.lang.String[]</code></td><td style="text-align:center">视实际情况而定</td><td style="text-align:center">方法参数签名字符串数组</td><td style="text-align:center">存放方法参数类型全类名字符串数组</td></tr><tr><td style="text-align:center"><code>methodArguments</code></td><td style="text-align:center"><code>java.lang.Object[]</code></td><td style="text-align:center">视实际情况而定</td><td style="text-align:center">方法参数数组</td><td style="text-align:center">因为未知方法参数类型，所以用<code>Object</code>表示</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMessagePacket</span> <span class="keyword">extends</span> <span class="title">BaseMessagePacket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口全类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] methodArgumentSignatures;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] methodArguments;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应Packet扩展字段</strong>：</p><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">字段类型</th><th style="text-align:center">字节数(byte)</th><th style="text-align:center">字段功能</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>errorCode</code></td><td style="text-align:center"><code>java.lang.Long</code></td><td style="text-align:center">4</td><td style="text-align:center">响应码</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>message</code></td><td style="text-align:center"><code>java.lang.String</code></td><td style="text-align:center">视实际情况而定</td><td style="text-align:center">响应消息</td><td style="text-align:center">如果出现异常，<code>message</code>就是对应的异常信息</td></tr><tr><td style="text-align:center"><code>payload</code></td><td style="text-align:center"><code>java.lang.Object</code></td><td style="text-align:center">视实际情况而定</td><td style="text-align:center">消息载荷</td><td style="text-align:center">业务处理返回的消息载荷，定义为<code>Object</code>类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseMessagePacket</span> <span class="keyword">extends</span> <span class="title">BaseMessagePacket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * error code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long errorCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息载荷</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object payload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意以下几点</strong>：</p><ul><li>非基本类型在序列化和反序列化的时候，一定注意要先写入或者先读取序列的长度，以<code>java.lang.String</code>类型为例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 序列化 - 流水号</span></span><br><span class="line">out.writeInt(packet.getSerialNumber().length());</span><br><span class="line">out.writeCharSequence(packet.getSerialNumber(), ProtocolConstant.UTF_8);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化 - 流水号</span></span><br><span class="line"><span class="keyword">int</span> serialNumberLength = in.readInt();</span><br><span class="line">packet.setSerialNumber(in.readCharSequence(serialNumberLength, ProtocolConstant.UTF_8).toString());</span><br></pre></td></tr></table></figure><ul><li>特殊编码的字符串在序列化的时候，要注意字符串编码的长度，例如<code>UTF-8</code>编码下一个中文字符占3个字节，这一点可以抽取一个工具类专门处理字符串的序列化：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ByteBufferUtils &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例</span></span><br><span class="line">    X;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encodeUtf8CharSequence</span><span class="params">(ByteBuf byteBuf, CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> writerIndex = byteBuf.writerIndex();</span><br><span class="line">        byteBuf.writeInt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> length = ByteBufUtil.writeUtf8(byteBuf, charSequence);</span><br><span class="line">        byteBuf.setInt(writerIndex, length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法参数数组的序列化和反序列化方案需要定制，笔者为了简化自定义协议，<strong>定义了方法参数签名数组</strong>，长度和方法参数数组一致，这样做方便后面编写服务端代码的时候，<strong>简化对方法参数数组进行反序列化以及宿主类目标方法的查找</strong>。注意一下<code>Object[]</code>的序列化和反序列化相对特殊，因为<code>ByteBuf</code>无法处理自定义类型的写入和读取（这个很好理解，网络编程就是面向<code>0</code>和<code>1</code>的编程）：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">write Object --&gt; ByteBuf#writeInt() &amp;&amp; ByteBuf#writeBytes()</span><br><span class="line"></span><br><span class="line">read Object --&gt; ByteBuf#readInt() &amp;&amp; ByteBuf#readBytes() [&lt;== 这个方法返回值是ByteBuf实例]</span><br></pre></td></tr></table></figure><ul><li>最后注意释放<code>ByteBuf</code>的引用，否则有可能导致内存泄漏。</li></ul><h2 id="自定义协议编码解码实现">自定义协议编码解码实现</h2><p>自定义协议编码解码主要包括四个部分的编码解码器：</p><ul><li>请求<code>Packet</code>编码器：<code>RequestMessagePacketEncoder</code>，主要用于<strong>客户端</strong>把<code>RequestMessagePacket</code>实例序列化为二进制序列。</li><li>请求<code>Packet</code>解码器：<code>RequestMessagePacketDecoder</code>，主要用于<strong>服务端</strong>把二进制序列反序列化为<code>RequestMessagePacket</code>实例。</li><li>响应<code>Packet</code>编码器：<code>ResponseMessagePacketEncoder</code>，主要用于<strong>服务端</strong>把<code>ResponseMessagePacket</code>实例序列化为二进制序列。</li><li>响应<code>Packet</code>解码器：<code>ResponseMessagePacketDecoder</code>，主要用于<strong>客户端</strong>把二进制序列反序列化为<code>ResponseMessagePacket</code>实例。</li></ul><p>画个图描述一下几个组件的交互流程（省略了部分入站和出站处理器）：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/n-s-b-c-p-1.png" alt=""></p><p>序列化器<code>Serializer</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] encode(Object target);</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">decode</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;?&gt; targetClass)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FastJson实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FastJsonSerializer implements Serializer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例</span></span><br><span class="line">    X;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] encode(Object target) &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONBytes(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(<span class="keyword">byte</span>[] bytes, Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(bytes, targetClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求<code>Packet</code>编码器<code>RequestMessagePacketEncoder</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMessagePacketEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">RequestMessagePacket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Serializer serializer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext context, RequestMessagePacket packet, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 魔数</span></span><br><span class="line">        out.writeInt(packet.getMagicNumber());</span><br><span class="line">        <span class="comment">// 版本</span></span><br><span class="line">        out.writeInt(packet.getVersion());</span><br><span class="line">        <span class="comment">// 流水号</span></span><br><span class="line">        out.writeInt(packet.getSerialNumber().length());</span><br><span class="line">        out.writeCharSequence(packet.getSerialNumber(), ProtocolConstant.UTF_8);</span><br><span class="line">        <span class="comment">// 消息类型</span></span><br><span class="line">        out.writeByte(packet.getMessageType().getType());</span><br><span class="line">        <span class="comment">// 附件size</span></span><br><span class="line">        Map&lt;String, String&gt; attachments = packet.getAttachments();</span><br><span class="line">        out.writeInt(attachments.size());</span><br><span class="line">        <span class="comment">// 附件内容</span></span><br><span class="line">        attachments.forEach((k, v) -&gt; &#123;</span><br><span class="line">            out.writeInt(k.length());</span><br><span class="line">            out.writeCharSequence(k, ProtocolConstant.UTF_8);</span><br><span class="line">            out.writeInt(v.length());</span><br><span class="line">            out.writeCharSequence(v, ProtocolConstant.UTF_8);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 接口全类名</span></span><br><span class="line">        out.writeInt(packet.getInterfaceName().length());</span><br><span class="line">        out.writeCharSequence(packet.getInterfaceName(), ProtocolConstant.UTF_8);</span><br><span class="line">        <span class="comment">// 方法名</span></span><br><span class="line">        out.writeInt(packet.getMethodName().length());</span><br><span class="line">        out.writeCharSequence(packet.getMethodName(), ProtocolConstant.UTF_8);</span><br><span class="line">        <span class="comment">// 方法参数签名(String[]类型) - 非必须</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != packet.getMethodArgumentSignatures()) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = packet.getMethodArgumentSignatures().length;</span><br><span class="line">            <span class="comment">// 方法参数签名数组长度</span></span><br><span class="line">            out.writeInt(len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                String methodArgumentSignature = packet.getMethodArgumentSignatures()[i];</span><br><span class="line">                out.writeInt(methodArgumentSignature.length());</span><br><span class="line">                out.writeCharSequence(methodArgumentSignature, ProtocolConstant.UTF_8);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out.writeInt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法参数(Object[]类型) - 非必须</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != packet.getMethodArguments()) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = packet.getMethodArguments().length;</span><br><span class="line">            <span class="comment">// 方法参数数组长度</span></span><br><span class="line">            out.writeInt(len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = serializer.encode(packet.getMethodArguments()[i]);</span><br><span class="line">                out.writeInt(bytes.length);</span><br><span class="line">                out.writeBytes(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out.writeInt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求<code>Packet</code>解码器<code>RequestMessagePacketDecoder</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMessagePacketDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext context, ByteBuf in, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RequestMessagePacket packet = <span class="keyword">new</span> RequestMessagePacket();</span><br><span class="line">        <span class="comment">// 魔数</span></span><br><span class="line">        packet.setMagicNumber(in.readInt());</span><br><span class="line">        <span class="comment">// 版本</span></span><br><span class="line">        packet.setVersion(in.readInt());</span><br><span class="line">        <span class="comment">// 流水号</span></span><br><span class="line">        <span class="keyword">int</span> serialNumberLength = in.readInt();</span><br><span class="line">        packet.setSerialNumber(in.readCharSequence(serialNumberLength, ProtocolConstant.UTF_8).toString());</span><br><span class="line">        <span class="comment">// 消息类型</span></span><br><span class="line">        <span class="keyword">byte</span> messageTypeByte = in.readByte();</span><br><span class="line">        packet.setMessageType(MessageType.fromValue(messageTypeByte));</span><br><span class="line">        <span class="comment">// 附件</span></span><br><span class="line">        Map&lt;String, String&gt; attachments = Maps.newHashMap();</span><br><span class="line">        packet.setAttachments(attachments);</span><br><span class="line">        <span class="keyword">int</span> attachmentSize = in.readInt();</span><br><span class="line">        <span class="keyword">if</span> (attachmentSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attachmentSize; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> keyLength = in.readInt();</span><br><span class="line">                String key = in.readCharSequence(keyLength, ProtocolConstant.UTF_8).toString();</span><br><span class="line">                <span class="keyword">int</span> valueLength = in.readInt();</span><br><span class="line">                String value = in.readCharSequence(valueLength, ProtocolConstant.UTF_8).toString();</span><br><span class="line">                attachments.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接口全类名</span></span><br><span class="line">        <span class="keyword">int</span> interfaceNameLength = in.readInt();</span><br><span class="line">        packet.setInterfaceName(in.readCharSequence(interfaceNameLength, ProtocolConstant.UTF_8).toString());</span><br><span class="line">        <span class="comment">// 方法名</span></span><br><span class="line">        <span class="keyword">int</span> methodNameLength = in.readInt();</span><br><span class="line">        packet.setMethodName(in.readCharSequence(methodNameLength, ProtocolConstant.UTF_8).toString());</span><br><span class="line">        <span class="comment">// 方法参数签名</span></span><br><span class="line">        <span class="keyword">int</span> methodArgumentSignatureArrayLength = in.readInt();</span><br><span class="line">        <span class="keyword">if</span> (methodArgumentSignatureArrayLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String[] methodArgumentSignatures = <span class="keyword">new</span> String[methodArgumentSignatureArrayLength];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodArgumentSignatureArrayLength; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> methodArgumentSignatureLength = in.readInt();</span><br><span class="line">                methodArgumentSignatures[i] = in.readCharSequence(methodArgumentSignatureLength, ProtocolConstant.UTF_8).toString();</span><br><span class="line">            &#125;</span><br><span class="line">            packet.setMethodArgumentSignatures(methodArgumentSignatures);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法参数</span></span><br><span class="line">        <span class="keyword">int</span> methodArgumentArrayLength = in.readInt();</span><br><span class="line">        <span class="keyword">if</span> (methodArgumentArrayLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里的Object[]实际上是ByteBuf[] - 后面需要二次加工为对应类型的实例</span></span><br><span class="line">            Object[] methodArguments = <span class="keyword">new</span> Object[methodArgumentArrayLength];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodArgumentArrayLength; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> byteLength = in.readInt();</span><br><span class="line">                methodArguments[i] = in.readBytes(byteLength);</span><br><span class="line">            &#125;</span><br><span class="line">            packet.setMethodArguments(methodArguments);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(packet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应<code>Packet</code>编码器<code>ResponseMessagePacketEncoder</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseMessagePacketEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">ResponseMessagePacket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Serializer serializer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, ResponseMessagePacket packet, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 魔数</span></span><br><span class="line">        out.writeInt(packet.getMagicNumber());</span><br><span class="line">        <span class="comment">// 版本</span></span><br><span class="line">        out.writeInt(packet.getVersion());</span><br><span class="line">        <span class="comment">// 流水号</span></span><br><span class="line">        out.writeInt(packet.getSerialNumber().length());</span><br><span class="line">        out.writeCharSequence(packet.getSerialNumber(), ProtocolConstant.UTF_8);</span><br><span class="line">        <span class="comment">// 消息类型</span></span><br><span class="line">        out.writeByte(packet.getMessageType().getType());</span><br><span class="line">        <span class="comment">// 附件size</span></span><br><span class="line">        Map&lt;String, String&gt; attachments = packet.getAttachments();</span><br><span class="line">        out.writeInt(attachments.size());</span><br><span class="line">        <span class="comment">// 附件内容</span></span><br><span class="line">        attachments.forEach((k, v) -&gt; &#123;</span><br><span class="line">            out.writeInt(k.length());</span><br><span class="line">            out.writeCharSequence(k, ProtocolConstant.UTF_8);</span><br><span class="line">            out.writeInt(v.length());</span><br><span class="line">            out.writeCharSequence(v, ProtocolConstant.UTF_8);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// error code</span></span><br><span class="line">        out.writeLong(packet.getErrorCode());</span><br><span class="line">        <span class="comment">// message</span></span><br><span class="line">        String message = packet.getMessage();</span><br><span class="line">        ByteBufferUtils.X.encodeUtf8CharSequence(out, message);</span><br><span class="line">        <span class="comment">// payload</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = serializer.encode(packet.getPayload());</span><br><span class="line">        out.writeInt(bytes.length);</span><br><span class="line">        out.writeBytes(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应<code>Packet</code>解码器<code>ResponseMessagePacketDecoder</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseMessagePacketDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResponseMessagePacket packet = <span class="keyword">new</span> ResponseMessagePacket();</span><br><span class="line">        <span class="comment">// 魔数</span></span><br><span class="line">        packet.setMagicNumber(in.readInt());</span><br><span class="line">        <span class="comment">// 版本</span></span><br><span class="line">        packet.setVersion(in.readInt());</span><br><span class="line">        <span class="comment">// 流水号</span></span><br><span class="line">        <span class="keyword">int</span> serialNumberLength = in.readInt();</span><br><span class="line">        packet.setSerialNumber(in.readCharSequence(serialNumberLength, ProtocolConstant.UTF_8).toString());</span><br><span class="line">        <span class="comment">// 消息类型</span></span><br><span class="line">        <span class="keyword">byte</span> messageTypeByte = in.readByte();</span><br><span class="line">        packet.setMessageType(MessageType.fromValue(messageTypeByte));</span><br><span class="line">        <span class="comment">// 附件</span></span><br><span class="line">        Map&lt;String, String&gt; attachments = Maps.newHashMap();</span><br><span class="line">        packet.setAttachments(attachments);</span><br><span class="line">        <span class="keyword">int</span> attachmentSize = in.readInt();</span><br><span class="line">        <span class="keyword">if</span> (attachmentSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attachmentSize; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> keyLength = in.readInt();</span><br><span class="line">                String key = in.readCharSequence(keyLength, ProtocolConstant.UTF_8).toString();</span><br><span class="line">                <span class="keyword">int</span> valueLength = in.readInt();</span><br><span class="line">                String value = in.readCharSequence(valueLength, ProtocolConstant.UTF_8).toString();</span><br><span class="line">                attachments.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// error code</span></span><br><span class="line">        packet.setErrorCode(in.readLong());</span><br><span class="line">        <span class="comment">// message</span></span><br><span class="line">        <span class="keyword">int</span> messageLength = in.readInt();</span><br><span class="line">        packet.setMessage(in.readCharSequence(messageLength, ProtocolConstant.UTF_8).toString());</span><br><span class="line">        <span class="comment">// payload - ByteBuf实例</span></span><br><span class="line">        <span class="keyword">int</span> payloadLength = in.readInt();</span><br><span class="line">        packet.setPayload(in.readBytes(payloadLength));</span><br><span class="line">        out.add(packet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心的编码解码器已经编写完，接着要注意一下<code>TCP</code>协议二进制包发送的时候只保证了包的发送顺序、确认发送以及重传，无法保证二进制包是否完整（有些博客也称此类场景为粘包、半包等等，其实网络协议里面并没有定义这些术语，估计是有人杜撰出来），因此这里采取了定长帧编码和解码器<code>LengthFieldPrepender</code>和<code>LengthFieldBasedFrameDecoder</code>，简单来说就是在消息帧的开头几位定义了整个帧的长度，读取到整个长度的消息帧才认为是一个完整的二进制报文。举个几个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|&lt;--------packet frame---------&gt;|</span><br><span class="line">| Length Field | Actual Content |</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">Length Field</th><th style="text-align:center">Actual Content</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">abcd</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">throwable</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">14</td><td style="text-align:center">{“name”:“doge”}</td></tr></tbody></table><h2 id="编写测试客户端和服务端">编写测试客户端和服务端</h2><p>客户端代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProtocolClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9092</span>;</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bootstrap.group(workerGroup);</span><br><span class="line">            bootstrap.channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            bootstrap.option(ChannelOption.SO_KEEPALIVE, Boolean.TRUE);</span><br><span class="line">            bootstrap.option(ChannelOption.TCP_NODELAY, Boolean.TRUE);</span><br><span class="line">            bootstrap.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> RequestMessagePacketEncoder(FastJsonSerializer.X));</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> ResponseMessagePacketDecoder());</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> SimpleChannelInboundHandler&lt;ResponseMessagePacket&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ResponseMessagePacket packet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            Object targetPayload = packet.getPayload();</span><br><span class="line">                            <span class="keyword">if</span> (targetPayload <span class="keyword">instanceof</span> ByteBuf) &#123;</span><br><span class="line">                                ByteBuf byteBuf = (ByteBuf) targetPayload;</span><br><span class="line">                                <span class="keyword">int</span> readableByteLength = byteBuf.readableBytes();</span><br><span class="line">                                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readableByteLength];</span><br><span class="line">                                byteBuf.readBytes(bytes);</span><br><span class="line">                                targetPayload = FastJsonSerializer.X.decode(bytes, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                                byteBuf.release();</span><br><span class="line">                            &#125;</span><br><span class="line">                            packet.setPayload(targetPayload);</span><br><span class="line">                            log.info(<span class="string">"接收到来自服务端的响应消息,消息内容:&#123;&#125;"</span>, JSON.toJSONString(packet));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ChannelFuture future = bootstrap.connect(<span class="string">"localhost"</span>, port).sync();</span><br><span class="line">            log.info(<span class="string">"启动NettyClient[&#123;&#125;]成功..."</span>, port);</span><br><span class="line">            Channel channel = future.channel();</span><br><span class="line">            RequestMessagePacket packet = <span class="keyword">new</span> RequestMessagePacket();</span><br><span class="line">            packet.setMagicNumber(ProtocolConstant.MAGIC_NUMBER);</span><br><span class="line">            packet.setVersion(ProtocolConstant.VERSION);</span><br><span class="line">            packet.setSerialNumber(SerialNumberUtils.X.generateSerialNumber());</span><br><span class="line">            packet.setMessageType(MessageType.REQUEST);</span><br><span class="line">            packet.setInterfaceName(<span class="string">"club.throwable.contract.HelloService"</span>);</span><br><span class="line">            packet.setMethodName(<span class="string">"sayHello"</span>);</span><br><span class="line">            packet.setMethodArgumentSignatures(<span class="keyword">new</span> String[]&#123;<span class="string">"java.lang.String"</span>&#125;);</span><br><span class="line">            packet.setMethodArguments(<span class="keyword">new</span> Object[]&#123;<span class="string">"doge"</span>&#125;);</span><br><span class="line">            channel.writeAndFlush(packet);</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProtocolServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9092</span>;</span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldPrepender(<span class="number">4</span>));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> RequestMessagePacketDecoder());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> ResponseMessagePacketEncoder(FastJsonSerializer.X));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> SimpleChannelInboundHandler&lt;RequestMessagePacket&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RequestMessagePacket packet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                                    log.info(<span class="string">"接收到来自客户端的请求消息,消息内容:&#123;&#125;"</span>, JSON.toJSONString(packet));</span><br><span class="line">                                    ResponseMessagePacket response = <span class="keyword">new</span> ResponseMessagePacket();</span><br><span class="line">                                    response.setMagicNumber(packet.getMagicNumber());</span><br><span class="line">                                    response.setVersion(packet.getVersion());</span><br><span class="line">                                    response.setSerialNumber(packet.getSerialNumber());</span><br><span class="line">                                    response.setAttachments(packet.getAttachments());</span><br><span class="line">                                    response.setMessageType(MessageType.RESPONSE);</span><br><span class="line">                                    response.setErrorCode(<span class="number">200L</span>);</span><br><span class="line">                                    response.setMessage(<span class="string">"Success"</span>);</span><br><span class="line">                                    response.setPayload(<span class="string">"&#123;\"name\":\"throwable\"&#125;"</span>);</span><br><span class="line">                                    ctx.writeAndFlush(response);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture future = bootstrap.bind(port).sync();</span><br><span class="line">            log.info(<span class="string">"启动NettyServer[&#123;&#125;]成功..."</span>, port);</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在测试的环境中，最大的消息帧长度暂时定义为1024。先启动服务端，再启动客户端，见控制台输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 服务端</span><br><span class="line">22:29:32.596 [main] INFO club.throwable.protocol.TestProtocolServer - 启动NettyServer[9092]成功...</span><br><span class="line">...省略其他日志...</span><br><span class="line">22:29:53.538 [nioEventLoopGroup-3-1] INFO club.throwable.protocol.TestProtocolServer - 接收到来自客户端的请求消息,消息内容:&#123;"attachments":&#123;&#125;,"interfaceName":"club.throwable.contract.HelloService","magicNumber":10086,"messageType":"REQUEST","methodArgumentSignatures":["java.lang.String"],"methodArguments":[&#123;"contiguous":true,"direct":true,"readOnly":false,"readable":true,"writable":false&#125;],"methodName":"sayHello","serialNumber":"7f992c7cf9f445258601def1cac9bec0","version":1&#125;</span><br><span class="line"></span><br><span class="line">// 客户端</span><br><span class="line">22:31:28.360 [main] INFO club.throwable.protocol.TestProtocolClient - 启动NettyClient[9092]成功...</span><br><span class="line">...省略其他日志...</span><br><span class="line">22:31:39.320 [nioEventLoopGroup-2-1] INFO club.throwable.protocol.TestProtocolClient - 接收到来自服务端的响应消息,消息内容:&#123;"attachments":&#123;&#125;,"errorCode":200,"magicNumber":10086,"message":"Success","messageType":"RESPONSE","payload":"&#123;\"name\":\"throwable\"&#125;","serialNumber":"320808e709b34edbb91ba557780b58ad","version":1&#125;</span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p>一个基于<code>Netty</code>实现的简单的自定义协议基本完成，但是要编写一个优秀的<code>RPC</code>框架，还需要做服务端的宿主类和目标方法查询、调用，客户端的动态代理，<code>Netty</code>的<code>NIO</code>模式下的同步调用改造，心跳处理，异常处理等等。后面会使用多篇文章逐个问题解决，网络编程其实挺好玩了，就是编码量会比较大<code>(゜-゜)つロ</code>。</p><p><code>Demo</code>项目：</p><ul><li><a href="https://github.com/zjcscut/netty-tutorials/tree/master/ch0-custom-rpc-protocol" target="_blank" rel="noopener">ch0-custom-rpc-protocol</a></li></ul><p>（e-a-20200112 c-1-d）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近对网络编程方面比较有兴趣，在微服务实践上也用到了相对主流的&lt;code&gt;RPC&lt;/code&gt;框架如&lt;code&gt;Spring Cloud Gateway&lt;/code&gt;底层也切换为&lt;code&gt;Reactor-Netty&lt;/code&gt;，像&lt;code&gt;Redisson&lt;/code&gt;底层也是使用&lt;code&gt;Netty&lt;/code&gt;封装通讯协议，最近调研和准备使用的&lt;code&gt;SOFARpc&lt;/code&gt;也是基于&lt;code&gt;Netty&lt;/code&gt;封装实现了多种协议的兼容。因此，基于&lt;code&gt;Netty&lt;/code&gt;造一个轮子，在&lt;code&gt;SpringBoot&lt;/code&gt;的加持下，实现一个轻量级的&lt;code&gt;RPC&lt;/code&gt;框架。这篇博文介绍的是&lt;code&gt;RPC&lt;/code&gt;框架协议的定义以及对应的编码解码处理的实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Netty" scheme="http://throwable.club/blog/categories/Netty/"/>
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Netty/Java/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Netty" scheme="http://throwable.club/blog/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>SofaBoot使用Nacos进行服务注册发现</title>
    <link href="http://throwable.club/2020/01/01/sofa-boot-nacos-get-start/"/>
    <id>http://throwable.club/2020/01/01/sofa-boot-nacos-get-start/</id>
    <published>2020-01-01T15:30:41.000Z</published>
    <updated>2020-01-02T09:35:56.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近创业公司的项目组基于业务需要，开发一套新的微服务，考虑到选用的组件必须是主流、社区活跃、生态完善以及方便迁移到云上等因素，引入了<code>SOFAStack</code>全家桶。微服务开发里面，一个很重要的功能就是服务发现与注册，笔者花了点时间做了一个<code>SOFABoot</code>、<code>SOFARpc</code>结合<code>Nacos</code>实现微服务发现注册与远程调用的示例。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-f-s-n-1.png" alt=""></p><a id="more"></a><h2 id="依赖版本踩坑">依赖版本踩坑</h2><p>笔者花了点时间去尝试<code>SOFABoot</code>、<code>SOFARpc</code>结合<code>Nacos</code>客户端的依赖版本关系，截止本文编写完成的时候（2020-01-01），<code>sofaboot-dependencies</code>的最新版本为<code>3.2.1</code>，对应于<code>SOFABoot-3.2.1</code>、<code>SOFARpc-5.6.3</code>和<code>SpringBoot-2.1.x.RELEASE</code>。在这两个最新版本的项目中，无论引入什么版本的<code>nacos-clinet</code>，都没有办法向<code>Nacos-Server</code>注册服务信息。关于这一点，笔者曾经从<code>Issues</code>里面查找相关的内容，暂时无果，于是把示例项目分享给社区的大佬进行分析，如果有解决方案，会在这篇博文中更新。试出来的可用的版本组合为：</p><ul><li><code>sofaboot-dependencies:3.2.0</code></li><li><code>spring-boot-dependencies:2.1.0.RELEASE</code></li><li><code>nacos-api:0.6.0</code>和<code>nacos-client:0.6.0</code></li></ul><p>引入依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa.boot.version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">sofa.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nacos.version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">nacos.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sofaboot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sofa.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>healthcheck-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;nacos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;nacos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写服务提供方和服务消费方代码">编写服务提供方和服务消费方代码</h2><p>这里有一个前提，需要启动一个<code>Nacos-Server</code>，为了方便起见，使用单机模式本地启动即可，那么服务注册的地址就是<code>http://127.0.0.1:8848</code>。示例项目的结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  └─main</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─club</span><br><span class="line">│      │      └─throwable</span><br><span class="line">│      │          ├─client</span><br><span class="line">│      │          │      ClientApplication.java</span><br><span class="line">│      │          │      </span><br><span class="line">│      │          ├─contract</span><br><span class="line">│      │          │      HelloService.java</span><br><span class="line">│      │          │      </span><br><span class="line">│      │          └─server</span><br><span class="line">│      │                 DefaultHelloService.java</span><br><span class="line">│      │                 ServerApplication.java</span><br><span class="line">│      │                  </span><br><span class="line">│      └─resources</span><br><span class="line">│              application-client.properties</span><br><span class="line">│              application-server.properties</span><br></pre></td></tr></table></figure><p>其中<code>contract</code>为契约包，可以提供给客户端和服务端使用，<code>client</code>包里面编写客户端（<code>comsumer</code>）的代码，而<code>server</code>包里面编写服务端（<code>provider</code>）的代码。</p><p>契约接口<code>HelloService</code>很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务提供方需要实现此接口，实现类是<code>DefaultHelloService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@SofaService</span>(interfaceType = HelloService<span class="class">.<span class="keyword">class</span>, <span class="title">bindings</span> </span>= &#123;</span><br><span class="line">        <span class="meta">@SofaServiceBinding</span>(bindingType = <span class="string">"bolt"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHelloService</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s say hello!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的服务协议绑定类型为<code>bolt</code>，是官方示例建议的协议，当然还有<code>dubbo</code>、<code>http</code>等等，可以混合配置。接着编写服务提供方启动类<code>ServerApplication</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = &#123;<span class="string">"club.throwable.server"</span>, <span class="string">"club.throwable.contract"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务提供方应用的配置文件<code>application-server.properties</code>如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">sofa-rpc-provider</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9092</span></span><br><span class="line"><span class="comment"># 用Nacos做注册中心</span></span><br><span class="line"><span class="meta">com.alipay.sofa.rpc.registry-address</span>=<span class="string">nacos://127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>使用<code>spring.profiles.active=server</code>启动<code>ServerApplication</code>，启动成功后用浏览器打开<code>Nacos-Console</code>：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-f-s-n-2.png" alt=""></p><p>可见目前<code>sofa-rpc-provider</code>服务已经成功注册到<code>Nacos-Server</code>。接着编写客户端代码，为了方便起见，所有的代码编写在启动类<code>ClientApplication</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = &#123;<span class="string">"club.throwable.client"</span>, <span class="string">"club.throwable.contract"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SofaReference</span>(binding = <span class="meta">@SofaReferenceBinding</span>(bindingType = <span class="string">"bolt"</span>))</span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"调用HelloService#sayHello(),结果:&#123;&#125;"</span>, helloService.sayHello(<span class="string">"throwable"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务消费方的配置文件<code>application-client.properties</code>如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">sofa-rpc-consumer</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9091</span></span><br><span class="line"><span class="comment"># 用Nacos做注册中心</span></span><br><span class="line"><span class="meta">com.alipay.sofa.rpc.registry-address</span>=<span class="string">nacos://127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>使用<code>spring.profiles.active=client</code>启动<code>ClientApplication</code>，启动完成后控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-01-02 17:07:58.782  INFO 2900 --- [main] club.throwable.client.ClientApplication  : 调用HelloService#sayHello(),结果:throwable say hello!</span><br></pre></td></tr></table></figure><p>基本原理如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-f-s-n-3.png" alt=""></p><h2 id="小结">小结</h2><p><code>SOFABoot</code>、<code>SOFARpc</code>底层依赖于<code>Spring</code>容器，可以跟随<code>SpringBoot</code>版本迭代升级，底层通讯使用<code>Netty</code>，在性能上有保障，而且真正做到了兼容<code>HTTP</code>、<code>Dubbo</code>、<code>Service Mesh</code>（后面应该会把<code>Service Mesh</code>作为通讯协议进行兼容）等等协议，对于开发者而言相对友好，学习成本低，做到真正的开箱添加少量配置即可使用。除了目前发现依赖版本的问题，暂时没有大的坑，尝尝鲜的感觉还是挺不错的。</p><p>示例项目：</p><ul><li><a href="https://github.com/zjcscut/framework-mesh/tree/master/sofa-boot-nacos" target="_blank" rel="noopener">sofa-boot-nacos</a></li></ul><p>（本文完 c-1-d e-a-20200101）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近创业公司的项目组基于业务需要，开发一套新的微服务，考虑到选用的组件必须是主流、社区活跃、生态完善以及方便迁移到云上等因素，引入了&lt;code&gt;SOFAStack&lt;/code&gt;全家桶。微服务开发里面，一个很重要的功能就是服务发现与注册，笔者花了点时间做了一个&lt;code&gt;SOFABoot&lt;/code&gt;、&lt;code&gt;SOFARpc&lt;/code&gt;结合&lt;code&gt;Nacos&lt;/code&gt;实现微服务发现注册与远程调用的示例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-f-s-n-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SOFAStack" scheme="http://throwable.club/blog/categories/SOFAStack/"/>
    
      <category term="Nacos" scheme="http://throwable.club/blog/categories/SOFAStack/Nacos/"/>
    
    
      <category term="SOFAStack" scheme="http://throwable.club/blog/tags/SOFAStack/"/>
    
      <category term="Nacos" scheme="http://throwable.club/blog/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Nacos进行服务注册发现与配置管理</title>
    <link href="http://throwable.club/2020/01/01/spring-boot-nacos-get-start/"/>
    <id>http://throwable.club/2020/01/01/spring-boot-nacos-get-start/</id>
    <published>2020-01-01T15:20:41.000Z</published>
    <updated>2020-01-02T03:31:05.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近由于业务发展，需要调研一套完善和主流的基础架构，进行中台化（微服务）的实施，考虑到技术栈切换到<a href="https://www.sofastack.tech" target="_blank" rel="noopener"><code>SOFAStack</code></a>。既然整个体系都切换到蚂蚁金服的技术栈，那么自然考虑一些基础组件如服务注册发现、配置管理等都切换为阿里的技术栈。考虑到目前比较热的服务发现组件是<a href="https://nacos.io" target="_blank" rel="noopener"><code>Nacos</code></a>，需要调研<code>SpringBoot</code>服务接入<code>Nacos</code>的可行性，为以后强制要求新服务使用<code>SOFAStack</code> + <code>Nacos</code>的技术栈进行服务开发打下基础。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-1.png" alt=""></p><a id="more"></a><h2 id="Nacos简介">Nacos简介</h2><p>下面的简介来源于<code>Nacos</code>的官网：</p><p><code>Nacos</code>致力于帮助您发现、配置和管理微服务。<code>Nacos</code>提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p><code>Nacos</code>帮助您更敏捷和容易地构建、交付和管理微服务平台。<code>Nacos</code>是构建以<strong>服务</strong>为中心的现代应用架构（例如微服务范式、云原生范式）的服务基础设施。</p><p><code>Nacos</code>地图：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-2.png" alt=""></p><p><code>Nacos</code>生态图：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-3.png" alt=""></p><p>从<code>Nacos</code>提供的发展地图来看，它基本提供了目前微服务实施中一些核心问题：监控、服务发现注册、配置灰度发布、配置回滚等等。另外，它在生态上能够融入目前主流的<code>K8S</code>、<code>Docker</code>、<code>SpringCloud</code>、<code>Consul</code>、<code>Zookeeper</code>等等（有点像屏蔽底层细节，只需少量配置就可以切换底层架构的实现），这一点十分重要。目前<code>Nacos</code>在阿里云上提供了商用版本（记得有前辈说过开源的终极目标就是商用，大概如此）。如果在项目中使用的是<code>SpringCloud</code>全家桶，引入<code>Nacos</code>以及它和<code>SpringCloud</code>之间的胶水层，可以完全替代<code>Eureka</code>组件的功能，替代和强化部分<code>Spring Cloud Config</code>的功能。</p><h2 id="Nacos服务部署">Nacos服务部署</h2><p><code>Nacos-Server</code>部署相对简单，它的发布版本见<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">Github的Releases页面</a>。下载完成后进行解压，<code>Windows</code>系下启动<code>Nacos-Server</code>只需进入解压后的<code>${解压目录}\nacos\bin</code>目录，执行<code>startup.cmd</code>即可，服务启动成功的结果如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-4.png" alt=""></p><p><strong>单机模式在不修改配置的前提下直接启动</strong>，使用的是内存数据库，重启后数据会被清空。如果需要数据持久化，则需要建立数据库，具体的步骤是：</p><ul><li>建表的脚本在<code>${解压目录}\nacos\conf</code>目录下，见<code>schema.sql</code>和<code>nacos-mysql.sql</code>两个文件。</li><li>自行通过建表的脚本建立数据库。</li><li>需要指定数据库，则需要修改<code>${解压目录}\nacos\conf\application.properties</code>，在文件的尾部追加数据源的连接配置，下面是官方给出的多数据源的例子：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要确保多个数据源的用户名和密码一致</span></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">2</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.url.1</span>=<span class="string">jdbc:mysql://11.163.152.9:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">nacos_devtest</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">nacos</span></span><br></pre></td></tr></table></figure><p>测试获取已经注册的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ curl -X GET http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName</span><br><span class="line">&#123;"hosts":[],"name":"DEFAULT_GROUP@@nacos.naming.serviceName","clusters":""&#125;</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:8848/nacos</code>即可打开<code>Nacos-Console</code>，初始的登录账号和密码都是<code>nacos</code>：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-5.png" alt=""></p><p>更多运维部署相关的内容见文档<strong>运维指南</strong>中的一节。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-6.png" alt=""></p><h2 id="SpirngBoot应用使用Nacos作为注册中心">SpirngBoot应用使用Nacos作为注册中心</h2><p><code>SpringBoot</code>应用使用<code>Nacos</code>作为注册中心需要引入依赖<code>nacos-discovery-spring-boot-starter</code>，笔者编写本文的时候（2020-01-01），该依赖的最新版本为<code>0.2.4</code>，对应于<code>SpringBoot</code>的版本为<code>2.0.3.RELEASE</code>，引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了方便起见，笔者把控制器、服务注册的代码都写在启动类<code>ProvideApplication</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"club.throwable.provide"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvideApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NacosInjected</span></span><br><span class="line">    <span class="keyword">private</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProvideApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s say hello!"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 通过Naming服务注册实例到注册中心</span></span><br><span class="line">        namingService.registerInstance(applicationName, <span class="string">"127.0.0.1"</span>, serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件<code>application-provide.properties</code>内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">provide-service</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9092</span></span><br><span class="line"><span class="meta">nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>使用<code>spring.profiles.active=provide</code>启动<code>ProvideApplication</code>，启动成功后用浏览器打开<code>Nacos-Console</code>：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-7.png" alt=""></p><p>暂时可知服务的提供方已经注册成功。接着编写服务的消费方代码，引入的最小依赖和服务提供方完全一致，编写启动类<code>ConsumeApplication</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"club.throwable.consume"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NacosInjected</span></span><br><span class="line">    <span class="keyword">private</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumeApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 根据服务名从注册中心获取一个健康的服务实例</span></span><br><span class="line">        Instance instance = namingService.selectOneHealthyInstance(<span class="string">"provide-service"</span>);</span><br><span class="line">        <span class="comment">// 这里只是为了方便才新建RestTemplate实例</span></span><br><span class="line">        RestTemplate template = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        String url = String.format(<span class="string">"http://%s:%d/hello?name=throwable"</span>, instance.getIp(), instance.getPort());</span><br><span class="line">        String result = template.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">"请求URL:%s,响应结果:%s"</span>, url, result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费服务的配置文件<code>application-consume.properties</code>内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consume-service</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9091</span></span><br><span class="line"><span class="meta">nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>使用<code>spring.profiles.active=consume</code>启动<code>ConsumeApplication</code>，<code>CommandLineRunner</code>执行完毕后控制台打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求URL:http://127.0.0.1:9092/hello?name=throwable,响应结果:throwable say hello!</span><br></pre></td></tr></table></figure><p>这种方式使用起来会感觉模板代码比较多，不够简洁。如果在<code>SpringCloud</code>体系中，结合<code>Feign</code>客户端则可以省略这些模板代码。</p><h2 id="SpirngBoot应用使用Nacos管理配置">SpirngBoot应用使用Nacos管理配置</h2><p>如果使用<code>Nacos</code>进行配置管理，则需要引入<code>nacos-config-spring-boot-starter</code>依赖，笔者编写本文的时候（2020-01-01），该依赖的最新版本为<code>0.2.4</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-config-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个启动类<code>ConfigApplication</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@NacosPropertySource</span>(dataId = <span class="string">"example"</span>, autoRefreshed = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"club.throwable.config"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NacosValue</span>(value = <span class="string">"$&#123;counter:0&#125;"</span>, autoRefreshed = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">public</span> Long counter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"Counter value:%d"</span>, counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者定义了一个长整型的计数器，设置了<code>autoRefreshed</code>（自动刷新）为<code>true</code>，新建一个配置文件<code>application-config.properties</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">config-service</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9093</span></span><br><span class="line"><span class="meta">nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>使用<code>spring.profiles.active=config</code>启动<code>ConfigApplication</code>，启动成功后通过<code>CURL</code>调用下面的接口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ curl -X GET http://127.0.0.1:9093/get</span><br><span class="line">Counter value:0</span><br></pre></td></tr></table></figure><p>接着通过<code>Nacos-Console</code>添加一个配置：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-9.png" alt=""></p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-8.png" alt=""></p><p>点击发布按钮后再次调用接口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ curl -X GET http://127.0.0.1:9093/get</span><br><span class="line">Counter value:10086</span><br></pre></td></tr></table></figure><p>可见计数器的值已经动态刷新。配置项里面还有很多高级配置如：指定配置生效的服务、<code>Beta</code>发布等等，可以按照合适的场景进行设置。</p><p>另外，<code>Nacos Server</code>提供<code>Open API</code>从而可以使用<code>HTTP</code>客户端就可以轻松进行配置查询、配置更新发布等操作（<strong>目前这些API没有做鉴权，社区也有人曾提出这样会引发安全性问题，Nacos官方已经立项在后续新版本中加入鉴权的功能，目前建议屏蔽或者仅允许内网访问这些Open API</strong>）：</p><ul><li>获取配置：<code>curl -X GET http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=${DATA_ID}&amp;group=${GROUP}</code></li><li>发布配置：<code>curl -X POST http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=${DATA_ID}&amp;group=${GROUP}&amp;content=${CONFIG_CONTENT}</code></li></ul><h2 id="小结">小结</h2><p>本文只是简单介绍了<code>SpringBoot</code>中使用<code>Nacos</code>作为注册中心以及进行配置管理。<code>Nacos</code>项目<code>Github</code>仓库当前（2020-01-01）的<code>star</code>数已经接近10000，社区也十分活跃，<code>Issues</code>和交流群的响应都十分迅速。加之<code>Netflix</code>的部分开源产品如<code>Eureka</code>、<code>Hystrix</code>等已经停止迭代，但<code>Nacos</code>还在飞速迭代，甚至已经在阿里云衍生出商业版本，所以笔者认为<code>Nacos</code>值得使用，在相对熟悉它的大部分特性之后会付之于生产环境中使用。</p><p>参考资料：</p><ul><li><a href="https://nacos.io/zh-cn/index.html" target="_blank" rel="noopener">Nacos文档</a></li></ul><p>本文的<code>Demo</code>项目：</p><ul><li><a href="https://github.com/zjcscut/framework-mesh/tree/master/spring-boot-nacos" target="_blank" rel="noopener">spring-boot-nacos</a></li></ul><p>下一篇博文会介绍一下<code>SOFAStack</code>中基于<code>SOFABoot</code>、<code>SOFARpc</code>以及<code>Nacos</code>等组件作为基础架构搭建一套微服务的详细过程。</p><p>（本文完 c-2-d e-a-20200101 23:11）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近由于业务发展，需要调研一套完善和主流的基础架构，进行中台化（微服务）的实施，考虑到技术栈切换到&lt;a href=&quot;https://www.sofastack.tech&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;SOFAStack&lt;/code&gt;&lt;/a&gt;。既然整个体系都切换到蚂蚁金服的技术栈，那么自然考虑一些基础组件如服务注册发现、配置管理等都切换为阿里的技术栈。考虑到目前比较热的服务发现组件是&lt;a href=&quot;https://nacos.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Nacos&lt;/code&gt;&lt;/a&gt;，需要调研&lt;code&gt;SpringBoot&lt;/code&gt;服务接入&lt;code&gt;Nacos&lt;/code&gt;的可行性，为以后强制要求新服务使用&lt;code&gt;SOFAStack&lt;/code&gt; + &lt;code&gt;Nacos&lt;/code&gt;的技术栈进行服务开发打下基础。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/202001/s-b-n-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://throwable.club/blog/categories/SpringBoot/"/>
    
      <category term="Nacos" scheme="http://throwable.club/blog/categories/SpringBoot/Nacos/"/>
    
    
      <category term="Nacos" scheme="http://throwable.club/blog/tags/Nacos/"/>
    
      <category term="SpringBoot" scheme="http://throwable.club/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Java内省Introspector</title>
    <link href="http://throwable.club/2019/12/25/java-introspector-usage/"/>
    <id>http://throwable.club/2019/12/25/java-introspector-usage/</id>
    <published>2019-12-25T00:45:06.000Z</published>
    <updated>2020-01-18T07:07:04.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>这篇文章主要分析一下<code>Introspector</code>(内省)的用法。<code>Introspector</code>是一个专门处理<code>JavaBean</code>的工具类，用来获取<code>JavaBean</code>里描述符号，常用的<code>JavaBean</code>的描述符号相关类有<code>BeanInfo</code>、<code>PropertyDescriptor</code>，<code>MethodDescriptor</code>、<code>BeanDescriptor</code>、<code>EventSetDescriptor</code>和<code>ParameterDescriptor</code>。下面会慢慢分析这些类的使用方式，以及<code>Introspector</code>的一些特点。</p><a id="more"></a><h2 id="JavaBean是什么">JavaBean是什么</h2><p><code>JavaBean</code>是一种特殊（其实说普通也可以，也不是十分特殊）的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则（字段都是私有，每个字段具备<code>Setter</code>和<code>Getter</code>方法，方法和字段命名满足首字母小写驼峰命名规则）。如果在两个模块之间传递信息，可以将信息封装进<code>JavaBean</code>中，这种对象称为值对象(<code>Value Object</code>)或者<code>VO</code>。这些信息储存在类的私有变量中，通过<code>Setter</code>、<code>Getter</code>方法获得。<code>JavaBean</code>的信息在<code>Introspector</code>里对应的概念是<code>BeanInfo</code>，它包含了<code>JavaBean</code>所有的<code>Descriptor</code>(描述符)，主要有<code>PropertyDescriptor</code>，<code>MethodDescriptor</code>(<code>MethodDescriptor</code>里面包含<code>ParameterDescriptor</code>)、<code>BeanDescriptor</code>和<code>EventSetDescriptor</code>。</p><h2 id="属性Field和属性描述PropertiesDescriptor的区别">属性Field和属性描述PropertiesDescriptor的区别</h2><p>如果是严格的<code>JavaBean</code>(<code>Field</code>名称不重复，并且<code>Field</code>具备<code>Setter</code>和<code>Getter</code>方法)，它的<code>PropertyDescriptor</code>会通过解析<code>Setter</code>和<code>Getter</code>方法，合并解析结果，最终得到对应的<code>PropertyDescriptor</code>实例。所以<code>PropertyDescriptor</code>包含了属性名称和属性的<code>Setter</code>和<code>Getter</code>方法(如果存在的话)。</p><h2 id="内省Introspector和反射Reflection的区别">内省Introspector和反射Reflection的区别</h2><ul><li><code>Reflection</code>：反射就是运行时获取一个类的所有信息，可以获取到类的所有定义的信息（包括成员变量，成员方法，构造器等）可以操纵类的字段、方法、构造器等部分。可以想象为镜面反射或者照镜子，这样的操作是带有客观色彩的，也就是反射获取到的类信息是必定正确的。</li><li><code>Introspector</code>：内省基于反射实现，主要用于操作<code>JavaBean</code>，基于<code>JavaBean</code>的规范进行<code>Bean</code>信息描述符的解析，依据于类的<code>Setter</code>和<code>Getter</code>方法，可以获取到类的描述符。可以想象为“自我反省”，这样的操作带有主观的色彩，不一定是正确的(如果一个类中的属性没有<code>Setter</code>和<code>Getter</code>方法，无法使用内省)。</li></ul><h2 id="常用的内省相关类">常用的内省相关类</h2><p>主要介绍一下几个核心类所提供的方法。</p><h3 id="Introspector">Introspector</h3><p><code>Introspector</code>类似于<code>BeanInfo</code>的静态工厂类，主要是提供静态方法通过<code>Class</code>实例获取到<code>BeanInfo</code>，得到<code>BeanInfo</code>之后，就能够获取到其他描述符。主要方法：</p><ul><li><code>public static BeanInfo getBeanInfo(Class&lt;?&gt; beanClass)</code>：通过<code>Class</code>实例获取到<code>BeanInfo</code>实例。</li></ul><h3 id="BeanInfo">BeanInfo</h3><p><code>BeanInfo</code>是一个接口，具体实现是<code>GenericBeanInfo</code>，通过这个接口可以获取一个类的各种类型的描述符。主要方法：</p><ul><li><code>BeanDescriptor getBeanDescriptor()</code>：获取<code>JavaBean</code>描述符。</li><li><code>EventSetDescriptor[] getEventSetDescriptors()</code>：获取<code>JavaBean</code>的所有的<code>EventSetDescriptor</code>。</li><li><code>PropertyDescriptor[] getPropertyDescriptors()</code>：获取<code>JavaBean</code>的所有的<code>PropertyDescriptor</code>。</li><li><code>MethodDescriptor[] getMethodDescriptors()</code>：获取<code>JavaBean</code>的所有的<code>MethodDescriptor</code>。</li></ul><p>这里要注意一点，通过<code>BeanInfo#getPropertyDescriptors()</code>获取到的<code>PropertyDescriptor</code>数组中，除了<code>Bean</code>属性的之外，还会带有一个属性名为<code>class</code>的<code>PropertyDescriptor</code>实例，它的来源是<code>Class</code>的<code>getClass</code>方法，如果不需要这个属性那么最好判断后过滤。</p><h3 id="PropertyDescriptor">PropertyDescriptor</h3><p><code>PropertyDescriptor</code>类表示<code>JavaBean</code>类通过存储器(<code>Setter</code>和<code>Getter</code>)导出一个属性，它应该是内省体系中最常见的类。主要方法：</p><ul><li><code>synchronized Class&lt;?&gt; getPropertyType()</code>：获得属性的<code>Class</code>对象。</li><li><code>synchronized Method getReadMethod()</code>：获得用于读取属性值的方法；</li><li><code>synchronized Method getWriteMethod()</code>：获得用于写入属性值的方法。</li><li><code>int hashCode()</code>：获取对象的哈希值。</li><li><code>synchronized void setReadMethod(Method readMethod)</code>：设置用于读取属性(<code>Getter</code>)值的方法。</li><li><code>synchronized void setWriteMethod(Method writeMethod)</code>：设置用于写入属性值(<code>Setter</code>)的方法。</li></ul><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BeanInfo beanInfo = Introspector.getBeanInfo(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">        <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"class"</span>.equals(propertyDescriptor.getName())) &#123;</span><br><span class="line">                System.out.println(propertyDescriptor.getName());</span><br><span class="line">                System.out.println(propertyDescriptor.getWriteMethod().getName());</span><br><span class="line">                System.out.println(propertyDescriptor.getReadMethod().getName());</span><br><span class="line">                System.out.println(<span class="string">"======================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Long id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">age</span><br><span class="line">setAge</span><br><span class="line">getAge</span><br><span class="line">=======================</span><br><span class="line">id</span><br><span class="line">setId</span><br><span class="line">getId</span><br><span class="line">=======================</span><br><span class="line">name</span><br><span class="line">setName</span><br><span class="line">getName</span><br><span class="line">=======================</span><br></pre></td></tr></table></figure><h2 id="不正当使用Introspector会导致内存溢出">不正当使用Introspector会导致内存溢出</h2><p>如果框架或者程序用到了<code>JavaBeans Introspector</code>，那么就相当于启用了一个系统级别的缓存，这个缓存会存放一些曾加载并分析过的<code>Javabean</code>的引用，当<code>web</code>服务器关闭的时候，由于这个缓存中存放着这些<code>Javabean</code>的引用，所以垃圾回收器不能对<code>Web</code>容器中的<code>JavaBean</code>对象进行回收，导致内存越来越大。还有一点值得注意，清除<code>Introspector</code>缓存的唯一方式是刷新整个缓存缓冲区，这是因为<code>JDK</code>没法判断哪些是属于当前的应用的引用，所以刷新整个<code>Introspector</code>缓存缓冲区会导致把服务器的所有应用的<code>Introspector</code>缓存都删掉。<code>Spring</code>中提供的<code>org.springframework.web.util.IntrospectorCleanupListener</code>就是为了解决这个问题，它会在<code>Web</code>服务器停止的时候，清理一下这个<code>Introspector</code>缓存，使那些<code>Javabean</code>能被垃圾回收器正确回收。</p><p>也就是说<code>JDK</code>的<code>Introspector</code>缓存管理是有一定缺陷的。但是如果使用在<code>Spring</code>体系则不会出现这种问题，因为<code>Spring</code>把<code>Introspector</code>缓存的管理移交到<code>Spring</code>自身而不是<code>JDK</code>（或者在<code>Web</code>容器销毁后完全不管），在加载并分析完所有类之后，会针对类加载器对<code>Introspector</code>缓存进行清理，避免内存泄漏的问题，详情可以看<code>CachedIntrospectionResults</code>和<code>SpringBoot</code>刷新上下文的方法<code>AbstractApplicationContext#refresh()</code>中<code>finally</code>代码块中存在清理缓存的方法<code>AbstractApplicationContext#resetCommonCaches();</code>。但是有很多程序和框架在使用了<code>JavaBeans Introspector</code>之后，都没有进行清理工作，比如<code>Quartz、Struts</code>等，这类操作会成为内存泄漏的隐患。</p><h1>小结</h1><ul><li>在标准的<code>JavaBean</code>中，可以考虑使用<code>Introspector</code>体系解析<code>JavaBean</code>，主要是方便使用反射之前的时候快速获取到<code>JavaBean</code>的<code>Setter</code>和<code>Getter</code>方法。</li><li>在<code>Spring</code>体系中，为了防止<code>JDK</code>对内省信息的缓存无法被垃圾回收机制回收导致内存溢出，主要的操作除了可以通过配置<code>IntrospectorCleanupListener</code>预防，还有另外一种方式，就是通过<code>CachedIntrospectionResults</code>类自行管理<code>Introspector</code>中的缓存(这种方式才是优雅的方式，这样可以避免刷新整个<code>Introspector</code>的缓存缓冲区而导致其他应用的<code>Introspector</code>也被清空)，<strong>也就是把Jdk自行管理的Introspector相关缓存交给Spring自己去管理</strong>。在<code>SpringBoot</code>刷新上下文的方法<code>AbstractApplicationContext#refresh()</code>中finally代码块中存在清理缓存的方法<code>AbstractApplicationContext#resetCommonCaches();</code>，里面调用到的<code>CachedIntrospectionResults#clearClassLoader(getClassLoader())</code>方法就是清理指定的<code>ClassLoader</code>下的所有<code>Introspector</code>中的缓存的引用。</li></ul><p>（本文完 e-a-20191225 c-1-d 更新了博客主题，感觉比以前好看一点点…）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;这篇文章主要分析一下&lt;code&gt;Introspector&lt;/code&gt;(内省)的用法。&lt;code&gt;Introspector&lt;/code&gt;是一个专门处理&lt;code&gt;JavaBean&lt;/code&gt;的工具类，用来获取&lt;code&gt;JavaBean&lt;/code&gt;里描述符号，常用的&lt;code&gt;JavaBean&lt;/code&gt;的描述符号相关类有&lt;code&gt;BeanInfo&lt;/code&gt;、&lt;code&gt;PropertyDescriptor&lt;/code&gt;，&lt;code&gt;MethodDescriptor&lt;/code&gt;、&lt;code&gt;BeanDescriptor&lt;/code&gt;、&lt;code&gt;EventSetDescriptor&lt;/code&gt;和&lt;code&gt;ParameterDescriptor&lt;/code&gt;。下面会慢慢分析这些类的使用方式，以及&lt;code&gt;Introspector&lt;/code&gt;的一些特点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://throwable.club/blog/categories/Java/"/>
    
      <category term="Introspector" scheme="http://throwable.club/blog/categories/Java/Introspector/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Introspector" scheme="http://throwable.club/blog/tags/Introspector/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基本环境变量与依赖管理</title>
    <link href="http://throwable.club/2019/12/23/golang-module-usage/"/>
    <id>http://throwable.club/2019/12/23/golang-module-usage/</id>
    <published>2019-12-22T16:29:00.000Z</published>
    <updated>2019-12-22T16:36:18.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近开始系统学习一下<code>Golang</code>这么新语言，记录一下它的基本环境变量配置以及依赖管理方式。编写本文的时候使用的<code>Golang</code>版本为<code>go1.13.5 windows/amd64</code>，其他版本不一定保证适合本文的内容。因为习惯，可能有时候把<code>Go</code>语言称为<code>Go</code>，有时候称为<code>Golang</code>。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/Golang.jpg" alt=""></p><a id="more"></a><h2 id="理解一下Golang的环境变量">理解一下Golang的环境变量</h2><p>安装完<code>Golang</code>之后，可以通过<code>go env</code>命令查看环境变量配置，下面是笔者执行此命令的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">λ go env</span><br><span class="line">set GO111MODULE=</span><br><span class="line">set GOARCH=amd64</span><br><span class="line">set GOBIN=</span><br><span class="line">set GOCACHE=C:\Users\doge\AppData\Local\go-build</span><br><span class="line">set GOENV=C:\Users\doge\AppData\Roaming\go\env</span><br><span class="line">set GOEXE=.exe</span><br><span class="line">set GOFLAGS=</span><br><span class="line">set GOHOSTARCH=amd64</span><br><span class="line">set GOHOSTOS=windows</span><br><span class="line">set GONOPROXY=</span><br><span class="line">set GONOSUMDB=</span><br><span class="line">set GOOS=windows</span><br><span class="line">set GOPATH=C:\Users\doge\go</span><br><span class="line">set GOPRIVATE=</span><br><span class="line">set GOPROXY=https://goproxy.cn,direct</span><br><span class="line">set GOROOT=I:\Environment\Go</span><br><span class="line">set GOSUMDB=sum.golang.org</span><br><span class="line">set GOTMPDIR=</span><br><span class="line">set GOTOOLDIR=I:\Environment\Go\pkg\tool\windows_amd64</span><br><span class="line">set GCCGO=gccgo</span><br><span class="line">set AR=ar</span><br><span class="line">set CC=gcc</span><br><span class="line">set CXX=g++</span><br><span class="line">set CGO_ENABLED=1</span><br><span class="line">set GOMOD=</span><br><span class="line">set CGO_CFLAGS=-g -O2</span><br><span class="line">set CGO_CPPFLAGS=</span><br><span class="line">set CGO_CXXFLAGS=-g -O2</span><br><span class="line">set CGO_FFLAGS=-g -O2</span><br><span class="line">set CGO_LDFLAGS=-g -O2</span><br><span class="line">set PKG_CONFIG=pkg-config</span><br><span class="line">set GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\Users\doge\AppData\Local\Temp\go-build779409438=/tmp/go-build -gno-record-gcc-switches</span><br></pre></td></tr></table></figure><p>在日常开发中，我们需要重点关注<code>GOPROXY</code>、<code>GOROOT</code>、<code>GOPATH</code>和<code>GOBIN</code>，其他配置项可以在需要的时候再查询文档进行配置。</p><h3 id="GOPROXY">GOPROXY</h3><p><code>GOPROXY</code>就是设置<code>Golang</code>的全局代理。在下载依赖包的时候，一般是访问<code>github</code>的仓库，国内的环境很容易被墙，所以最好设置一个速度快的代理。<code>Go</code>在此版本中<code>GOPROXY</code>的默认值为<code>https://proxy.golang.org</code>，国内是无法访问的。因此，这里推荐使用七牛云的代理<a href="https://goproxy.cn" target="_blank" rel="noopener">https://goproxy.cn</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>设置完此代理之后，下载依赖的速度就能相对正常。</p><h3 id="GOROOT">GOROOT</h3><p><code>GOROOT</code>其实就是<code>Golang</code>安装的绝对路径，例如笔者把他安装在<code>I:\Environment\Go</code>目录下，所以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ go env</span><br><span class="line">...</span><br><span class="line">set GOROOT=I:\Environment\Go</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>GOROOT</code>需要加入到系统变量<code>Path</code>里面，添加成功后才能在命令行使用<code>go [Command]</code>。</p><h3 id="GOPATH和GOBIN">GOPATH和GOBIN</h3><p><code>GOPATH</code>可以简单理解为工作目录，如果用过<code>Eclipse</code>，那么<code>GOPATH</code>可以类比为<code>Eclipse</code>中的<code>WorkSpace</code>的概念。<code>GOPATH</code>目录约定由三个子目录：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">  - src  ---  存放源代码，<span class="keyword">go</span> run、<span class="keyword">go</span> install等命令就是在当前的工作路径中执行（也就是这些命令执行的目标文件夹就是这个src文件夹）</span><br><span class="line">  - pkg  ---  存放编译时生成的中间文件</span><br><span class="line">  - bin  ---  存放编译后生成的可执行文件</span><br></pre></td></tr></table></figure><p><code>GOPATH</code>变量可以设置多个值，多个值之间使用特定的分隔符隔开，例如在<code>Windows</code>系统，分隔符是英文的分号<code>;</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">λ go env</span><br><span class="line">...</span><br><span class="line">set GOPATH=C:\Users\doge\go;I:G-Projects</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>值得注意的是：<code>go get</code>命令下载的依赖包会下载在<code>GOPATH</code>指定的第一个值对应的目录中，也就是<code>$Users/$User/go</code>目录下。</p><p><code>GOBIN</code>用于指定<code>go install</code>目标保存路径，目的是避免将所有工作空间的<code>bin</code>路径添加到<code>PATH</code>环境变量中（因此在使用版本控制时，尽量忽略<code>bin</code>、<code>pkg</code>，建议直接在<code>src</code>，或者具体的子包下创建代码仓库）。于此相反的做法，就是在<code>Linux</code>或者<code>Unix</code>系统中，可以在<code>PATH</code>中添加<code>export PATH=$PATH:${GOPATH//://bin:}/bin</code>下把每个<code>GOPATH</code>下的<code>bin</code>都加入到<code>PATH</code>中。</p><p>重点来了：<code>Module</code>的出现，就是为了弱化<code>GOPATH</code>的概念，使用<code>Module</code>去管理项目的依赖，那么可以基本忽略<code>GOPATH</code>的原有的功能。</p><h2 id="Golang提供的命令">Golang提供的命令</h2><p>可以通过命令行<code>go help</code>查看<code>Go</code>提供的命令行工具：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/go-e-d-m-1.png" alt=""></p><p>这里可以关注一下前面一个栏目的基础命令即可：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th><th style="text-align:center">使用例子</th></tr></thead><tbody><tr><td style="text-align:center"><code>go bug</code></td><td style="text-align:center">报告一个<code>BUG</code>，会调用系统默认浏览器打开提交<code>BUG</code>报告的页面</td><td style="text-align:center"><code>go bug</code></td></tr><tr><td style="text-align:center"><code>go build</code></td><td style="text-align:center">编译所有的包和依赖</td><td style="text-align:center"><code>go build [-o output] [-i] [build flags] [packages]</code></td></tr><tr><td style="text-align:center"><code>go clean</code></td><td style="text-align:center">清理执行其它命令时产生的一些文件和目录</td><td style="text-align:center"><code>go clean [clean flags] [build flags] [packages]</code></td></tr><tr><td style="text-align:center"><code>go doc</code></td><td style="text-align:center">打印附于<code>Go</code>语言程序实体上的文档</td><td style="text-align:center"><code>go doc pkg.app</code></td></tr><tr><td style="text-align:center"><code>go env</code></td><td style="text-align:center">展示<code>Go</code>的环境变量配置</td><td style="text-align:center"><code>go env</code></td></tr><tr><td style="text-align:center"><code>go fix</code></td><td style="text-align:center">把指定代码包的所有<code>Go</code>语言源码文件中的旧版本代码修正为新版本的代码，这里的版本是指<code>Go</code>的版本</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>go fmt</code></td><td style="text-align:center">格式化指定代码为统一的风格</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>go generate</code></td><td style="text-align:center">扫描与当前包相关的源代码文件，找出所有包含&quot;//go:generate&quot;的特殊注释，提取并执行该特殊注释后面的命令，命令为可执行程序</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>go get</code></td><td style="text-align:center">根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装</td><td style="text-align:center"><code>go get github.com/x/y</code></td></tr><tr><td style="text-align:center"><code>go install</code></td><td style="text-align:center">编译并安装指定的代码包及它们的依赖包</td><td style="text-align:center"><code>go install</code></td></tr><tr><td style="text-align:center"><code>go list</code></td><td style="text-align:center">列出指定的代码包的信息</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>go mod</code></td><td style="text-align:center"><code>Module</code>相关命令</td><td style="text-align:center">见下文分析</td></tr><tr><td style="text-align:center"><code>go run</code></td><td style="text-align:center">编译并运行命令源码文件</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>go test</code></td><td style="text-align:center">对<code>Go</code>语言编写的程序进行测试，简单来说就是运行测试代码</td><td style="text-align:center"><code>go test mine_test.go</code></td></tr><tr><td style="text-align:center"><code>go tool</code></td><td style="text-align:center">运行特定的<code>Go</code>提供的工具</td><td style="text-align:center"><code>go tool fix</code></td></tr><tr><td style="text-align:center"><code>go version</code></td><td style="text-align:center">打印<code>Golang</code>的版本</td><td style="text-align:center"><code>go version</code></td></tr><tr><td style="text-align:center"><code>go vet</code></td><td style="text-align:center">检查<code>Go</code>语言源码中静态错误</td><td style="text-align:center"><code>go vet</code></td></tr></tbody></table><p>如果想了解每个命令的详细使用教程可以通过<code>go help 命令Topic</code>得到对应的结果，更多或更详细的用法后面在探究<code>Golang</code>编码和基础知识的时候再深入展开。</p><h2 id="Golang依赖管理">Golang依赖管理</h2><p>之前跟一个前辈讨论对比<code>Java</code>和<code>Golang</code>的生态的时候，笔者指出了<code>Golang</code>在工程化方面对比<code>Java</code>感觉偏弱，最常见的例子就是<code>Java</code>有全球通用的依赖中央仓库，国内也有阿里的<code>Maven</code>仓库做加速，开发者可以很轻易通过<code>GAV</code>（<code>GroupId</code>、<code>ArtifactId</code>和<code>Version</code>）去拉取不同版本的依赖包，这一点在<code>Golang</code>中展现出了弱势。回想起来时间<strong>已经过去一年了</strong>，<code>Golang</code>也在进步，依赖管理也开始完善，笔者的过去狭隘的思维也改变了（其实不能总用<code>Java</code>的角度去学习其他编程语言，否则很难体会到其他语言的精髓，甚至有时候会衍生一些奇怪的想法，例如：总是想<code>Golang</code>中是否存在类似<code>Java</code>中的<code>Spring</code>或者<code>Mybatis</code>这类框架）。</p><p><code>Golang</code>从<code>1.11</code>版本之后引入了<code>Module</code>作为依赖管理工具，从<code>1.13</code>或者之后的版本，<code>Module</code>作为官方默认的依赖管理工具，对应的命令是<code>go mod [Command]</code>。<code>Module</code>功能的启用与否由环境变量中的<code>GO111MODULE</code>决定，而<code>GO111MODULE</code>有三个可选值：</p><ul><li><code>GO111MODULE=off</code>，禁用<code>Module</code>功能，则编译的时候会从<code>GOPATH</code>和<code>vendor</code>文件夹中查找依赖包。</li><li><code>GO111MODULE=on</code>，启用<code>Module</code>功能，则编译的时候会忽略<code>GOPATH</code>和<code>vendor</code>文件夹，编译所需的依赖由<code>go.mod</code>文件描述，从本地缓存<code>$GOPATH/pkg/mod</code>目录中加载。</li><li><code>GO111MODULE=auto</code>，自动判断是否启用<code>Module</code>功能，<strong>此选项是默认值</strong>，当项目在<code>$GOPATH/src</code>外且项目根目录有<code>go.mod</code>文件时，则启用<code>Module</code>功能。</li></ul><p><code>Module</code>存在的意义是：没有必要在<code>GOPATH</code>中创建项目，管理项目依赖的第三方包信息可以独立管理。<code>go mod</code>支持的所有命令如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/go-e-d-m-2.png" alt=""></p><table><thead><tr><th style="text-align:center"><code>go mod</code>命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>go mod download</code></td><td style="text-align:center">下载依赖的模块到本地缓存中，本地缓存的默认路径是<code>$GOPATH/pkg/mod</code>目录</td></tr><tr><td style="text-align:center"><code>go mod edit</code></td><td style="text-align:center">编辑<code>go.mod</code>文件</td></tr><tr><td style="text-align:center"><code>go mod graph</code></td><td style="text-align:center">打印模块依赖图</td></tr><tr><td style="text-align:center"><code>go mod init</code></td><td style="text-align:center">基于当前文件夹初始化一个新模块,，创建<code>go.mod</code>文件</td></tr><tr><td style="text-align:center"><code>go mod tidy</code></td><td style="text-align:center">添加缺失的模块，移除无用的模块</td></tr><tr><td style="text-align:center"><code>go mod vendor</code></td><td style="text-align:center">把所有依赖拷贝到<code>vendor</code>文件夹中</td></tr><tr><td style="text-align:center"><code>go mod verify</code></td><td style="text-align:center">校验依赖，检查依赖内容是否和预期一致</td></tr><tr><td style="text-align:center"><code>go mod why</code></td><td style="text-align:center">解释为什么需要引入包（<code>packages</code>）和模块（<code>modules</code>）</td></tr></tbody></table><h3 id="使用Module进行依赖管理">使用Module进行依赖管理</h3><p>先使用<code>JetBrains Goland</code>创建一个新项目，项目里面创建<code>bin</code>、<code>pkg</code>和<code>src</code>三个目录：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/go-e-d-m-3.png" alt=""></p><p>项目创建完成后，根目录中已经存在了一个<code>go.mod</code>文件，也就是<code>JetBrains Goland</code>已经帮我们在当前目录执行过<code>go mod init</code>，文件内容是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module "module-sample"</span><br></pre></td></tr></table></figure><p><code>src</code>目录下引入一个<code>app.go</code>文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/garyburd/redigo/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">connection, err := redis.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:6379"</span>, redis.DialDatabase(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</span><br><span class="line">fmt.Println(<span class="string">"连接到Redis异常"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> connection.Close()</span><br><span class="line">n, err := connection.Do(<span class="string">"SET"</span>, <span class="string">"name"</span>, <span class="string">"throwable"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n == <span class="string">"OK"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"执行Set命令成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line">value, err := redis.String(connection.Do(<span class="string">"GET"</span>, <span class="string">"name"</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Get命令执行结果:"</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现，整个文件的依赖都是标红的，也就是依赖没有下载和导入：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/go-e-d-m-4.png" alt=""></p><p>此时使用<code>go mod tidy</code>进行依赖整理，执行完毕之后，发现根目录生成了一个新的<code>go.sum</code>，它用于记录锁定的依赖记录（依赖的包、路径、版本以及哈希值）。<code>go.sum</code>文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">github.com/garyburd/redigo v1.6.0 h1:0VruCpn7yAIIu7pWVClQC8wxCJEcG3nyzpMSHKi1PQc=</span><br><span class="line">github.com/garyburd/redigo v1.6.0/go.mod h1:NR3MbYisc3/PwhQ00EMzDiPmrwpPxAn5GI05/YaO1SY=</span><br></pre></td></tr></table></figure><p>而<code>go.mod</code>文件也被修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module module-sample</span><br><span class="line"></span><br><span class="line">go 1.13</span><br><span class="line"></span><br><span class="line">require github.com/garyburd/redigo v1.6.0</span><br></pre></td></tr></table></figure><p>然后使用<code>go mod download</code>下载依赖到本地缓存中，下载完成后，使用<code>go mod vendor</code>把依赖拷贝到当前模块的<code>vendor</code>目录下，那么原来标红的文件就能正常编译了。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/go-e-d-m-5.png" alt=""></p><p><code>go mod</code>管理依赖支持<strong>语义化版本号</strong>，例如：</p><ul><li>依赖版本：<strong><code>foo@v1.2.3</code></strong>。</li><li><code>Git</code>分支的<code>Tag</code>：<code>foo@master</code>。</li><li><code>Git</code>提交点的<code>SHA-1</code>值：<code>foo@e3702bed2</code>。</li><li>其他值：如<code>&lt;=v1.1.1</code>、<code>latest</code>等等。</li></ul><p><code>go.mod</code>文件中可以使用如下关键字：</p><ul><li><code>module</code>：模块名。</li><li><code>require</code>：引入所需依赖，注意包名和版本，例如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require github.com/garyburd/redigo v1.6.0</span><br></pre></td></tr></table></figure><ul><li><code>replace</code>：替换依赖，例如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">replace (</span><br><span class="line">    golang.org/x/crypto v0.0.0-20180820150726-614d502a4dac =&gt; github.com/golang/crypto v0.0.0-20180820150726-614d502a4dac</span><br><span class="line">    golang.org/x/net v0.0.0-20180821023952-922f4815f713 =&gt; github.com/golang/net v0.0.0-20180826012351-8a410e7b638d</span><br><span class="line">    golang.org/x/text v0.3.0 =&gt; github.com/golang/text v0.3.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><code>indirect</code>：指明是间接引用，例如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require (</span><br><span class="line">    github.com/garyburd/redigo v1.6.0</span><br><span class="line">    github.com/garyburd/xx v1.0.0  // indirect</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>另外，可以单独使用<code>go get</code>命令下载对应的依赖，而<code>go mod download</code>会下载所有用到的依赖。最后附上一些小技巧：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>go mod edit -fmt</code></td><td style="text-align:center">格式化<code>go.mod</code>文件</td></tr><tr><td style="text-align:center"><code>go mod edit -require=需要的依赖</code></td><td style="text-align:center">添加依赖到<code>go.mod</code>文件</td></tr><tr><td style="text-align:center"><code>go mod edit -droprequire=指定的依赖</code></td><td style="text-align:center">从<code>go.mod</code>文件移除对应的依赖</td></tr><tr><td style="text-align:center"><code>go mod tidy</code>、<code>go mod download</code>、<code>go mod vendor</code></td><td style="text-align:center">三个命令组合使用，相当于全局更新一次所需的依赖</td></tr></tbody></table><p>如果熟练使用这些命令，那么依赖管理就会变得相对容易。</p><h2 id="小结">小结</h2><p>本文简单介绍了<code>Golang</code>的<code>Module</code>依赖管理功能，这里简单记录几个要点：</p><ul><li><code>go mod download</code>下载的依赖包会存放在<code>Go</code>本地缓存中，具体位置是<code>$GOPATH/pkg/mod</code>（这里的<code>GOPATH</code>一般是就是全局的那个<code>GOPATH</code>，值为<code>$Users/$User/go</code>）</li><li>启用<code>Module</code>功能后，模块根目录生成一个<code>go.mod</code>用于记录当前模块的依赖关系。</li><li>启用<code>Module</code>功能后，一旦下载了新的依赖，就会在模块根目录生成一个<code>go.sum</code>用于记录被锁定的依赖记录。</li></ul><p><code>go.mod</code>和<code>go.sum</code>最终决定了一棵锁定好的依赖树，最终编译以及安装都是通过这两个描述文件，关联到本地缓存下载好的依赖包完成后续的工作。</p><p>（本文完 c-1-d e-a-20191222）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近开始系统学习一下&lt;code&gt;Golang&lt;/code&gt;这么新语言，记录一下它的基本环境变量配置以及依赖管理方式。编写本文的时候使用的&lt;code&gt;Golang&lt;/code&gt;版本为&lt;code&gt;go1.13.5 windows/amd64&lt;/code&gt;，其他版本不一定保证适合本文的内容。因为习惯，可能有时候把&lt;code&gt;Go&lt;/code&gt;语言称为&lt;code&gt;Go&lt;/code&gt;，有时候称为&lt;code&gt;Golang&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/Golang.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://throwable.club/blog/categories/Go/"/>
    
      <category term="Golang" scheme="http://throwable.club/blog/categories/Go/Golang/"/>
    
    
      <category term="Go" scheme="http://throwable.club/blog/tags/Go/"/>
    
      <category term="Golang" scheme="http://throwable.club/blog/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis代码生成器Mybatis-Generator使用详解</title>
    <link href="http://throwable.club/2019/12/16/mybatis-generator-usage/"/>
    <id>http://throwable.club/2019/12/16/mybatis-generator-usage/</id>
    <published>2019-12-15T17:06:00.000Z</published>
    <updated>2019-12-15T17:07:59.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近在做创业项目的时候因为有比较多的新需求，需要频繁基于<code>DDL</code>生成<code>Mybatis</code>适合的实体、<code>Mapper</code>接口和映射文件。其中，代码生成器是<code>MyBatis Generator(MBG)</code>，用到了<code>Mybatis-Generator-Core</code>相关依赖，这里通过一篇文章详细地分析这个代码生成器的使用方式。本文编写的时候使用的<code>Mybatis-Generator</code>版本为<code>1.4.0</code>，其他版本没有进行过调研。</p><a id="more"></a><h2 id="引入插件">引入插件</h2><p><code>Mybatis-Generator</code>的运行方式有很多种：</p><ul><li>基于<code>mybatis-generator-core-x.x.x.jar</code>和其<code>XML</code>配置文件，通过命令行运行。</li><li>通过<code>Ant</code>的<code>Task</code>结合其<code>XML</code>配置文件运行。</li><li>通过<code>Maven</code>插件运行。</li><li>通过<code>Java</code>代码和其<code>XML</code>配置文件运行。</li><li>通过<code>Java</code>代码和编程式配置运行。</li><li>通过<code>Eclipse Feature</code>运行。</li></ul><p>这里只介绍通过<code>Maven</code>插件运行和通过<code>Java</code>代码和其<code>XML</code>配置文件运行这两种方式，两种方式有个特点：都要提前编写好<code>XML</code>配置文件。个人感觉<code>XML</code>配置文件相对直观，后文会花大量篇幅去说明<code>XML</code>配置文件中的配置项及其作用。这里先注意一点：默认的配置文件为<code>ClassPath:generatorConfig.xml</code>。</p><h3 id="通过编码和配置文件运行">通过编码和配置文件运行</h3><p>通过编码方式去运行插件先需要引入<code>mybatis-generator-core</code>依赖，编写本文的时候最新的版本为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假设编写好的<code>XML</code>配置文件是<code>ClassPath</code>下的<code>generator-configuration.xml</code>，那么使用代码生成器的编码方式大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 如果已经存在生成过的文件是否进行覆盖</span></span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">File configFile = <span class="keyword">new</span> File(<span class="string">"ClassPath路径/generator-configuration.xml"</span>);</span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator generator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">generator.generate(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="通过Maven插件运行">通过Maven插件运行</h3><p>如果使用<code>Maven</code>插件，那么<strong>不需要</strong>引入<code>mybatis-generator-core</code>依赖，只需要引入一个<code>Maven</code>的插件<code>mybatis-generator-maven-plugin</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出详细信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 覆盖生成文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义配置文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator-configuration.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mybatis-generator-maven-plugin</code>的更详细配置和可选参数可以参考：<a href="http://mybatis.org/generator/running/runningWithMaven.html" target="_blank" rel="noopener">Running With Maven</a>。插件配置完毕之后，使用下面的命令即可运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn mybatis-generator:generate</span><br></pre></td></tr></table></figure><h2 id="XML配置文件详解">XML配置文件详解</h2><p><code>XML</code>配置文件才是<code>Mybatis-Generator</code>的核心，它用于控制代码生成的所有行为。所有非标签独有的公共配置的<code>Key</code>可以在<code>mybatis-generator-core</code>的<code>PropertyRegistry</code>类中找到。下面是一个相对完整的配置文件的模板：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"/Program Files/IBM/SQLLIB/java/db2java.zip"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"COM.ibm.db2.jdbc.app.DB2Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">"jdbc:db2:TEST"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"db2admin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"db2admin"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.SerializablePlugin"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"test.model"</span> <span class="attr">targetProject</span>=<span class="string">"\MBGTestProject\src"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"test.xml"</span>  <span class="attr">targetProject</span>=<span class="string">"\MBGTestProject\src"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"test.dao"</span>  <span class="attr">targetProject</span>=<span class="string">"\MBGTestProject\src"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">"DB2ADMIN"</span> <span class="attr">tableName</span>=<span class="string">"ALLTYPES"</span> <span class="attr">domainObjectName</span>=<span class="string">"Customer"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">sqlStatement</span>=<span class="string">"DB2"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"DATE_FIELD"</span> <span class="attr">property</span>=<span class="string">"startDate"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ignoreColumn</span> <span class="attr">column</span>=<span class="string">"FRED"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"LONG_VARCHAR_FIELD"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件中，最外层的标签为<code>&lt;generatorConfiguration&gt;</code>，它的子标签包括：</p><ul><li>0或者1个<code>&lt;properties&gt;</code>标签，用于指定全局配置文件，下面可以通过占位符的形式读取<code>&lt;properties&gt;</code>指定文件中的值。</li><li>0或者N个<code>&lt;classPathEntry&gt;</code>标签，<code>&lt;classPathEntry&gt;</code>只有一个<code>location</code>属性，用于指定数据源驱动包（<code>jar</code>或者<code>zip</code>）的绝对路径，具体选择什么驱动包取决于连接什么类型的数据源。</li><li>1或者N个<code>&lt;context&gt;</code>标签，用于运行时的解析模式和具体的代码生成行为，所以这个标签里面的配置是最重要的。</li></ul><p>下面分别列举和分析一下<code>&lt;context&gt;</code>标签和它的主要子标签的一些属性配置和功能。</p><h3 id="context标签">context标签</h3><p><code>&lt;context&gt;</code>标签在<code>mybatis-generator-core</code>中对应的实现类为<code>org.mybatis.generator.config.Context</code>，它除了大量的子标签配置之外，比较主要的属性是：</p><ul><li><code>id</code>：<code>Context</code>示例的唯一<code>ID</code>，用于输出错误信息时候作为唯一标记。</li><li><code>targetRuntime</code>：用于执行代码生成模式。</li><li><code>defaultModelType</code>：控制<code>Domain</code>类的生成行为。执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置，可选值：<ul><li><code>conditional</code>：默认值，类似<code>hierarchical</code>，但是只有一个主键的时候会合并所有属性生成在同一个类。</li><li><code>flat</code>：所有内容全部生成在一个对象中。</li><li><code>hierarchical</code>：键生成一个XXKey对象，Blob等单独生成一个对象，其他简单属性在一个对象中。</li></ul></li></ul><p><code>targetRuntime</code>属性的可选值比较多，这里做个简单的小结：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">功能描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>MyBatis3DynamicSql</code></td><td style="text-align:center">默认值，兼容<code>JDK8+</code>和<code>MyBatis 3.4.2+</code>，不会生成<code>XML</code>映射文件，忽略<code>&lt;sqlMapGenerator&gt;</code>的配置项，也就是<code>Mapper</code>全部注解化，依赖于<code>MyBatis Dynamic SQL</code>类库</td></tr><tr><td style="text-align:center"><code>MyBatis3Kotlin</code></td><td style="text-align:center">行为类似于<code>MyBatis3DynamicSql</code>，不过兼容<code>Kotlin</code>的代码生成</td></tr><tr><td style="text-align:center"><code>MyBatis3</code></td><td style="text-align:center">提供基本的基于动态<code>SQL</code>的<code>CRUD</code>方法和<code>XXXByExample</code>方法，会生成<code>XML</code>映射文件</td></tr><tr><td style="text-align:center"><code>MyBatis3Simple</code></td><td style="text-align:center">提供基本的基于动态<code>SQL</code>的<code>CRUD</code>方法，会生成<code>XML</code>映射文件</td></tr><tr><td style="text-align:center"><code>MyBatis3DynamicSqlV1</code></td><td style="text-align:center">已经过时，不推荐使用</td></tr></tbody></table><p>笔者偏向于把<code>SQL</code>文件和代码分离，所以一般选用<code>MyBatis3</code>或者<code>MyBatis3Simple</code>。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;context&gt;</code>标签支持0或N个<code>&lt;property&gt;</code>标签，<code>&lt;property&gt;</code>的可选属性有：</p><table><thead><tr><th style="text-align:center">property属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">默认值</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>autoDelimitKeywords</code></td><td style="text-align:center">是否使用分隔符号括住数据库关键字</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">例如<code>MySQL</code>中会使用反引号括住关键字</td></tr><tr><td style="text-align:center"><code>beginningDelimiter</code></td><td style="text-align:center">分隔符号的开始符号</td><td style="text-align:center"><code>&quot;</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>endingDelimiter</code></td><td style="text-align:center">分隔符号的结束号</td><td style="text-align:center"><code>&quot;</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>javaFileEncoding</code></td><td style="text-align:center">文件的编码</td><td style="text-align:center"><code>系统默认值</code></td><td style="text-align:center">来源于<code>java.nio.charset.Charset</code></td></tr><tr><td style="text-align:center"><code>javaFormatter</code></td><td style="text-align:center">类名和文件格式化器</td><td style="text-align:center"><code>DefaultJavaFormatter</code></td><td style="text-align:center">见<code>JavaFormatter</code>和<code>DefaultJavaFormatter</code></td></tr><tr><td style="text-align:center"><code>targetJava8</code></td><td style="text-align:center">是否JDK8和启动其特性</td><td style="text-align:center"><code>true</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>kotlinFileEncoding</code></td><td style="text-align:center"><code>Kotlin</code>文件编码</td><td style="text-align:center"><code>系统默认值</code></td><td style="text-align:center">来源于<code>java.nio.charset.Charset</code></td></tr><tr><td style="text-align:center"><code>kotlinFormatter</code></td><td style="text-align:center"><code>Kotlin</code>类名和文件格式化器</td><td style="text-align:center"><code>DefaultKotlinFormatter</code></td><td style="text-align:center">见<code>KotlinFormatter</code>和<code>DefaultKotlinFormatter</code></td></tr><tr><td style="text-align:center"><code>xmlFormatter</code></td><td style="text-align:center"><code>XML</code>文件格式化器</td><td style="text-align:center"><code>DefaultXmlFormatter</code></td><td style="text-align:center">见<code>XmlFormatter</code>和<code>DefaultXmlFormatter</code></td></tr></tbody></table><h3 id="jdbcConnection标签">jdbcConnection标签</h3><p><code>&lt;jdbcConnection&gt;</code>标签用于<strong>指定数据源的连接信息</strong>，它在<code>mybatis-generator-core</code>中对应的实现类为<code>org.mybatis.generator.config.JDBCConnectionConfiguration</code>，主要属性包括：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">是否必须</th></tr></thead><tbody><tr><td style="text-align:center"><code>driverClass</code></td><td style="text-align:center">数据源驱动的全类名</td><td style="text-align:center"><code>Y</code></td></tr><tr><td style="text-align:center"><code>connectionURL</code></td><td style="text-align:center"><code>JDBC</code>的连接<code>URL</code></td><td style="text-align:center"><code>Y</code></td></tr><tr><td style="text-align:center"><code>userId</code></td><td style="text-align:center">连接到数据源的用户名</td><td style="text-align:center"><code>N</code></td></tr><tr><td style="text-align:center"><code>password</code></td><td style="text-align:center">连接到数据源的密码</td><td style="text-align:center"><code>N</code></td></tr></tbody></table><h3 id="commentGenerator标签">commentGenerator标签</h3><p><code>&lt;commentGenerator&gt;</code>标签是可选的，用于<strong>控制生成的实体的注释内容</strong>。它在<code>mybatis-generator-core</code>中对应的实现类为<code>org.mybatis.generator.internal.DefaultCommentGenerator</code>，可以通过可选的<code>type</code>属性指定一个自定义的<code>CommentGenerator</code>实现。<code>&lt;commentGenerator&gt;</code>标签支持0或N个<code>&lt;property&gt;</code>标签，<code>&lt;property&gt;</code>的可选属性有：</p><table><thead><tr><th style="text-align:center">property属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center"><code>suppressAllComments</code></td><td style="text-align:center">是否生成注释</td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>suppressDate</code></td><td style="text-align:center">是否在注释中添加生成的时间戳</td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>dateFormat</code></td><td style="text-align:center">配合<code>suppressDate</code>使用，指定输出时间戳的格式</td><td style="text-align:center"><code>java.util.Date#toString()</code></td></tr><tr><td style="text-align:center"><code>addRemarkComments</code></td><td style="text-align:center">是否输出表和列的<code>Comment</code>信息</td><td style="text-align:center"><code>false</code></td></tr></tbody></table><p>笔者建议保持默认值，也就是什么注释都不输出，生成代码干净的实体。</p><h3 id="javaTypeResolver标签">javaTypeResolver标签</h3><p><code>&lt;javaTypeResolver&gt;</code>标签是<code>&lt;context&gt;</code>的子标签，用于解析和计算数据库列类型和<code>Java</code>类型的映射关系，该标签只包含一个<code>type</code>属性，用于指定<code>org.mybatis.generator.api.JavaTypeResolver</code>接口的实现类。<code>&lt;javaTypeResolver&gt;</code>标签支持0或N个<code>&lt;property&gt;</code>标签，<code>&lt;property&gt;</code>的可选属性有：</p><table><thead><tr><th style="text-align:center">property属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center"><code>forceBigDecimals</code></td><td style="text-align:center">是否强制把所有的数字类型强制使用<code>java.math.BigDecimal</code>类型表示</td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>useJSR310Types</code></td><td style="text-align:center">是否支持<code>JSR310</code>，主要是<code>JSR310</code>的新日期类型</td><td style="text-align:center"><code>false</code></td></tr></tbody></table><p>如果<code>useJSR310Types</code>属性设置为<code>true</code>，那么生成代码的时候类型映射关系如下（主要针对日期时间类型）：</p><table><thead><tr><th style="text-align:center">数据库（JDBC）类型</th><th style="text-align:center">Java类型</th></tr></thead><tbody><tr><td style="text-align:center"><code>DATE</code></td><td style="text-align:center"><code>java.time.LocalDate</code></td></tr><tr><td style="text-align:center"><code>TIME</code></td><td style="text-align:center"><code>java.time.LocalTime</code></td></tr><tr><td style="text-align:center"><code>TIMESTAMP</code></td><td style="text-align:center"><code>java.time.LocalDateTime</code></td></tr><tr><td style="text-align:center"><code>TIME_WITH_TIMEZONE</code></td><td style="text-align:center"><code>java.time.OffsetTime</code></td></tr><tr><td style="text-align:center"><code>TIMESTAMP_WITH_TIMEZONE</code></td><td style="text-align:center"><code>java.time.OffsetDateTime</code></td></tr></tbody></table><p>引入<code>mybatis-generator-core</code>后，可以查看<code>JavaTypeResolver</code>的默认实现为<code>JavaTypeResolverDefaultImpl</code>，从它的源码可以得知一些映射关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BIGINT --&gt; Long</span><br><span class="line">BIT --&gt; Boolean</span><br><span class="line">INTEGER --&gt; Integer</span><br><span class="line">SMALLINT --&gt; Short</span><br><span class="line">TINYINT --&gt; Byte</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>有些时候，我们希望<code>INTEGER</code>、<code>SMALLINT</code>和<code>TINYINT</code>都映射为<code>Integer</code>，那么我们需要覆盖<code>JavaTypeResolverDefaultImpl</code>的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultJavaTypeResolver</span> <span class="keyword">extends</span> <span class="title">JavaTypeResolverDefaultImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultJavaTypeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        typeMap.put(Types.SMALLINT, <span class="keyword">new</span> JdbcTypeInformation(<span class="string">"SMALLINT"</span>,</span><br><span class="line">                <span class="keyword">new</span> FullyQualifiedJavaType(Integer<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;</span><br><span class="line">        typeMap.put(Types.TINYINT, <span class="keyword">new</span> JdbcTypeInformation(<span class="string">"TINYINT"</span>,</span><br><span class="line">                <span class="keyword">new</span> FullyQualifiedJavaType(Integer<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一点的是这种自定义实现<code>JavaTypeResolver</code>接口的方式使用编程式运行<code>MBG</code>会相对方便，如果需要使用<code>Maven</code>插件运行，那么需要把上面的<code>DefaultJavaTypeResolver</code>类打包到插件中。</p><h3 id="javaModelGenerator标签">javaModelGenerator标签</h3><p><code>&lt;javaModelGenerator标签&gt;</code>标签是<code>&lt;context&gt;</code>的子标签，主要用于控制实体（<code>Model</code>）类的代码生成行为。它支持的属性如下：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">是否必须</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>targetPackage</code></td><td style="text-align:center">生成的实体类的包名</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center">例如<code>club.throwable.model</code></td></tr><tr><td style="text-align:center"><code>targetProject</code></td><td style="text-align:center">生成的实体类文件相对于项目（根目录）的位置</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center">例如<code>src/main/java</code></td></tr></tbody></table><p><code>&lt;javaModelGenerator标签&gt;</code>标签支持0或N个<code>&lt;property&gt;</code>标签，<code>&lt;property&gt;</code>的可选属性有：</p><table><thead><tr><th style="text-align:center">property属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">默认值</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>constructorBased</code></td><td style="text-align:center">是否生成一个带有所有字段属性的构造函数</td><td style="text-align:center"><code>false</code></td><td style="text-align:center"><code>MyBatis3Kotlin</code>模式下忽略此属性配置</td></tr><tr><td style="text-align:center"><code>enableSubPackages</code></td><td style="text-align:center">是否允许通过<code>Schema</code>生成子包</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">如果为<code>true</code>，例如包名为<code>club.throwable</code>，如果<code>Schema</code>为<code>xyz</code>，那么实体类文件最终会生成在<code>club.throwable.xyz</code>目录</td></tr><tr><td style="text-align:center"><code>exampleTargetPackage</code></td><td style="text-align:center">生成的伴随实体类的<code>Example</code>类的包名</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>exampleTargetProject</code></td><td style="text-align:center">生成的伴随实体类的<code>Example</code>类文件相对于项目（根目录）的位置</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>immutable</code></td><td style="text-align:center">是否不可变</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">如果为<code>true</code>，则不会生成<code>Setter</code>方法，所有字段都使用<code>final</code>修饰，提供一个带有所有字段属性的构造函数</td></tr><tr><td style="text-align:center"><code>rootClass</code></td><td style="text-align:center">为生成的实体类添加父类</td><td style="text-align:center">-</td><td style="text-align:center">通过<code>value</code>指定父类的全类名即可</td></tr><tr><td style="text-align:center"><code>trimStrings</code></td><td style="text-align:center"><code>Setter</code>方法是否对字符串类型进行一次<code>trim</code>操作</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">-</td></tr></tbody></table><h3 id="javaClientGenerator标签">javaClientGenerator标签</h3><p><code>&lt;javaClientGenerator&gt;</code>标签是<code>&lt;context&gt;</code>的子标签，主要用于控制<code>Mapper</code>接口的代码生成行为。它支持的属性如下：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">是否必须</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center"><code>Mapper</code>接口生成策略</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center"><code>&lt;context&gt;</code>标签的<code>targetRuntime</code>属性为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时此属性配置忽略</td></tr><tr><td style="text-align:center"><code>targetPackage</code></td><td style="text-align:center">生成的<code>Mapper</code>接口的包名</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center">例如<code>club.throwable.mapper</code></td></tr><tr><td style="text-align:center"><code>targetProject</code></td><td style="text-align:center">生成的<code>Mapper</code>接口文件相对于项目（根目录）的位置</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center">例如<code>src/main/java</code></td></tr></tbody></table><p><code>type</code>属性的可选值如下：</p><ul><li><code>ANNOTATEDMAPPER</code>：<code>Mapper</code>接口生成的时候依赖于注解和<code>SqlProviders</code>（也就是纯注解实现），不会生成<code>XML</code>映射文件。</li><li><code>XMLMAPPER</code>：<code>Mapper</code>接口生成接口方法，对应的实现代码生成在<code>XML</code>映射文件中（也就是纯映射文件实现）。</li><li><code>MIXEDMAPPER</code>：<code>Mapper</code>接口生成的时候复杂的方法实现生成在<code>XML</code>映射文件中，而简单的实现通过注解和<code>SqlProviders</code>实现（也就是注解和映射文件混合实现）。</li></ul><p>注意两点：</p><ul><li><code>&lt;context&gt;</code>标签的<code>targetRuntime</code>属性指定为<code>MyBatis3Simple</code>的时候，<code>type</code>只能选用<code>ANNOTATEDMAPPER</code>或者<code>XMLMAPPER</code>。</li><li><code>&lt;context&gt;</code>标签的<code>targetRuntime</code>属性指定为<code>MyBatis3</code>的时候，<code>type</code>可以选用<code>ANNOTATEDMAPPER</code>、<code>XMLMAPPER</code>或者<code>MIXEDMAPPER</code>。</li></ul><p><code>&lt;javaClientGenerator&gt;</code>标签支持0或N个<code>&lt;property&gt;</code>标签，<code>&lt;property&gt;</code>的可选属性有：</p><table><thead><tr><th style="text-align:center">property属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">默认值</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>enableSubPackages</code></td><td style="text-align:center">是否允许通过<code>Schema</code>生成子包</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">如果为<code>true</code>，例如包名为<code>club.throwable</code>，如果<code>Schema</code>为<code>xyz</code>，那么<code>Mapper</code>接口文件最终会生成在<code>club.throwable.xyz</code>目录</td></tr><tr><td style="text-align:center"><code>useLegacyBuilder</code></td><td style="text-align:center">是否通过<code>SQL Builder</code>生成动态<code>SQL</code></td><td style="text-align:center"><code>false</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>rootInterface</code></td><td style="text-align:center">为生成的<code>Mapper</code>接口添加父接口</td><td style="text-align:center">-</td><td style="text-align:center">通过<code>value</code>指定父接口的全类名即可</td></tr></tbody></table><h3 id="sqlMapGenerator标签">sqlMapGenerator标签</h3><p><code>&lt;sqlMapGenerator&gt;</code>标签是<code>&lt;context&gt;</code>的子标签，主要用于控制<code>XML</code>映射文件的代码生成行为。它支持的属性如下：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">是否必须</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>targetPackage</code></td><td style="text-align:center">生成的<code>XML</code>映射文件的包名</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center">例如<code>mappings</code></td></tr><tr><td style="text-align:center"><code>targetProject</code></td><td style="text-align:center">生成的<code>XML</code>映射文件相对于项目（根目录）的位置</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center">例如<code>src/main/resources</code></td></tr></tbody></table><p><code>&lt;sqlMapGenerator&gt;</code>标签支持0或N个<code>&lt;property&gt;</code>标签，<code>&lt;property&gt;</code>的可选属性有：</p><table><thead><tr><th style="text-align:center">property属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">默认值</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>enableSubPackages</code></td><td style="text-align:center">是否允许通过<code>Schema</code>生成子包</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">-</td></tr></tbody></table><h3 id="plugin标签">plugin标签</h3><p><code>&lt;plugin&gt;</code>标签是<code>&lt;context&gt;</code>的子标签，用于引入一些插件对代码生成的一些特性进行扩展，该标签只包含一个<code>type</code>属性，用于指定<code>org.mybatis.generator.api.Plugin</code>接口的实现类。内置的插件实现见<a href="http://mybatis.org/generator/reference/plugins.html" target="_blank" rel="noopener">Supplied Plugins</a>。例如：引入<code>org.mybatis.generator.plugins.SerializablePlugin</code>插件会让生成的实体类自动实现<code>java.io.Serializable</code>接口并且添加<code>serialVersionUID</code>属性。</p><h3 id="table标签">table标签</h3><p><code>&lt;table&gt;</code>标签是<code>&lt;context&gt;</code>的子标签，主要用于配置要生成代码的数据库表格，定制一些代码生成行为等等。它支持的属性众多，列举如下：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">是否必须</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>tableName</code></td><td style="text-align:center">数据库表名称</td><td style="text-align:center"><code>Y</code></td><td style="text-align:center">例如<code>t_order</code></td></tr><tr><td style="text-align:center"><code>schema</code></td><td style="text-align:center">数据库<code>Schema</code></td><td style="text-align:center"><code>N</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>catalog</code></td><td style="text-align:center">数据库<code>Catalog</code></td><td style="text-align:center"><code>N</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>alias</code></td><td style="text-align:center">表名称标签</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">如果指定了此值，则查询列的时候结果格式为<code>alias_column</code></td></tr><tr><td style="text-align:center"><code>domainObjectName</code></td><td style="text-align:center">表对应的实体类名称，可以通过<code>.</code>指定包路径</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">如果指定了<code>bar.User</code>，则包名为<code>bar</code>，实体类名称为<code>User</code></td></tr><tr><td style="text-align:center"><code>mapperName</code></td><td style="text-align:center">表对应的<code>Mapper</code>接口类名称，可以通过<code>.</code>指定包路径</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">如果指定了<code>bar.UserMapper</code>，则包名为<code>bar</code>，<code>Mapper</code>接口类名称为<code>UserMapper</code></td></tr><tr><td style="text-align:center"><code>sqlProviderName</code></td><td style="text-align:center">动态<code>SQL</code>提供类<code>SqlProvider</code>的类名称</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>enableInsert</code></td><td style="text-align:center">是否允许生成<code>insert</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>enableSelectByPrimaryKey</code></td><td style="text-align:center">是否允许生成<code>selectByPrimaryKey</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>enableSelectByExample</code></td><td style="text-align:center">是否允许生成<code>selectByExample</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>enableUpdateByPrimaryKey</code></td><td style="text-align:center">是否允许生成<code>updateByPrimaryKey</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>enableDeleteByPrimaryKey</code></td><td style="text-align:center">是否允许生成<code>deleteByPrimaryKey</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>enableDeleteByExample</code></td><td style="text-align:center">是否允许生成<code>deleteByExample</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>enableCountByExample</code></td><td style="text-align:center">是否允许生成<code>countByExample</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>enableUpdateByExample</code></td><td style="text-align:center">是否允许生成<code>updateByExample</code>方法</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>true</code>，执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>selectByPrimaryKeyQueryId</code></td><td style="text-align:center"><code>value</code>指定对应的主键列提供列表查询功能</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>selectByExampleQueryId</code></td><td style="text-align:center"><code>value</code>指定对应的查询<code>ID</code>提供列表查询功能</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">执行引擎为<code>MyBatis3DynamicSql</code>或者<code>MyBatis3Kotlin</code>时忽略此配置</td></tr><tr><td style="text-align:center"><code>modelType</code></td><td style="text-align:center">覆盖<code>&lt;context&gt;</code>的<code>defaultModelType</code>属性</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">见<code>&lt;context&gt;</code>的<code>defaultModelType</code>属性</td></tr><tr><td style="text-align:center"><code>escapeWildcards</code></td><td style="text-align:center">是否对通配符进行转义</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>delimitIdentifiers</code></td><td style="text-align:center">标记匹配表名称的时候是否需要使用分隔符去标记生成的SQL</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>delimitAllColumns</code></td><td style="text-align:center">是否所有的列都添加分隔符</td><td style="text-align:center"><code>N</code></td><td style="text-align:center">默认值为<code>false</code>，如果设置为<code>true</code>，所有列名会添加起始和结束分隔符</td></tr></tbody></table><p><code>&lt;table&gt;</code>标签支持0或N个<code>&lt;property&gt;</code>标签，<code>&lt;property&gt;</code>的可选属性有：</p><table><thead><tr><th style="text-align:center">property属性</th><th style="text-align:center">功能描述</th><th style="text-align:center">默认值</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>constructorBased</code></td><td style="text-align:center">是否为实体类生成一个带有所有字段的构造函数</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">执行引擎为<code>MyBatis3Kotlin</code>的时候此属性忽略</td></tr><tr><td style="text-align:center"><code>ignoreQualifiersAtRuntime</code></td><td style="text-align:center">是否在运行时忽略别名</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">如果为<code>true</code>，则不会在生成表的时候把<code>schema</code>和<code>catalog</code>作为表的前缀</td></tr><tr><td style="text-align:center"><code>immutable</code></td><td style="text-align:center">实体类是否不可变</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">执行引擎为<code>MyBatis3Kotlin</code>的时候此属性忽略</td></tr><tr><td style="text-align:center"><code>modelOnly</code></td><td style="text-align:center">是否仅仅生成实体类</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>rootClass</code></td><td style="text-align:center">如果配置此属性，则实体类会继承此指定的超类</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">如果有主键属性会把主键属性在超类生成</td></tr><tr><td style="text-align:center"><code>rootInterface</code></td><td style="text-align:center">如果配置此属性，则实体类会实现此指定的接口</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">执行引擎为<code>MyBatis3Kotlin</code>或者<code>MyBatis3DynamicSql</code>的时候此属性忽略</td></tr><tr><td style="text-align:center"><code>runtimeCatalog</code></td><td style="text-align:center">指定运行时的<code>Catalog</code></td><td style="text-align:center"><code>-</code></td><td style="text-align:center">当生成表和运行时的表的<code>Catalog</code>不一样的时候可以使用该属性进行配置</td></tr><tr><td style="text-align:center"><code>runtimeSchema</code></td><td style="text-align:center">指定运行时的<code>Schema</code></td><td style="text-align:center"><code>-</code></td><td style="text-align:center">当生成表和运行时的表的<code>Schema</code>不一样的时候可以使用该属性进行配置</td></tr><tr><td style="text-align:center"><code>runtimeTableName</code></td><td style="text-align:center">指定运行时的表名称</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">当生成表和运行时的表的表名称不一样的时候可以使用该属性进行配置</td></tr><tr><td style="text-align:center"><code>selectAllOrderByClause</code></td><td style="text-align:center">指定字句内容添加到<code>selectAll()</code>方法的<code>order by</code>子句之中</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">执行引擎为<code>MyBatis3Simple</code>的时候此属性才适用</td></tr><tr><td style="text-align:center"><code>trimStrings</code></td><td style="text-align:center">实体类的字符串类型属性会做<code>trim</code>处理</td><td style="text-align:center"><code>-</code></td><td style="text-align:center">执行引擎为<code>MyBatis3Kotlin</code>的时候此属性忽略</td></tr><tr><td style="text-align:center"><code>useActualColumnNames</code></td><td style="text-align:center">是否使用列名作为实体类的属性名</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>useColumnIndexes</code></td><td style="text-align:center"><code>XML</code>映射文件中生成的<code>ResultMap</code>使用列索引定义而不是列名称</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">执行引擎为<code>MyBatis3Kotlin</code>或者<code>MyBatis3DynamicSql</code>的时候此属性忽略</td></tr><tr><td style="text-align:center"><code>useCompoundPropertyNames</code></td><td style="text-align:center">是否把列名和列备注拼接起来生成实体类属性名</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">-</td></tr></tbody></table><p><code>&lt;table&gt;</code>标签还支持众多的<strong>非</strong><code>property</code>的子标签：</p><ul><li>0或1个<code>&lt;generatedKey&gt;</code>用于指定主键生成的规则，指定此标签后会生成一个<code>&lt;selectKey&gt;</code>标签：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- column：指定主键列 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- sqlStatement：查询主键的SQL语句，例如填写了MySql，则使用SELECT LAST_INSERT_ID() --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type：可选值为pre或者post，pre指定selectKey标签的order为BEFORE，post指定selectKey标签的order为AFTER --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- identity：true的时候，指定selectKey标签的order为AFTER --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span> <span class="attr">type</span>=<span class="string">"post"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>0或1个<code>&lt;domainObjectRenamingRule&gt;</code>用于指定实体类重命名规则：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- searchString中正则命中的实体类名部分会替换为replaceString --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">domainObjectRenamingRule</span> <span class="attr">searchString</span>=<span class="string">"^Sys"</span> <span class="attr">replaceString</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如 SysUser会变成User --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如 SysUserMapper会变成UserMapper --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>0或1个<code>&lt;columnRenamingRule&gt;</code>用于指定列重命名规则：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- searchString中正则命中的列名部分会替换为replaceString --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columnRenamingRule</span> <span class="attr">searchString</span>=<span class="string">"^CUST_"</span> <span class="attr">replaceString</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如 CUST_BUSINESS_NAME会变成BUSINESS_NAME（useActualColumnNames=true） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如 CUST_BUSINESS_NAME会变成businessName（useActualColumnNames=false） --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>0或N个<code>&lt;columnOverride&gt;</code>用于指定具体列的覆盖映射规则：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- column：指定要覆盖配置的列 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- property：指定要覆盖配置的属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- delimitedColumnName：是否为列名添加定界符，例如`&#123;column&#125;` --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- isGeneratedAlways：是否一定生成此列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"customer_name"</span> <span class="attr">property</span>=<span class="string">"customerName"</span> <span class="attr">javaType</span>=<span class="string">""</span> <span class="attr">jdbcType</span>=<span class="string">""</span> <span class="attr">typeHandler</span>=<span class="string">""</span> <span class="attr">delimitedColumnName</span>=<span class="string">""</span> <span class="attr">isGeneratedAlways</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 覆盖table或者javaModelGenerator级别的trimStrings属性配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columnOverride</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>0或N个<code>&lt;ignoreColumn&gt;</code>用于指定忽略生成的列：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ignoreColumn</span> <span class="attr">column</span>=<span class="string">"version"</span> <span class="attr">delimitedColumnName</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实战">实战</h2><p>如果需要深度定制一些代码生成行为，建议引入<code>mybatis-generator-core</code>并且通过编程式执行代码生成方法，否则可以选用<code>Maven</code>插件。假设我们在本地数据<code>local</code>有一张<code>t_order</code>表如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_order`</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>           <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">    order_id     <span class="built_in">VARCHAR</span>(<span class="number">64</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单ID'</span>,</span><br><span class="line">    create_time  DATETIME       <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    amount       <span class="built_in">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'金额'</span>,</span><br><span class="line">    order_status <span class="built_in">TINYINT</span>        <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'订单状态'</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> uniq_order_id (<span class="string">`order_id`</span>)</span><br><span class="line">) <span class="keyword">COMMENT</span> <span class="string">'订单表'</span>;</span><br></pre></td></tr></table></figure><p>假设项目的结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mbg-sample</span><br><span class="line">  - main</span><br><span class="line">   - java</span><br><span class="line">    - club</span><br><span class="line">     - throwable</span><br><span class="line">   - resources</span><br></pre></td></tr></table></figure><p>下面会基于此前提举三个例子。编写基础的<code>XML</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动包绝对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">"I:\Develop\Maven-Repository\mysql\mysql-connector-java\5.1.48\mysql-connector-java-5.1.48.jar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"这里选择合适的引擎"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不输出注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/local"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不强制把所有的数字类型转化为BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"club.throwable.entity"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mappings"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"这里选择合适的Mapper类型"</span> <span class="attr">targetPackage</span>=<span class="string">"club.throwable.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_order"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">domainObjectName</span>=<span class="string">"Order"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">mapperName</span>=<span class="string">"OrderMapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="纯注解">纯注解</h3><p>使用纯注解需要引入<code>mybatis-dynamic-sql</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.dynamic-sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-dynamic-sql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要修改两个位置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3DynamicSql"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"ANNOTATEDMAPPER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br></pre></td></tr></table></figure><p>运行结果会生成三个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// club.throwable.entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">private</span> Byte orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(BigDecimal amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getOrderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderStatus</span><span class="params">(Byte orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// club.throwable.dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDynamicSqlSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Order order = <span class="keyword">new</span> Order();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SqlColumn&lt;Long&gt; id = order.id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SqlColumn&lt;String&gt; orderId = order.orderId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SqlColumn&lt;Date&gt; createTime = order.createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SqlColumn&lt;BigDecimal&gt; amount = order.amount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SqlColumn&lt;Byte&gt; orderStatus = order.orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">SqlTable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> SqlColumn&lt;Long&gt; id = column(<span class="string">"id"</span>, JDBCType.BIGINT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> SqlColumn&lt;String&gt; orderId = column(<span class="string">"order_id"</span>, JDBCType.VARCHAR);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> SqlColumn&lt;Date&gt; createTime = column(<span class="string">"create_time"</span>, JDBCType.TIMESTAMP);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> SqlColumn&lt;BigDecimal&gt; amount = column(<span class="string">"amount"</span>, JDBCType.DECIMAL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> SqlColumn&lt;Byte&gt; orderStatus = column(<span class="string">"order_status"</span>, JDBCType.TINYINT);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">"t_order"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    BasicColumn[] selectList = BasicColumn.columnList(id, orderId, createTime, amount, orderStatus);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="meta">@SelectProvider</span>(type=SqlProviderAdapter<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"select"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(SelectStatementProvider selectStatement)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="meta">@DeleteProvider</span>(type=SqlProviderAdapter<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(DeleteStatementProvider deleteStatement)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="meta">@InsertProvider</span>(type=SqlProviderAdapter<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"insert"</span>)</span><br><span class="line">    <span class="meta">@SelectKey</span>(statement=<span class="string">"SELECT LAST_INSERT_ID()"</span>, keyProperty=<span class="string">"record.id"</span>, before=<span class="keyword">true</span>, resultType=Long<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">insert</span>(<span class="title">InsertStatementProvider</span>&lt;<span class="title">Order</span>&gt; <span class="title">insertStatement</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="meta">@SelectProvider</span>(type=SqlProviderAdapter<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"select"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"OrderResult"</span>, value = &#123;</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"id"</span>, property=<span class="string">"id"</span>, jdbcType=JdbcType.BIGINT, id=<span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"order_id"</span>, property=<span class="string">"orderId"</span>, jdbcType=JdbcType.VARCHAR),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"create_time"</span>, property=<span class="string">"createTime"</span>, jdbcType=JdbcType.TIMESTAMP),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"amount"</span>, property=<span class="string">"amount"</span>, jdbcType=JdbcType.DECIMAL),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"order_status"</span>, property=<span class="string">"orderStatus"</span>, jdbcType=JdbcType.TINYINT)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">Optional&lt;Order&gt; <span class="title">selectOne</span><span class="params">(SelectStatementProvider selectStatement)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="meta">@SelectProvider</span>(type=SqlProviderAdapter<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"select"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"OrderResult"</span>, value = &#123;</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"id"</span>, property=<span class="string">"id"</span>, jdbcType=JdbcType.BIGINT, id=<span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"order_id"</span>, property=<span class="string">"orderId"</span>, jdbcType=JdbcType.VARCHAR),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"create_time"</span>, property=<span class="string">"createTime"</span>, jdbcType=JdbcType.TIMESTAMP),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"amount"</span>, property=<span class="string">"amount"</span>, jdbcType=JdbcType.DECIMAL),</span><br><span class="line">        <span class="meta">@Result</span>(column=<span class="string">"order_status"</span>, property=<span class="string">"orderStatus"</span>, jdbcType=JdbcType.TINYINT)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">selectMany</span><span class="params">(SelectStatementProvider selectStatement)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="meta">@UpdateProvider</span>(type=SqlProviderAdapter<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(UpdateStatementProvider updateStatement)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(CountDSLCompleter completer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.countFrom(<span class="keyword">this</span>::count, order, completer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(DeleteDSLCompleter completer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.deleteFrom(<span class="keyword">this</span>::delete, order, completer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Long id_)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delete(c -&gt; </span><br><span class="line">            c.where(id, isEqualTo(id_))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Order record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.insert(<span class="keyword">this</span>::insert, record, order, c -&gt;</span><br><span class="line">            c.map(id).toProperty(<span class="string">"id"</span>)</span><br><span class="line">            .map(orderId).toProperty(<span class="string">"orderId"</span>)</span><br><span class="line">            .map(createTime).toProperty(<span class="string">"createTime"</span>)</span><br><span class="line">            .map(amount).toProperty(<span class="string">"amount"</span>)</span><br><span class="line">            .map(orderStatus).toProperty(<span class="string">"orderStatus"</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Order record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.insert(<span class="keyword">this</span>::insert, record, order, c -&gt;</span><br><span class="line">            c.map(id).toProperty(<span class="string">"id"</span>)</span><br><span class="line">            .map(orderId).toPropertyWhenPresent(<span class="string">"orderId"</span>, record::getOrderId)</span><br><span class="line">            .map(createTime).toPropertyWhenPresent(<span class="string">"createTime"</span>, record::getCreateTime)</span><br><span class="line">            .map(amount).toPropertyWhenPresent(<span class="string">"amount"</span>, record::getAmount)</span><br><span class="line">            .map(orderStatus).toPropertyWhenPresent(<span class="string">"orderStatus"</span>, record::getOrderStatus)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Optional&lt;Order&gt; <span class="title">selectOne</span><span class="params">(SelectDSLCompleter completer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.selectOne(<span class="keyword">this</span>::selectOne, selectList, order, completer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;Order&gt; <span class="title">select</span><span class="params">(SelectDSLCompleter completer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.selectList(<span class="keyword">this</span>::selectMany, selectList, order, completer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;Order&gt; <span class="title">selectDistinct</span><span class="params">(SelectDSLCompleter completer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.selectDistinct(<span class="keyword">this</span>::selectMany, selectList, order, completer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Optional&lt;Order&gt; <span class="title">selectByPrimaryKey</span><span class="params">(Long id_)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> selectOne(c -&gt;</span><br><span class="line">            c.where(id, isEqualTo(id_))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(UpdateDSLCompleter completer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyBatis3Utils.update(<span class="keyword">this</span>::update, order, completer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">static</span> UpdateDSL&lt;UpdateModel&gt; <span class="title">updateAllColumns</span><span class="params">(Order record, UpdateDSL&lt;UpdateModel&gt; dsl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dsl.set(id).equalTo(record::getId)</span><br><span class="line">                .set(orderId).equalTo(record::getOrderId)</span><br><span class="line">                .set(createTime).equalTo(record::getCreateTime)</span><br><span class="line">                .set(amount).equalTo(record::getAmount)</span><br><span class="line">                .set(orderStatus).equalTo(record::getOrderStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">static</span> UpdateDSL&lt;UpdateModel&gt; <span class="title">updateSelectiveColumns</span><span class="params">(Order record, UpdateDSL&lt;UpdateModel&gt; dsl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dsl.set(id).equalToWhenPresent(record::getId)</span><br><span class="line">                .set(orderId).equalToWhenPresent(record::getOrderId)</span><br><span class="line">                .set(createTime).equalToWhenPresent(record::getCreateTime)</span><br><span class="line">                .set(amount).equalToWhenPresent(record::getAmount)</span><br><span class="line">                .set(orderStatus).equalToWhenPresent(record::getOrderStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Order record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> update(c -&gt;</span><br><span class="line">            c.set(orderId).equalTo(record::getOrderId)</span><br><span class="line">            .set(createTime).equalTo(record::getCreateTime)</span><br><span class="line">            .set(amount).equalTo(record::getAmount)</span><br><span class="line">            .set(orderStatus).equalTo(record::getOrderStatus)</span><br><span class="line">            .where(id, isEqualTo(record::getId))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated</span>(<span class="string">"org.mybatis.generator.api.MyBatisGenerator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(Order record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> update(c -&gt;</span><br><span class="line">            c.set(orderId).equalToWhenPresent(record::getOrderId)</span><br><span class="line">            .set(createTime).equalToWhenPresent(record::getCreateTime)</span><br><span class="line">            .set(amount).equalToWhenPresent(record::getAmount)</span><br><span class="line">            .set(orderStatus).equalToWhenPresent(record::getOrderStatus)</span><br><span class="line">            .where(id, isEqualTo(record::getId))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="极简XML映射文件">极简XML映射文件</h3><p>极简<code>XML</code>映射文件生成只需要简单修改配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br></pre></td></tr></table></figure><p>生成三个文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// club.throwable.entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Byte orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(BigDecimal amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getOrderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderStatus</span><span class="params">(Byte orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// club.throwable.dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Order record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Order <span class="title">selectByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Order record)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mappings</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"club.throwable.dao.OrderMapper"</span>&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"BaseResultMap"</span> type=<span class="string">"club.throwable.entity.Order"</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">"id"</span> jdbcType=<span class="string">"BIGINT"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"order_id"</span> jdbcType=<span class="string">"VARCHAR"</span> property=<span class="string">"orderId"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"create_time"</span> jdbcType=<span class="string">"TIMESTAMP"</span> property=<span class="string">"createTime"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"amount"</span> jdbcType=<span class="string">"DECIMAL"</span> property=<span class="string">"amount"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"order_status"</span> jdbcType=<span class="string">"TINYINT"</span> property=<span class="string">"orderStatus"</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"deleteByPrimaryKey"</span> parameterType=<span class="string">"java.lang.Long"</span>&gt;</span><br><span class="line">        delete</span><br><span class="line">        from t_order</span><br><span class="line">        where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"insert"</span> parameterType=<span class="string">"club.throwable.entity.Order"</span>&gt;</span><br><span class="line">        &lt;selectKey keyProperty=<span class="string">"id"</span> order=<span class="string">"AFTER"</span> resultType=<span class="string">"java.lang.Long"</span>&gt;</span><br><span class="line">            <span class="function">SELECT <span class="title">LAST_INSERT_ID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">        insert into <span class="title">t_order</span> <span class="params">(order_id, create_time, amount,</span></span></span><br><span class="line"><span class="function"><span class="params">        order_status)</span></span></span><br><span class="line"><span class="function">        <span class="title">values</span> <span class="params">(#&#123;orderId,jdbcType=VARCHAR&#125;, #&#123;createTime,jdbcType=TIMESTAMP&#125;, #&#123;amount,jdbcType=DECIMAL&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">        #&#123;orderStatus,jdbcType=TINYINT&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">    &lt;update id</span>=<span class="string">"updateByPrimaryKey"</span> parameterType=<span class="string">"club.throwable.entity.Order"</span>&gt;</span><br><span class="line">        update t_order</span><br><span class="line">        set order_id     = #&#123;orderId,jdbcType=VARCHAR&#125;,</span><br><span class="line">            create_time  = #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">            amount       = #&#123;amount,jdbcType=DECIMAL&#125;,</span><br><span class="line">            order_status = #&#123;orderStatus,jdbcType=TINYINT&#125;</span><br><span class="line">        where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectByPrimaryKey"</span> parameterType=<span class="string">"java.lang.Long"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">        select id, order_id, create_time, amount, order_status</span><br><span class="line">        from t_order</span><br><span class="line">        where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">        select id, order_id, create_time, amount, order_status</span><br><span class="line">        from t_order</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"BaseResultMap"</span> type=<span class="string">"club.throwable.entity.Order"</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">"id"</span> jdbcType=<span class="string">"BIGINT"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"order_id"</span> jdbcType=<span class="string">"VARCHAR"</span> property=<span class="string">"orderId"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"create_time"</span> jdbcType=<span class="string">"TIMESTAMP"</span> property=<span class="string">"createTime"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"amount"</span> jdbcType=<span class="string">"DECIMAL"</span> property=<span class="string">"amount"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"order_status"</span> jdbcType=<span class="string">"TINYINT"</span> property=<span class="string">"orderStatus"</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"deleteByPrimaryKey"</span> parameterType=<span class="string">"java.lang.Long"</span>&gt;</span><br><span class="line">        delete</span><br><span class="line">        from t_order</span><br><span class="line">        where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"insert"</span> parameterType=<span class="string">"club.throwable.entity.Order"</span>&gt;</span><br><span class="line">        &lt;selectKey keyProperty=<span class="string">"id"</span> order=<span class="string">"BEFORE"</span> resultType=<span class="string">"java.lang.Long"</span>&gt;</span><br><span class="line">            <span class="function">SELECT <span class="title">LAST_INSERT_ID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">        insert into <span class="title">t_order</span> <span class="params">(id, order_id, create_time,</span></span></span><br><span class="line"><span class="function"><span class="params">        amount, order_status)</span></span></span><br><span class="line"><span class="function">        <span class="title">values</span> <span class="params">(#&#123;id,jdbcType=BIGINT&#125;, #&#123;orderId,jdbcType=VARCHAR&#125;, #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">        #&#123;amount,jdbcType=DECIMAL&#125;, #&#123;orderStatus,jdbcType=TINYINT&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">    &lt;update id</span>=<span class="string">"updateByPrimaryKey"</span> parameterType=<span class="string">"club.throwable.entity.Order"</span>&gt;</span><br><span class="line">        update t_order</span><br><span class="line">        set order_id     = #&#123;orderId,jdbcType=VARCHAR&#125;,</span><br><span class="line">            create_time  = #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">            amount       = #&#123;amount,jdbcType=DECIMAL&#125;,</span><br><span class="line">            order_status = #&#123;orderStatus,jdbcType=TINYINT&#125;</span><br><span class="line">        where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectByPrimaryKey"</span> parameterType=<span class="string">"java.lang.Long"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">        select id, order_id, create_time, amount, order_status</span><br><span class="line">        from t_order</span><br><span class="line">        where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectAll"</span> resultMap=<span class="string">"BaseResultMap"</span>&gt;</span><br><span class="line">        select id, order_id, create_time, amount, order_status</span><br><span class="line">        from t_order</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="编程式自定义类型映射">编程式自定义类型映射</h3><p>笔者喜欢把所有的非长整型的数字，统一使用<code>Integer</code>接收，因此需要自定义类型映射。编写映射器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultJavaTypeResolver</span> <span class="keyword">extends</span> <span class="title">JavaTypeResolverDefaultImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultJavaTypeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        typeMap.put(Types.SMALLINT, <span class="keyword">new</span> JdbcTypeInformation(<span class="string">"SMALLINT"</span>,</span><br><span class="line">                <span class="keyword">new</span> FullyQualifiedJavaType(Integer<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;</span><br><span class="line">        typeMap.put(Types.TINYINT, <span class="keyword">new</span> JdbcTypeInformation(<span class="string">"TINYINT"</span>,</span><br><span class="line">                <span class="keyword">new</span> FullyQualifiedJavaType(Integer<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时最好使用编程式运行代码生成器，修改<code>XML</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">"club.throwable.mbg.DefaultJavaTypeResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 如果已经存在生成过的文件是否进行覆盖</span></span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(Main.class.getResourceAsStream("/generator-configuration.xml"));</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator generator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        generator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库的<code>order_status</code>是<code>TINYINT</code>类型，生成出来的文件中的<code>orderStatus</code>字段全部替换使用<code>Integer</code>类型定义。</p><h2 id="小结">小结</h2><p>本文相对详尽地介绍了<code>Mybatis Generator</code>的使用方式，具体分析了<code>XML</code>配置文件中主要标签以及标签属性的功能。因为<code>Mybatis</code>在<code>Java</code>的<code>ORM</code>框架体系中还会有一段很长的时间处于主流地位，了解<code>Mybatis Generator</code>可以简化<code>CRUD</code>方法模板代码、实体以及<code>Mapper</code>接口代码生成，从而解放大量生产力。<code>Mybatis Generator</code>有不少第三方的扩展，例如<code>tk.mapper</code>或者<code>mybatis-plus</code>自身的扩展，可能附加的功能不一样，但是基本的使用是一致的。</p><p>参考资料：</p><ul><li><a href="http://mybatis.org/generator/index.html" target="_blank" rel="noopener">MyBatis Generator</a></li></ul><p>（本文完 c-5-d e-a-20191216 1:00）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近在做创业项目的时候因为有比较多的新需求，需要频繁基于&lt;code&gt;DDL&lt;/code&gt;生成&lt;code&gt;Mybatis&lt;/code&gt;适合的实体、&lt;code&gt;Mapper&lt;/code&gt;接口和映射文件。其中，代码生成器是&lt;code&gt;MyBatis Generator(MBG)&lt;/code&gt;，用到了&lt;code&gt;Mybatis-Generator-Core&lt;/code&gt;相关依赖，这里通过一篇文章详细地分析这个代码生成器的使用方式。本文编写的时候使用的&lt;code&gt;Mybatis-Generator&lt;/code&gt;版本为&lt;code&gt;1.4.0&lt;/code&gt;，其他版本没有进行过调研。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Framework" scheme="http://throwable.club/blog/categories/Framework/"/>
    
      <category term="Mybatis" scheme="http://throwable.club/blog/categories/Framework/Mybatis/"/>
    
    
      <category term="Java" scheme="http://throwable.club/blog/tags/Java/"/>
    
      <category term="Mybatis" scheme="http://throwable.club/blog/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>你的SpringBoot应用真的部署更新成功了吗</title>
    <link href="http://throwable.club/2019/12/09/spring-boot-server-deploy-monitor/"/>
    <id>http://throwable.club/2019/12/09/spring-boot-server-deploy-monitor/</id>
    <published>2019-12-08T17:44:12.000Z</published>
    <updated>2019-12-08T17:45:46.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>当我们在生产环境部署了<code>SpringBoot</code>应用的时候，虽然可以通过<code>Jenkins</code>的构建状态和<code>Linux</code>的<code>ps</code>命令去感知应用是否在新的一次发布中部署和启动成功，但是这种监控手段是运维层面的。那么，可以提供一种手段能够在应用层面感知服务在新的一次发布中的构建部署和启动是否成功吗？这个问题笔者花了一点时间想通了这个问题，通过这篇文章提供一个简单的实现思路。</p><a id="more"></a><h2 id="基本思路">基本思路</h2><p>其实基本思路很简单，一般<code>SpringBoot</code>应用会使用<code>Maven</code>插件打包（笔者不熟悉<code>Gradle</code>，所以暂时不对<code>Gradle</code>做分析），所以可以这样考虑：</p><ol><li><code>Maven</code>插件打包的时候，把<strong>构建时间</strong>和<code>pom</code>文件中的版本号都写到<code>jar</code>包的描述文件中，正确来说就是<code>MANIFEST.MF</code>文件中。</li><li>引入<code>spring-boot-starter-actuator</code>，通过<code>/actuator/info</code>端点去暴露应用的信息（最好控制网络访问权限为只允许内网访问）。</li><li>把第1步中打包到<code>jar</code>包中的<code>MANIFEST.MF</code>文件的内容读取并且加载到<code>SpringBoot</code>环境属性中的<code>info.*</code>属性中，以便可以通过<code>/actuator/info</code>访问。</li></ol><p>思路定好了，那么下面开始实施编码。</p><h2 id="编码实现">编码实现</h2><p>最近刚好在调研蚂蚁金服的<code>SofaStack</code>体系，这里引入<code>SofaBoot</code>编写示例。<code>pom</code>文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>club.throwable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sofa-boot-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>sofa-boot-sample<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa.boot.version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">sofa.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.build.timestamp.format</span>&gt;</span>yyyy-MM-dd HH:mm:ss.SSS<span class="tag">&lt;/<span class="name">maven.build.timestamp.format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sofaboot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sofa.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>healthcheck-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>sofa-boot-sample<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addBuildEnvironmentEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addBuildEnvironmentEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Application-Name</span>&gt;</span>$&#123;project.groupId&#125;:$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Application-Name</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Build-Timestamp</span>&gt;</span>$&#123;maven.build.timestamp&#125;<span class="tag">&lt;/<span class="name">Build-Timestamp</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>pom</code>文件中一些属性和占位符的设置，可以参考一下这两个链接：<a href="http://maven.apache.org/shared/maven-archiver/index.html" target="_blank" rel="noopener">Maven-Archiver</a>和<a href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Available_Variables" target="_blank" rel="noopener">Available Variables</a>。<code>SpringBoot</code>的配置文件<code>application.yaml</code>如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">10091</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">info:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sofa-boot-sample</span></span><br></pre></td></tr></table></figure><p><strong>这里要注意一点</strong>：<code>SpringBoot</code>应用通过其<code>Maven</code>插件打出来的<code>jar</code>包解压后的目录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sofa-boot-sample.jar</span><br><span class="line">  - META-INF</span><br><span class="line">    - MANIFEST.MF</span><br><span class="line">    - maven ...</span><br><span class="line">  - org</span><br><span class="line">    - springframework </span><br><span class="line">      - boot ...</span><br><span class="line">  - BOOT-INF</span><br><span class="line">    - classes ...</span><br><span class="line">    - lib ...</span><br></pre></td></tr></table></figure><p>了解此解压目录是我们编写<code>MANIFEST.MF</code>文件的解析实现过程的前提。编写<code>MANIFEST.MF</code>文件的解析类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"ConstantConditions"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ManiFestFileExtractUtils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    X;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; RESULT = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ManiFestFileExtractUtils<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String jarFilePath = ClassUtils.getDefaultClassLoader().getResource(<span class="string">""</span>).getPath().replace(<span class="string">"!/BOOT-INF/classes!/"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (jarFilePath.startsWith(<span class="string">"file"</span>)) &#123;</span><br><span class="line">            jarFilePath = jarFilePath.substring(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.info(<span class="string">"读取的Jar路径为:&#123;&#125;"</span>, jarFilePath);</span><br><span class="line">        <span class="keyword">try</span> (JarFile jarFile = <span class="keyword">new</span> JarFile(jarFilePath)) &#123;</span><br><span class="line">            JarEntry entry = jarFile.getJarEntry(<span class="string">"META-INF/MANIFEST.MF"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != entry) &#123;</span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(jarFile.getInputStream(entry), StandardCharsets.UTF_8));</span><br><span class="line">                String line;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">null</span> != (line = reader.readLine())) &#123;</span><br><span class="line">                    LOGGER.info(<span class="string">"读取到行:&#123;&#125;"</span>, line);</span><br><span class="line">                    <span class="keyword">int</span> i = line.indexOf(<span class="string">":"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                        String key = line.substring(<span class="number">0</span>, i).trim();</span><br><span class="line">                        String value = line.substring(i + <span class="number">1</span>).trim();</span><br><span class="line">                        RESULT.put(key, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">"解析MANIFEST.MF文件异常"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">extract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过一个<code>CommandLineRunner</code>的实现把<code>MANIFEST.MF</code>文件的内容写到<code>Environment</code>实例中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SofaBootSampleRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigurableEnvironment configurableEnvironment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MutablePropertySources propertySources = configurableEnvironment.getPropertySources();</span><br><span class="line">        Map&lt;String, String&gt; result = ManiFestFileExtractUtils.X.extract();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : result.entrySet()) &#123;</span><br><span class="line">            String key = <span class="string">"info."</span> + entry.getKey();</span><br><span class="line">            properties.setProperty(key, entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!properties.isEmpty()) &#123;</span><br><span class="line">            propertySources.addFirst(<span class="keyword">new</span> PropertiesPropertySource(<span class="string">"infoProperties"</span>, properties));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SofaBootSampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SofaBootSampleApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果">最终效果</h2><p>在项目的根目录使用命令<code>mvn package</code>，打出<code>jar</code>包后直接启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Jar包的目录</span><br><span class="line">java -jar sofa-boot-sample.jar</span><br></pre></td></tr></table></figure><p>调用<code>http://localhost:10091/actuator/info</code>接口输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Spring-Boot-Version"</span>: <span class="string">"2.1.0.RELEASE"</span>,</span><br><span class="line"><span class="attr">"Start-Class"</span>: <span class="string">"club.throwable.sofa.SofaBootSampleApplication"</span>,</span><br><span class="line"><span class="attr">"Main-Class"</span>: <span class="string">"org.springframework.boot.loader.JarLauncher"</span>,</span><br><span class="line"><span class="attr">"Manifest-Version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line"><span class="attr">"Build-Jdk-Spec"</span>: <span class="string">"1.8"</span>,</span><br><span class="line"><span class="attr">"Spring-Boot-Classes"</span>: <span class="string">"BOOT-INF/classes/"</span>,</span><br><span class="line"><span class="attr">"Created-By"</span>: <span class="string">"Maven Jar Plugin 3.2.0"</span>,</span><br><span class="line"><span class="attr">"Build-Timestamp"</span>: <span class="string">"2019-12-08 17:41:21.844"</span>,</span><br><span class="line"><span class="attr">"Spring-Boot-Lib"</span>: <span class="string">"BOOT-INF/lib/"</span>,</span><br><span class="line"><span class="attr">"Application-Name"</span>: <span class="string">"club.throwable:sofa-boot-sample:1.0-SNAPSHOT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变<code>pom</code>文件中的版本标签<code>&lt;version&gt;</code>为<code>1.0.0</code>，再次打包并且启动成功后调用<code>http://localhost:10091/actuator/info</code>接口输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"Spring-Boot-Version"</span>: <span class="string">"2.1.0.RELEASE"</span>,</span><br><span class="line"><span class="attr">"Start-Class"</span>: <span class="string">"club.throwable.sofa.SofaBootSampleApplication"</span>,</span><br><span class="line"><span class="attr">"Main-Class"</span>: <span class="string">"org.springframework.boot.loader.JarLauncher"</span>,</span><br><span class="line"><span class="attr">"Manifest-Version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line"><span class="attr">"Build-Jdk-Spec"</span>: <span class="string">"1.8"</span>,</span><br><span class="line"><span class="attr">"Spring-Boot-Classes"</span>: <span class="string">"BOOT-INF/classes/"</span>,</span><br><span class="line"><span class="attr">"Created-By"</span>: <span class="string">"Maven Jar Plugin 3.2.0"</span>,</span><br><span class="line"><span class="attr">"Build-Timestamp"</span>: <span class="string">"2019-12-08 17:42:07.273"</span>,</span><br><span class="line"><span class="attr">"Spring-Boot-Lib"</span>: <span class="string">"BOOT-INF/lib/"</span>,</span><br><span class="line"><span class="attr">"Application-Name"</span>: <span class="string">"club.throwable:sofa-boot-sample:1.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见构建时间戳<code>Build-Timestamp</code>和服务名<code>Application-Name</code>都发生了变化，达到了监控服务是否正常部署和启动的目的。如果有多个服务节点，可以添加一个<code>ip</code>属性加以区分。</p><h2 id="小结">小结</h2><p>这篇文章通过<code>SpringBoot</code>一些实用技巧实现了应用层面监控应用是否正常打包部署更新和启动成功的问题。</p><p>（本文完 e-a-20191209:1:39 c-1-d）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;当我们在生产环境部署了&lt;code&gt;SpringBoot&lt;/code&gt;应用的时候，虽然可以通过&lt;code&gt;Jenkins&lt;/code&gt;的构建状态和&lt;code&gt;Linux&lt;/code&gt;的&lt;code&gt;ps&lt;/code&gt;命令去感知应用是否在新的一次发布中部署和启动成功，但是这种监控手段是运维层面的。那么，可以提供一种手段能够在应用层面感知服务在新的一次发布中的构建部署和启动是否成功吗？这个问题笔者花了一点时间想通了这个问题，通过这篇文章提供一个简单的实现思路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://throwable.club/blog/categories/Spring/"/>
    
      <category term="SpringBoot" scheme="http://throwable.club/blog/categories/Spring/SpringBoot/"/>
    
    
      <category term="Spring" scheme="http://throwable.club/blog/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://throwable.club/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC请求参数接收总结(一)</title>
    <link href="http://throwable.club/2019/12/04/spring-mvc-param-handle-summary-1/"/>
    <id>http://throwable.club/2019/12/04/spring-mvc-param-handle-summary-1/</id>
    <published>2019-12-03T17:21:58.000Z</published>
    <updated>2019-12-03T17:24:23.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>在日常使用<code>SpringMVC</code>进行开发的时候，有可能遇到前端各种类型的请求参数，这里做一次相对全面的总结。<code>SpringMVC</code>中处理控制器参数的接口是<code>HandlerMethodArgumentResolver</code>，此接口有众多子类，分别处理不同(注解类型)的参数，下面只列举几个子类：</p><ul><li><code>RequestParamMethodArgumentResolver</code>：解析处理使用了<code>@RequestParam</code>注解的参数、<code>MultipartFile</code>类型参数和<code>Simple</code>类型(如<code>long</code>、<code>int</code>等类型)参数。</li><li><code>RequestResponseBodyMethodProcessor</code>：解析处理<code>@RequestBody</code>注解的参数。</li><li><code>PathVariableMapMethodArgumentResolver</code>：解析处理<code>@PathVariable</code>注解的参数。</li></ul><a id="more"></a><p>实际上，一般在解析一个控制器的请求参数的时候，用到的是<code>HandlerMethodArgumentResolverComposite</code>，里面装载了所有启用的<code>HandlerMethodArgumentResolver</code>子类。而<code>HandlerMethodArgumentResolver</code>子类在解析参数的时候使用到<code>HttpMessageConverter</code>（实际上也是一个列表，进行遍历匹配解析）子类进行匹配解析，常见的如<code>MappingJackson2HttpMessageConverter</code>（使用<code>Jackson</code>进行序列化和反序列化）。而<code>HandlerMethodArgumentResolver</code>子类到底依赖什么<code>HttpMessageConverter</code>实例实际上是由请求头中的<code>Content-Type</code>（在<code>SpringMVC</code>中统一命名为<code>MediaType</code>，见<code>org.springframework.http.MediaType</code>）决定的，因此我们在处理控制器的请求参数之前必须要明确外部请求的<code>Content-Type</code>到底是什么。上面的逻辑可以直接看源码<code>AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters</code>，思路是比较清晰的。在<code>@RequestMapping</code>注解中，<code>produces</code>和<code>consumes</code>属性就是和请求或者响应的<code>Content-Type</code>相关的：</p><ul><li><code>consumes</code>属性：指定处理请求的提交内容类型（<code>Content-Type</code>），例如<code>application/json</code>、<code>text/html</code>等等，只有命中了对应的<code>Content-Type</code>的值才会接受该请求。</li><li><code>produces</code>属性：指定返回的内容类型，仅当某个请求的请求头中的（<code>Accept</code>）类型中包含该指定类型才返回，如果返回的是JSON数据一般考虑使用<code>application/json;charset=UTF-8</code>。</li></ul><p>另外提一点，<code>SpringMVC</code>中默认使用<code>Jackson</code>作为JSON的工具包，如果不是完全理解透整套源码的运作，一般不是十分建议修改默认使用的<code>MappingJackson2HttpMessageConverter</code>（例如有些人喜欢使用<code>FastJson</code>，实现<code>HttpMessageConverter</code>引入<code>FastJson</code>做HTTP消息转换器，这种做法并不推荐）。</p><h2 id="SpringMVC请求参数接收">SpringMVC请求参数接收</h2><p>其实一般的表单或者JSON数据的请求都是相对简单的，一些复杂的处理主要包括URL路径参数、文件上传、数组或者列表类型数据等。另外，关于参数类型中存在日期类型属性（例如<code>java.util.Date</code>、<code>java.sql.Date</code>、<code>java.time.LocalDate</code>、<code>java.time.LocalDateTime</code>、<code>java.time.ZonedDateTime</code>等等），解析的时候一般需要自定义实现的逻辑实现<code>String--&gt;日期类型</code>的转换。其实道理很简单，日期相关的类型对于每个国家、每个时区甚至每个使用者来说认知都不一定相同，所以<code>SpringMVC</code>并没有对于日期时间类型的解析提供一个通用的解决方案。在演示一些例子可能用到下面的模特类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Contact&gt; contacts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面主要以<code>HTTP</code>的<code>GET</code>方法和<code>POST</code>方法提交在<code>SpringMVC</code>体系中正确处理参数的例子进行分析，还会花精力整理<code>SpringMVC</code>体系中<strong>独有的<code>URL</code>路径参数</strong>处理的一些技巧以及最常见的<strong>日期参数</strong>处理的合理实践（对于<code>GET</code>方法和<code>POST</code>方法提交的参数处理，基本囊括了其他如<code>DELETE</code>、<code>PUT</code>等方法的参数处理，随机应变即可）。</p><h3 id="GET方法请求参数处理">GET方法请求参数处理</h3><p><code>HTTP(s)</code>协议使用<code>GET</code>方法进行请求的时候，提交的参数位于<code>URL</code>模式的<code>Query</code>部分，也就是<code>URL</code>的<code>?</code>之后的参数，格式是<code>key1=value1&amp;key2=value2</code>。<code>GET</code>方法请求参数可以有多种方法获取：</p><ol><li>使用<code>@RequestParam</code>注解处理。</li><li>使用对象接收，注意对象的属性名称要和<code>Query</code>中的参数名称一致。</li><li>使用<code>HttpServletRequest</code>实例提供的方法（不推荐，存在硬编码）。</li></ol><p>假设请求的<code>URL</code>为<code>http://localhost:8080/get?name=doge&amp;age=26</code>，那么控制器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/get1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get1</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                     @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"age"</span>)</span> Integer age) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"name:&#123;&#125;,age:&#123;&#125;"</span>, name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/get2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get2</span><span class="params">(UserVo vo)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"name:&#123;&#125;,age:&#123;&#125;"</span>, vo.getName(), vo.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/get3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get3</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        String age = request.getParameter(<span class="string">"age"</span>);</span><br><span class="line">        log.info(<span class="string">"name:&#123;&#125;,age:&#123;&#125;"</span>, name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单参数">表单参数</h3><p>表单参数，一般对应于页面上<code>&lt;form&gt;</code>标签内的所有<code>&lt;input&gt;</code>标签的<code>name-value</code>聚合而成的参数，一般<code>Content-Type</code>指定为<code>application/x-www-form-urlencoded</code>，也就是会进行<code>URL</code>编码。下面介绍几种常见的表单参数提交的参数形式。</p><ul><li>【非对象】- 非对象类型单个参数接收。</li></ul><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-1.png" alt="spmvc-p-1"></p><p>对应的控制器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/post"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                   @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"age"</span>)</span> Integer age) </span>&#123;</span><br><span class="line">    String content = String.format(<span class="string">"name = %s,age = %d"</span>, name, age);</span><br><span class="line">    log.info(content);</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话，如果有毅力的话，所有的复杂参数的提交最终都可以转化为多个单参数接收，不过这样做会产生十分多冗余的代码，而且可维护性比较低。这种情况下，用到的参数处理器是<code>RequestParamMapMethodArgumentResolver</code>。</p><ul><li>【对象】 - 对象类型参数接收。</li></ul><p>我们接着写一个接口用于提交用户信息，用到的是上面提到的模特类，主要包括用户姓名、年龄和联系人信息列表，这个时候，我们目标的控制器最终编码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    log.info(user.toString());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还是指定<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>，接着我们需要构造请求参数：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-2.png" alt="spmvc-p-2"></p><p>因为没有使用注解，最终的参数处理器为<code>ServletModelAttributeMethodProcessor</code>，主要是把<code>HttpServletRequest</code>中的表单参数封装到<code>MutablePropertyValues</code>实例中，再通过参数类型实例化(通过构造反射创建<code>User</code>实例)，反射匹配属性进行值的填充。另外，请求复杂参数里面的列表属性请求参数看起来比较奇葩，实际上和在<code>.properties</code>文件中添加最终映射到<code>Map</code>类型的参数的写法是一致的。那么，能不能把整个请求参数塞在一个字段中提交呢？</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-3.png" alt="spmvc-p-3"></p><p>直接这样做是不行的，因为实际提交的<code>Form</code>表单，<code>key</code>是<code>user</code>字符串，<code>value</code>实际上也是一个字符串，缺少一个<code>String-&gt;User</code>类型的转换器，实际上<code>RequestParamMethodArgumentResolver</code>依赖<code>WebConversionService</code>中<code>Converter</code>实例列表进行参数转换：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-4.png" alt="spmvc-p-4"></p><p>解决办法还是有的，添加一个<code>org.springframework.core.convert.converter.Converter</code>实现即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUserConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowaired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> objectMapper.readValue(source, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种做法属于曲线救国的做法，不推荐使用在生产环境，但是如果有些第三方接口的对接无法避免这种参数，可以选择这种实现方式。</p><ul><li>【数组】 - 列表或者数组类型参数。</li></ul><p>极度不推荐使用在<code>application/x-www-form-urlencoded</code>这种媒体类型的表单提交的形式下强行使用列表或者数组类型参数，除非是为了兼容处理历史遗留系统的参数提交处理。例如提交的参数形式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list &#x3D; [&quot;string-1&quot;, &quot;string-2&quot;, &quot;string-3&quot;]</span><br></pre></td></tr></table></figure><p>那么表单参数的形式要写成：</p><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">value</th></tr></thead><tbody><tr><td style="text-align:center">list[0]</td><td style="text-align:center">string-1</td></tr><tr><td style="text-align:center">list[1]</td><td style="text-align:center">string-2</td></tr><tr><td style="text-align:center">list[2]</td><td style="text-align:center">string-3</td></tr></tbody></table><p>控制器的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(@RequestParam(name=<span class="string">"list"</span>)</span> List&lt;String&gt; list) </span>&#123;</span><br><span class="line">    log.info(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个更加复杂的例子如下，假设想要提交的报文格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user &#x3D; [&#123;&quot;name&quot;:&quot;doge-1&quot;,&quot;age&quot;: 21&#125;,&#123;&quot;name&quot;:&quot;doge-2&quot;,&quot;age&quot;: 22&#125;]</span><br></pre></td></tr></table></figure><p>那么表单参数的形式要写成：</p><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">value</th></tr></thead><tbody><tr><td style="text-align:center">user[0].name</td><td style="text-align:center">doge-1</td></tr><tr><td style="text-align:center">user[0].age</td><td style="text-align:center">21</td></tr><tr><td style="text-align:center">user[1].name</td><td style="text-align:center">doge-2</td></tr><tr><td style="text-align:center">user[1].age</td><td style="text-align:center">22</td></tr></tbody></table><p>控制器的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUsers</span><span class="params">(@RequestParam(name=<span class="string">"user"</span>)</span> List&lt;UserVo&gt; users) </span>&#123;</span><br><span class="line">    log.info(users);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON参数">JSON参数</h3><p>一般来说，直接在<code>POST</code>请求中的请求体提交一个JSON字符串这种方式对于<code>SpringMVC</code>来说是比较友好的，只需要把<code>Content-Type</code>设置为<code>application/json</code>，提交一个原始的JSON字符串即可，控制器方法参数使用<code>@RequestBody</code>注解处理：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-5.png" alt="spmvc-p-5"></p><p>后端控制器的代码也比较简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/user-2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">saveUser2</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    log.info(user.toString());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为使用了<code>@RequestBody</code>注解，最终使用到的参数处理器为<code>RequestResponseBodyMethodProcessor</code>，实际上会用到<code>MappingJackson2HttpMessageConverter</code>进行参数类型的转换，底层依赖到<code>Jackson</code>相关的包。推荐使用这种方式，这是最常用也是最稳健的<code>JSON</code>参数处理方式。</p><h2 id="URL路径参数">URL路径参数</h2><p><code>URL</code>路径参数，或者叫请求路径参数是基于URL模板获取到的参数，例如<code>/user/{userId}</code>是一个<code>URL</code>模板(<code>URL</code>模板中的参数占位符是{})，实际请求的<code>URL</code>为<code>/user/1</code>，那么通过匹配实际请求的<code>URL</code>和<code>URL</code>模板就能提取到<code>userId</code>为1。在<code>SpringMVC</code>中，<code>URL</code>模板中的路径参数叫做<code>PathVariable</code>，对应注解<code>@PathVariable</code>，对应的参数处理器为<code>PathVariableMethodArgumentResolver</code>。<strong>注意一点是，@PathVariable的解析是按照value(name)属性进行匹配，和URL参数的顺序是无关的</strong>。举个简单的例子：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-6.png" alt="spmvc-p-6"></p><p>后台的控制器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/user/&#123;name&#125;/&#123;age&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUser1</span><span class="params">(@PathVariable(value = <span class="string">"age"</span>)</span> Integer age,</span></span><br><span class="line"><span class="function">@<span class="title">PathVariable</span><span class="params">(value = <span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">String content = String.format(<span class="string">"name = %s,age = %d"</span>, name, age);</span><br><span class="line">log.info(content);</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种用法被广泛使用于<code>Representational State Transfer(REST)</code>的软件架构风格，个人觉得这种风格是比较灵活和清晰的(从URL和请求方法就能完全理解接口的意义和功能)。下面再介绍两种相对特殊的使用方式。</p><ul><li>带条件的<code>URL</code>参数。</li></ul><p>其实路径参数支持正则表达式，例如我们在使用<code>/sex/{sex}</code>接口的时候，要求<code>sex</code>必须是<code>F(Female)</code>或者<code>M(Male)</code>，那么我们的URL模板可以定义为<code>/sex/{sex:M|F}</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/sex/&#123;sex:M|F&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUser2</span><span class="params">(@PathVariable(value = <span class="string">"sex"</span>)</span> String sex)</span>&#123;</span><br><span class="line">    log.info(sex);</span><br><span class="line">    <span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有<code>/sex/F</code>或者<code>/sex/M</code>的请求才会进入<code>findUser2()</code>控制器方法，其他该路径前缀的请求都是非法的，会返回404状态码。这里仅仅是介绍了一个最简单的<code>URL</code>参数正则表达式的使用方式，更强大的用法可以自行摸索。</p><ul><li><code>@MatrixVariable</code>的使用。</li></ul><p><code>MatrixVariable</code>也是<code>URL</code>参数的一种，对应注解<code>@MatrixVariable</code>，不过它并不是<code>URL</code>中的一个值(这里的值指定是两个&quot;/“之间的部分)，而是值的一部分，它通过”;“进行分隔，通过”=&quot;进行K-V设置。说起来有点抽象，举个例子：假如我们需要打电话给一个名字为doge，性别是男，分组是码畜的程序员，<code>GET</code>请求的<code>URL</code>可以表示为：<code>/call/doge;gender=male;group=programmer</code>，我们设计的控制器方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/call/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(@PathVariable(value = <span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                   @<span class="title">MatrixVariable</span><span class="params">(value = <span class="string">"gender"</span>)</span> String gender,</span></span><br><span class="line"><span class="function">                   @<span class="title">MatrixVariable</span><span class="params">(value = <span class="string">"group"</span>)</span> String group) </span>&#123;</span><br><span class="line">    String content = String.format(<span class="string">"name = %s,gender = %s,group = %s"</span>, name, gender, group);</span><br><span class="line">    log.info(content);</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果你按照上面的例子写好代码，尝试请求一下该接口发现是报错的：<code>400 Bad Request - Missing matrix variable 'gender' for method parameter of type String</code>。这是因为<code>@MatrixVariable</code>注解的使用是不安全的，在<code>SpringMVC</code>中默认是关闭对其支持。要开启对<code>@MatrixVariable</code>的支持，需要设置<code>RequestMappingHandlerMapping#setRemoveSemicolonContent</code>方法为<code>false</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RequestMappingHandlerMapping requestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">requestMappingHandlerMapping.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除非有很特殊的需要，否则不建议使用<code>@MatrixVariable</code>。</p><h2 id="文件上传">文件上传</h2><p>文件上传在使用<code>POSTMAN</code>模拟请求的时候需要选择<code>form-data</code>，<code>POST</code>方式进行提交：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-8.png" alt="spmvc-p-8"></p><p>假设我们在D盘有一个图片文件叫doge.jpg，现在要通过本地服务接口把文件上传，控制器的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/file1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">file1</span><span class="params">(@RequestPart(name = <span class="string">"file1"</span>)</span> MultipartFile multipartFile) </span>&#123;</span><br><span class="line">String content = String.format(<span class="string">"name = %s,originName = %s,size = %d"</span>,</span><br><span class="line">multipartFile.getName(), multipartFile.getOriginalFilename(), multipartFile.getSize());</span><br><span class="line">log.info(content);</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = file1,originName = doge.jpg,size = <span class="number">68727</span></span><br></pre></td></tr></table></figure><p>可能有点疑惑，参数是怎么来的，我们可以用<code>Fildder</code>软件抓个包看下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-7.png" alt="spmvc-p-7"></p><p>可知<code>MultipartFile</code>实例的主要属性分别来自<code>Content-Disposition</code>、<code>Content-Type</code>和<code>Content-Length</code>，另外，<code>InputStream</code>用于读取请求体的最后部分(文件的字节序列)。参数处理器用到的是<code>RequestPartMethodArgumentResolver</code>(记住一点，使用了<code>@RequestPart</code>和<code>MultipartFile</code>一定是使用此参数处理器)。在其他情况下，使用<code>@RequestParam</code>和<code>MultipartFile</code>或者仅仅使用<code>MultipartFile</code>(参数的名字必须和<code>POST</code>表单中的<code>Content-Disposition</code>描述的<code>name</code>一致)也可以接收上传的文件数据，主要是通过<code>RequestParamMethodArgumentResolver</code>进行解析处理的，它的功能比较强大，具体可以看其<code>supportsParameter</code>方法，这两种情况的控制器方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/file2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">file2</span><span class="params">(MultipartFile file1)</span> </span>&#123;</span><br><span class="line">String content = String.format(<span class="string">"name = %s,originName = %s,size = %d"</span>,</span><br><span class="line">file1.getName(), file1.getOriginalFilename(), file1.getSize());</span><br><span class="line">log.info(content);</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/file3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">file3</span><span class="params">(@RequestParam(name = <span class="string">"file1"</span>)</span> MultipartFile multipartFile) </span>&#123;</span><br><span class="line">String content = String.format(<span class="string">"name = %s,originName = %s,size = %d"</span>,</span><br><span class="line">multipartFile.getName(), multipartFile.getOriginalFilename(), multipartFile.getSize());</span><br><span class="line">log.info(content);</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他参数">其他参数</h2><p>其他参数主要包括请求头、<code>Cookie</code>、<code>Model</code>、<code>Map</code>等相关参数，还有一些并不是很常用或者一些相对原生的属性值获取(例如<code>HttpServletRequest</code>、<code>HttpServletResponse</code>等)不做讨论。</p><h3 id="请求头">请求头</h3><p>请求头的值主要通过<code>@RequestHeader</code>注解的参数获取，参数处理器是<code>RequestHeaderMethodArgumentResolver</code>，需要在注解中指定请求头的<code>Key</code>。简单实用如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-9.png" alt="spmvc-p-9"></p><p>控制器方法代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/header"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">header</span><span class="params">(@RequestHeader(name = <span class="string">"Content-Type"</span>)</span> String Content-Type) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Content-Type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie">Cookie</h3><p><code>Cookie</code>的值主要通过<code>@CookieValue</code>注解的参数获取，参数处理器为<code>ServletCookieValueMethodArgumentResolver</code>，需要在注解中指定<code>Cookie</code>的<code>Key</code>。控制器方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/cookie"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(@CookieValue(name = <span class="string">"JSESSIONID"</span>)</span> String sessionId) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Model类型参数">Model类型参数</h3><p><code>Model</code>类型参数的处理器是<code>ModelMethodProcessor</code>，实际上处理此参数是直接返回<code>ModelAndViewContainer</code>实例中的<code>Model</code>(<code>ModelMap</code>类型)，因为要桥接不同的接口和类的功能，因此回调的实例是<code>BindingAwareModelMap</code>类型，此类型继承自<code>ModelMap</code>同时实现了<code>Model</code>接口。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/model"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">model</span><span class="params">(Model model, ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"&#123;&#125;"</span>, model == modelMap);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意调用此接口，控制台输出INFO日志内容为：true。还要注意一点：<code>ModelMap</code>或者<code>Model</code>中添加的属性项会附加到<code>HttpRequestServlet</code>实例中带到页面中进行渲染。</p><h3 id="ModelAttribute参数">@ModelAttribute参数</h3><p><code>@ModelAttribute</code>注解处理的参数处理器为<code>ModelAttributeMethodProcessor</code>，<code>@ModelAttribute</code>的功能源码的注释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Annotation that binds a method parameter or method return value to a named model attribute, exposed to a web view.</span><br></pre></td></tr></table></figure><p>简单来说，就是通过<code>key-value</code>形式绑定方法参数或者方法返回值到<code>Model(Map)</code>中，区别下面三种情况：</p><ol><li><code>@ModelAttribute</code>使用在方法(返回值)上，方法没有返回值(<code>void</code>类型)， <code>Model(Map)</code>参数需要自行设置。</li><li><code>@ModelAttribute</code>使用在方法(返回值)上，方法有返回值(非<code>void</code>类型)，返回值会添加到<code>Model(Map)</code>参数，<code>key</code>由<code>@ModelAttribute</code>的<code>value</code>指定，否则会使用返回值类型字符串(首写字母变为小写，如返回值类型为<code>Integer</code>，则<code>key</code>为<code>integer</code>)。</li><li><code>@ModelAttribute</code>使用在方法参数中，则可以获取同一个控制器中的已经设置的<code>@ModelAttribute</code>对应的值。</li></ol><p>在一个控制器(使用了<code>@Controller</code>)中，如果存在一到多个使用了<code>@ModelAttribute</code>的方法，这些方法总是在进入控制器方法之前执行，并且执行顺序是由加载顺序决定的(具体的顺序是带参数的优先，并且按照方法首字母升序排序)，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelAttributeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"before.........."</span>);</span><br><span class="line">model.addAttribute(<span class="string">"before"</span>, <span class="string">"beforeValue"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span>(value = <span class="string">"beforeArg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">beforeArg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"beforeArg.........."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"beforeArgValue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/modelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">modelAttribute</span><span class="params">(Model model, @ModelAttribute(value = <span class="string">"beforeArg"</span>)</span> String beforeArg) </span>&#123;</span><br><span class="line">log.info(<span class="string">"modelAttribute.........."</span>);</span><br><span class="line">log.info(<span class="string">"beforeArg..........&#123;&#125;"</span>, beforeArg);</span><br><span class="line">log.info(<span class="string">"&#123;&#125;"</span>, model);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"after.........."</span>);</span><br><span class="line">model.addAttribute(<span class="string">"after"</span>, <span class="string">"afterValue"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span>(value = <span class="string">"afterArg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">afterArg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"afterArg.........."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"afterArgValue"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用此接口，控制台输出日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">after..........</span><br><span class="line">before..........</span><br><span class="line">afterArg..........</span><br><span class="line">beforeArg..........</span><br><span class="line">modelAttribute..........</span><br><span class="line">beforeArg..........beforeArgValue</span><br><span class="line">&#123;after&#x3D;afterValue, before&#x3D;beforeValue, afterArg&#x3D;afterArgValue, beforeArg&#x3D;beforeArgValue&#125;</span><br></pre></td></tr></table></figure><p>可以印证排序规则和参数设置、获取的结果和前面的分析是一致的。</p><h3 id="Errors或者BindingResult参数">Errors或者BindingResult参数</h3><p><code>Errors</code>其实是<code>BindingResult</code>的父接口，<code>BindingResult</code>主要用于回调JSR参数校验异常的属性项，如果JSR校验异常，一般会抛出<code>MethodArgumentNotValidException</code>异常，并且会返回400(Bad Request)，见全局异常处理器<code>DefaultHandlerExceptionResolver</code>。<code>Errors</code>类型的参数处理器为<code>ErrorsMethodArgumentResolver</code>。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/errors"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">errors</span><span class="params">(@RequestBody @Validated ErrorsModel errors, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">for</span> (ObjectError objectError : bindingResult.getAllErrors()) &#123;</span><br><span class="line">log.warn(<span class="string">"name=&#123;&#125;,message=&#123;&#125;"</span>, objectError.getObjectName(), objectError.getDefaultMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ErrorsModel</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorsModel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"id must not be null!"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"errors name must not be empty!"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用接口控制台Warn日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;errors,message&#x3D;errors name must not be empty!</span><br></pre></td></tr></table></figure><p>一般情况下，不建议用这种方式处理JSR校验异常的属性项，因为会涉及到大量的重复的硬编码工作，建议：方式一直接继承<code>ResponseEntityExceptionHandler</code>覆盖对应的方法或者方式二同时使用<code>@ExceptionHandler</code>和<code>@(Rest)ControllerAdvice</code>注解进行异常处理。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationRestControllerAdvice</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(BusinessException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Response</span> <span class="title">handleBusinessException</span>(<span class="title">BusinessException</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;</span><br><span class="line">           <span class="comment">// 这里处理异常和返回值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Value参数">@Value参数</h3><p>控制器方法的参数可以是<code>@Value</code>注解修饰的参数，会从<code>Environment</code>实例中装配和转换属性值到对应的参数中(也就是参数的来源并不是请求体)，参数处理器为<code>ExpressionValueMethodArgumentResolver</code>。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/value"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">(@Value(value = <span class="string">"$&#123;spring.application.name&#125;"</span>)</span> String name) </span>&#123;</span><br><span class="line">    log.info(<span class="string">"spring.application.name=&#123;&#125;"</span>, name);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>spring.application.name</code>属性一般在配置文件中指定，在加载配置文件属性的时候添加到全局的<code>Environment</code>中。</p><h3 id="Map类型参数">Map类型参数</h3><p><code>Map</code>类型参数的范围相对比较广，对应一系列的参数处理器，注意区别使用了上面提到的部分注解的<code>Map</code>类型和完全不使用注解的<code>Map</code>类型参数，两者的处理方式不相同。下面列举几个相对典型的<code>Map</code>类型参数处理例子。</p><p><strong>不使用任何注解的Map&lt;String,Object&gt;参数</strong></p><p>这种情况下参数实际上直接回调<code>ModelAndViewContainer</code>中的<code>ModelMap</code>实例，参数处理器为<code>MapMethodProcessor</code>，往<code>Map</code>参数中添加的属性将会带到页面中。</p><p><strong>使用@RequestParam注解的Map&lt;String,Object&gt;参数</strong></p><p>这种情况下的参数处理器为<code>RequestParamMapMethodArgumentResolver</code>，使用的请求方式需要指定<code>Content-Type</code>为<code>x-www-form-urlencoded</code>，不能使用<code>application/json</code>的方式：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-10.png" alt="spmvc-p-10"></p><p>控制器代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/map"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">mapArgs</span><span class="params">(@RequestParam Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"&#123;&#125;"</span>, map);</span><br><span class="line">    <span class="keyword">return</span> map.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用@RequestHeader注解的Map&lt;String,Object&gt;参数</strong></p><p>这种情况下的参数处理器为<code>RequestHeaderMapMethodArgumentResolver</code>，作用是获取请求的所有请求头的<code>Key-Value</code>。</p><p><strong>使用@PathVariable注解的Map&lt;String,Object&gt;参数</strong></p><p>这种情况下的参数处理器为<code>PathVariableMapMethodArgumentResolver</code>，作用是获取所有路径参数封装为<code>Key-Value</code>结构。</p><h3 id="MultipartFile集合-批量文件上传">MultipartFile集合-批量文件上传</h3><p>批量文件上传的时候，我们一般需要接收一个<code>MultipartFile</code>集合，可以有两种选择：</p><ol><li>使用<code>MultipartHttpServletRequest</code>参数，直接调用<code>getFiles</code>方法获取<code>MultipartFile</code>列表。</li><li>使用<code>@RequestParam</code>注解修饰<code>MultipartFile</code>列表，参数处理器是<code>RequestParamMethodArgumentResolver</code>，其实就是第1种方式的封装而已。</li></ol><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-11.png" alt="spmvc-p-11"></p><p>控制器方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/parts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">partArgs</span><span class="params">(@RequestParam(name = <span class="string">"file"</span>)</span> List&lt;MultipartFile&gt; parts) </span>&#123;</span><br><span class="line">    log.info(<span class="string">"&#123;&#125;"</span>, parts);</span><br><span class="line">    <span class="keyword">return</span> parts.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期类型参数处理">日期类型参数处理</h2><p>日期参数处理个人认为是请求参数处理中最复杂的，因为一般日期处理的逻辑不是通用的，过多的定制化处理导致很难有一个统一的标准处理逻辑去处理和转换日期类型的参数。不过，这里介绍几个通用的方法，以应对各种奇葩的日期格式。下面介绍的例子中全部使用Jdk8中引入的日期时间API，围绕<code>java.util.Date</code>为核心的日期时间API的使用方式类同。</p><h3 id="一、统一以字符串形式接收">一、统一以字符串形式接收</h3><p>这种是最原始但是最奏效的方式，统一以字符串形式接收，然后自行处理类型转换，下面给个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/date1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">date1</span><span class="params">(@RequestBody UserDto userDto)</span> </span>&#123;</span><br><span class="line">    UserEntity userEntity = <span class="keyword">new</span> UserEntity();</span><br><span class="line">    userEntity.setUserId(userDto.getUserId());</span><br><span class="line">    userEntity.setBirthdayTime(LocalDateTime.parse(userDto.getBirthdayTime(), FORMATTER));</span><br><span class="line">    userEntity.setGraduationTime(LocalDateTime.parse(userDto.getGraduationTime(), FORMATTER));</span><br><span class="line">    log.info(userEntity.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"><span class="keyword">private</span> String birthdayTime;</span><br><span class="line"><span class="keyword">private</span> String graduationTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime birthdayTime;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime graduationTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-12.png" alt="spmvc-p-12"></p><p>使用字符串接收后再转换的缺点就是模板代码太多，编码风格不够简洁，重复性工作太多。</p><h3 id="二、使用注解-DateTimeFormat或者-JsonFormat">二、使用注解@DateTimeFormat或者@JsonFormat</h3><p><code>@DateTimeFormat</code>注解配合<code>@RequestBody</code>的参数使用的时候，会发现抛出<code>InvalidFormatException</code>异常，提示转换失败，这是因为在处理此注解的时候，只支持<code>Form</code>表单提交(<code>Content-Type</code>为<code>x-www-form-urlencoded</code>)，例子如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201912/spmvc-p-13.png" alt="spmvc-p-13"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line"><span class="keyword">private</span> LocalDateTime birthdayTime;</span><br><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line"><span class="keyword">private</span> LocalDateTime graduationTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/date2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">date2</span><span class="params">(UserDto2 userDto2)</span> </span>&#123;</span><br><span class="line">    log.info(userDto2.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者像下面这样</span></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/date2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">date2</span><span class="params">(@RequestParam(<span class="string">"name"</span>=<span class="string">"userId"</span>)</span>String userId,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(<span class="string">"name"</span>=<span class="string">"birthdayTime"</span>)</span> @<span class="title">DateTimeFormat</span><span class="params">(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span> LocalDateTime birthdayTime,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(<span class="string">"name"</span>=<span class="string">"graduationTime"</span>)</span> @<span class="title">DateTimeFormat</span><span class="params">(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span> LocalDateTime graduationTime) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>@JsonFormat</code>注解可使用在Form表单或者JSON请求参数的场景，因此更推荐使用<code>@JsonFormat</code>注解，不过注意需要指定时区(<code>timezone</code>属性，例如在中国是东八区<code>GMT+8</code>)，否则有可能导致出现<strong>时差</strong>，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/date2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">date2</span><span class="params">(@RequestBody UserDto2 userDto2)</span> </span>&#123;</span><br><span class="line">    log.info(userDto2.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime birthdayTime;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime graduationTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、Jackson序列化和反序列化定制">三、Jackson序列化和反序列化定制</h3><p>因为<code>SpringMVC</code>默认使用<code>Jackson</code>处理<code>@RequestBody</code>的参数转换，因此可以通过定制序列化器和反序列化器来实现日期类型的转换，这样我们就可以使用<code>application/json</code>的形式提交请求参数。这里的例子是转换请求Json参数中的字符串为<code>LocalDateTime</code>类型，属于Json反序列化，因此需要定制反序列化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/date3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">date3</span><span class="params">(@RequestBody UserDto3 userDto3)</span> </span>&#123;</span><br><span class="line">    log.info(userDto3.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"><span class="meta">@JsonDeserialize</span>(using = CustomLocalDateTimeDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">LocalDateTime</span> <span class="title">birthdayTime</span></span>;</span><br><span class="line"><span class="meta">@JsonDeserialize</span>(using = CustomLocalDateTimeDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">LocalDateTime</span> <span class="title">graduationTime</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomLocalDateTimeDeserializer</span> <span class="keyword">extends</span> <span class="title">LocalDateTimeDeserializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomLocalDateTimeDeserializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、最佳实践">四、最佳实践</h3><p>前面三种方式都存在硬编码等问题，其实最佳实践是直接修改<code>MappingJackson2HttpMessageConverter</code>中的<code>ObjectMapper</code>对于日期类型处理默认的序列化器和反序列化器，这样就能全局生效，不需要再使用其他注解或者定制序列化方案(当然，有些时候需要特殊处理定制)，或者说，在需要特殊处理的场景才使用其他注解或者定制序列化方案。使用钩子接口<code>Jackson2ObjectMapperBuilderCustomizer</code>可以实现对容器中的<code>ObjectMapper</code>单例中的属性定制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="title">jackson2ObjectMapperBuilderCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> customizer-&gt;&#123;</span><br><span class="line">customizer.serializerByType(LocalDateTime<span class="class">.<span class="keyword">class</span>,<span class="title">new</span> <span class="title">LocalDateTimeSerializer</span>(</span></span><br><span class="line">DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));</span><br><span class="line">customizer.deserializerByType(LocalDateTime<span class="class">.<span class="keyword">class</span>,<span class="title">new</span> <span class="title">LocalDateTimeDeserializer</span>(</span></span><br><span class="line">DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能定制化<code>MappingJackson2HttpMessageConverter</code>中持有的<code>ObjectMapper</code>，上面的<code>LocalDateTime</code>序列化和反序列化器对全局生效。</p><h2 id="请求URL匹配">请求URL匹配</h2><p>前面基本介绍完了主流的请求参数处理，其实<code>SpringMVC</code>中还会按照<code>URL</code>的模式进行匹配，使用的是<code>Ant</code>路径风格，处理工具类为<code>org.springframework.util.AntPathMatcher</code>，从此类的注释来看，匹配规则主要包括下面四点<br>：</p><ol><li><code>?</code>匹配1个字符。</li><li><code>*</code>匹配0个或者多个<strong>字符</strong>。</li><li><code>**</code>匹配路径中0个或者多个<strong>目录</strong>。</li><li>正则支持，如<code>{spring:[a-z]+}</code>将正则表达式[a-z]+匹配到的值，赋值给名为<strong>spring</strong>的路径变量。</li></ol><p>举些例子：</p><p><strong>’?'形式的URL</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/pattern?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/pattern  <span class="number">404</span> Not Found</span><br><span class="line">/patternd  <span class="number">200</span> OK</span><br><span class="line">/patterndd  <span class="number">404</span> Not Found</span><br><span class="line">/pattern/  <span class="number">404</span> Not Found</span><br><span class="line">/patternd/s  <span class="number">404</span> Not Found</span><br></pre></td></tr></table></figure><p><strong>’*'形式的URL</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/pattern*"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/pattern  <span class="number">200</span> OK</span><br><span class="line">/pattern/  <span class="number">200</span> OK</span><br><span class="line">/patternd  <span class="number">200</span> OK</span><br><span class="line">/pattern/a  <span class="number">404</span> Not Found</span><br></pre></td></tr></table></figure><p><strong>’**'形式的URL</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/pattern/**/p"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/pattern/p  <span class="number">200</span> OK</span><br><span class="line">/pattern/x/p  <span class="number">200</span> OK</span><br><span class="line">/pattern/x/y/p  <span class="number">200</span> OK</span><br></pre></td></tr></table></figure><p><strong>{spring:[a-z]+}形式的URL</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/pattern/&#123;key:[a-c]+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pattern</span><span class="params">(@PathVariable(name = <span class="string">"key"</span>)</span> String key) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/pattern/a  <span class="number">200</span> OK</span><br><span class="line">/pattern/ab  <span class="number">200</span> OK</span><br><span class="line">/pattern/abc  <span class="number">200</span> OK</span><br><span class="line">/pattern  <span class="number">404</span> Not Found</span><br><span class="line">/pattern/abcd  <span class="number">404</span> Not Found</span><br></pre></td></tr></table></figure><p>上面的四种URL模式可以组合使用，千变万化。</p><p><code>URL</code>匹配还遵循<strong>精确匹配原则</strong>，也就是存在两个模式对同一个<code>URL</code>都能够匹配成功，则<strong>选取最精确的<code>URL</code>匹配</strong>，进入对应的控制器方法，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/pattern/**/p"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pattern1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/pattern/p"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pattern2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两个控制器，如果请求<code>URL</code>为<code>/pattern/p</code>，最终进入的方法为<code>pattern2</code>。</p><p>最后，<code>org.springframework.util.AntPathMatcher</code>作为一个工具类，可以单独使用，不仅仅可以用于匹配<code>URL</code>，也可以用于匹配系统文件路径，不过需要使用其带参数构造改变内部的<code>pathSeparator</code>变量，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher(File.separator);</span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p>笔者在前一段时间曾经花大量时间梳理和分析过<code>Spring</code>、<code>SpringMVC</code>的源码，但是后面一段很长的时间需要进行业务开发，对架构方面的东西有点生疏了，毕竟东西不用就会生疏，这个是常理。这篇文章基于一些<code>SpringMVC</code>的源码经验总结了请求参数的处理相关的一些知识，希望帮到自己和大家。</p><p>参考资料：</p><ul><li>spring-boot-web-starter:2.0.3.RELEASE源码。</li></ul><p>（本文完 c-7-d e-a-20180512 旧文重发）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;在日常使用&lt;code&gt;SpringMVC&lt;/code&gt;进行开发的时候，有可能遇到前端各种类型的请求参数，这里做一次相对全面的总结。&lt;code&gt;SpringMVC&lt;/code&gt;中处理控制器参数的接口是&lt;code&gt;HandlerMethodArgumentResolver&lt;/code&gt;，此接口有众多子类，分别处理不同(注解类型)的参数，下面只列举几个子类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RequestParamMethodArgumentResolver&lt;/code&gt;：解析处理使用了&lt;code&gt;@RequestParam&lt;/code&gt;注解的参数、&lt;code&gt;MultipartFile&lt;/code&gt;类型参数和&lt;code&gt;Simple&lt;/code&gt;类型(如&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;等类型)参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RequestResponseBodyMethodProcessor&lt;/code&gt;：解析处理&lt;code&gt;@RequestBody&lt;/code&gt;注解的参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PathVariableMapMethodArgumentResolver&lt;/code&gt;：解析处理&lt;code&gt;@PathVariable&lt;/code&gt;注解的参数。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://throwable.club/blog/categories/Spring/"/>
    
      <category term="SpringMVC" scheme="http://throwable.club/blog/categories/Spring/SpringMVC/"/>
    
    
      <category term="Spring" scheme="http://throwable.club/blog/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://throwable.club/blog/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC请求参数和响应结果全局加密和解密</title>
    <link href="http://throwable.club/2019/11/29/spring-mvc-param-global-encryption-decryption-in-action/"/>
    <id>http://throwable.club/2019/11/29/spring-mvc-param-global-encryption-decryption-in-action/</id>
    <published>2019-11-28T16:57:38.000Z</published>
    <updated>2019-11-28T16:59:32.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>前段时间在做一个对外的网关项目，涉及到加密和解密模块，这里详细分析解决方案和适用的场景。为了模拟真实的交互场景，先定制一下整个交互流程。第三方传输(包括请求和响应)数据报文包括三个部分：</p><ul><li>1、timestamp，long类型，时间戳。</li><li>2、data，String类型，实际的业务请求数据转化成的Json字符串再进行加密得到的密文。</li><li>3、sign，签名，生成规则算法伪代码是SHA-256(data=xxx&amp;timestamp=11111)，防篡改。</li></ul><p>为了简单起见，加密和解密采用AES，对称秘钥为&quot;throwable&quot;。上面的场景和加解密例子仅仅是为了模拟真实场景，安全系数低，切勿直接用于生产环境。</p><a id="more"></a><p>现在还有一个地方要考虑，就是无法得知第三方如何提交请求数据，假定都是采用POST的Http请求方法，提交报文的时候指定ContentType为application/json或者application/x-www-form-urlencoded，两种ContentType提交方式的请求体是不相同的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//application/x-www-form-urlencoded</span></span><br><span class="line">timestamp=xxxx&amp;data=yyyyyy&amp;sign=zzzzzzz</span><br><span class="line"></span><br><span class="line"><span class="comment">//application/json</span></span><br><span class="line">&#123;<span class="string">"timestamp"</span>:xxxxxx,<span class="string">"data"</span>:<span class="string">"yyyyyyyy"</span>,<span class="string">"sign"</span>:<span class="string">"zzzzzzz"</span>&#125;</span><br></pre></td></tr></table></figure><p>最后一个要考虑的地方是，第三方强制要求部分接口需要用明文进行请求，在提供一些接口方法的时候，允许使用明文交互。总结一下就是要做到以下三点：</p><ul><li>1、需要加解密的接口请求参数要进行解密，响应结果要进行加密。</li><li>2、不需要加解密的接口可以用明文请求。</li><li>3、兼容ContentType为application/json或者application/x-www-form-urlencoded两种方式。</li></ul><p>上面三种情况要同时兼容算是十分严苛的场景，在生产环境中可能也是极少情况下才遇到，不过还是能找到相对优雅的解决方案。先定义两个特定场景的接口：</p><p>1、下单接口(加密)</p><ul><li>URL：/order/save</li><li>HTTP METHOD：POST</li><li>ContentType：application/x-www-form-urlencoded</li><li>原始参数：orderId=yyyyyyyyy&amp;userId=xxxxxxxxx&amp;amount=zzzzzzzzz</li><li>加密参数：timestamp=xxxx&amp;data=yyyyyy&amp;sign=zzzzzzz</li></ul><p>2、订单查询接口(明文)</p><ul><li>URL：/order/query</li><li>ContentType：application/json</li><li>HTTP METHOD：POST</li><li>原始参数：{“userId”:“xxxxxxxx”}</li></ul><p>两个接口的<code>ContentType</code>不相同是为了故意复杂化场景，在下面的可取方案中，做法是把<code>application/x-www-form-urlencoded</code>中的形式如xxx=yyy&amp;aaa=bbb的表单参数和<code>application/json</code>中形式如{“key”:“value”}的请求参数统一当做<code>application/json</code>形式的参数处理，这样的话，我们就可以直接在控制器方法中使用<code>@RequestBody</code>。</p><h2 id="方案">方案</h2><p>我们首先基于上面说到的加解密方案，提供一个加解密工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EncryptUtils &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SINGLETON</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SINGLETON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"throwable"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sha</span><span class="params">(String raw)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"SHA-256"</span>);</span><br><span class="line">messageDigest.update(raw.getBytes(CHARSET));</span><br><span class="line"><span class="keyword">return</span> Hex.encodeHexString(messageDigest.digest());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Cipher <span class="title">createAesCipher</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Cipher.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">encryptByAes</span><span class="params">(String raw)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Cipher aesCipher = createAesCipher();</span><br><span class="line">KeyGenerator keyGenerator = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">keyGenerator.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(SECRET.getBytes(CHARSET)));</span><br><span class="line">SecretKey secretKey = keyGenerator.generateKey();</span><br><span class="line">SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(secretKey.getEncoded(), <span class="string">"AES"</span>);</span><br><span class="line">aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);</span><br><span class="line"><span class="keyword">byte</span>[] bytes = aesCipher.doFinal(raw.getBytes(CHARSET));</span><br><span class="line"><span class="keyword">return</span> Hex.encodeHexString(bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">decryptByAes</span><span class="params">(String raw)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = Hex.decodeHex(raw);</span><br><span class="line">Cipher aesCipher = createAesCipher();</span><br><span class="line">KeyGenerator keyGenerator = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">keyGenerator.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(SECRET.getBytes(CHARSET)));</span><br><span class="line">SecretKey secretKey = keyGenerator.generateKey();</span><br><span class="line">SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(secretKey.getEncoded(), <span class="string">"AES"</span>);</span><br><span class="line">aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(aesCipher.doFinal(bytes), CHARSET);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意为了简化加解密操作引入了apache的codec依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的加解密过程中要注意两点：</p><ul><li>1、加密后的结果是byte数组，要把二进制转化为十六进制字符串。</li><li>2、解密的时候要把原始密文由十六进制转化为二进制的byte数组。</li></ul><p>上面两点必须注意，否则会产生乱码，这个和编码相关，具体可以看之前写的一篇博客。</p><h2 id="不推荐的方案">不推荐的方案</h2><p>其实最暴力的方案是直接定制每个控制器的方法参数类型，因为我们可以和第三方磋商哪些请求路径需要加密，哪些是不需要加密，甚至哪些是<code>application/x-www-form-urlencoded</code>，哪些是<code>application/json</code>的请求，这样我们可以通过大量的硬编码达到最终的目标。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/order/save"</span>,</span><br><span class="line">consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE,</span><br><span class="line">produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;EncryptModel&gt; <span class="title">saveOrder</span><span class="params">(@RequestParam(name = <span class="string">"sign"</span>)</span> String sign,</span></span><br><span class="line"><span class="function">  @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"timestamp"</span>)</span> Long timestamp,</span></span><br><span class="line"><span class="function">  @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"data"</span>)</span> String data) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">EncryptModel model = <span class="keyword">new</span> EncryptModel();</span><br><span class="line">model.setData(data);</span><br><span class="line">model.setTimestamp(timestamp);</span><br><span class="line">model.setSign(sign);</span><br><span class="line">String inRawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, model.getData(), model.getTimestamp());</span><br><span class="line">String inSign = EncryptUtils.SINGLETON.sha(inRawSign);</span><br><span class="line"><span class="keyword">if</span> (!inSign.equals(model.getSign()))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里忽略实际的业务逻辑,简单设置返回的data为一个map</span></span><br><span class="line">Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">result.put(<span class="string">"code"</span>, <span class="string">"200"</span>);</span><br><span class="line">result.put(<span class="string">"message"</span>, <span class="string">"success"</span>);</span><br><span class="line">EncryptModel out = <span class="keyword">new</span> EncryptModel();</span><br><span class="line">out.setTimestamp(System.currentTimeMillis());</span><br><span class="line">out.setData(EncryptUtils.SINGLETON.encryptByAes(objectMapper.writeValueAsString(result)));</span><br><span class="line">String rawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, out.getData(), out.getTimestamp());</span><br><span class="line">out.setSign(EncryptUtils.SINGLETON.sha(rawSign));</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok(out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/order/query"</span>,</span><br><span class="line">consumes = MediaType.APPLICATION_JSON_VALUE,</span><br><span class="line">produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Order&gt;  <span class="title">queryOrder</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">Order order = <span class="keyword">new</span> Order();</span><br><span class="line"><span class="comment">//这里忽略实际的业务逻辑</span></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok(order);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法能在短时间完成对应的加解密功能，不需要加解密的接口不用引入相关的代码即可。缺陷十分明显，存在硬编码、代码冗余等问题，一旦接口增多，项目的维护难度大大提高。因此，这种做法是不可取的。</p><h2 id="混合方案之Filter和SpringMVC的Http消息转换器">混合方案之Filter和SpringMVC的Http消息转换器</h2><p>这里先说一点，这里是在<code>SpringMVC</code>中使用<code>Filter</code>。因为要兼容两种<code>contentType</code>，我们需要做到几点：</p><ul><li>1、修改请求头的ContentType为application/json。</li><li>2、修改请求体中的参数，统一转化为InputStream。</li><li>3、定制URL规则，区别需要加解密和不需要加解密的URL。</li></ul><p>使用<code>Filter</code>有一个优点：不需要理解<code>SpringMVC</code>的流程，也不需要扩展<code>SpringMVC</code>的相关组件。缺点也比较明显：</p><ul><li>1、如果需要区分加解密，只能通过URL规则进行过滤。</li><li>2、需要加密的接口的SpringMVC控制器的返回参数必须是加密后的实体类，无法做到加密逻辑和业务逻辑完全拆分，也就是解密逻辑对接收的参数是无感知，但是加密逻辑对返回结果是有感知的。</li></ul><p>PS：上面提到的几个需要修改请求参数、请求头等是因为特殊场景的定制，所以如果无此场景可以直接看下面的&quot;单纯的Json请求参数和Json响应结果&quot;小节。流程大致如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/sp-ed-1.png" alt="sp-ed-1"></p><p>编写<code>Filter</code>的实现和<code>HttpServletRequestWrapper</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CustomEncryptFilter</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEncryptFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//Content-Type</span></span><br><span class="line">String contentType = request.getContentType();</span><br><span class="line">String requestBody = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> shouldEncrypt = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.substringMatch(contentType, <span class="number">0</span>, MediaType.APPLICATION_FORM_URLENCODED_VALUE)) &#123;</span><br><span class="line">shouldEncrypt = <span class="keyword">true</span>;</span><br><span class="line">requestBody = convertFormToString(request);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.substringMatch(contentType, <span class="number">0</span>, MediaType.APPLICATION_JSON_VALUE)) &#123;</span><br><span class="line">shouldEncrypt = <span class="keyword">true</span>;</span><br><span class="line">requestBody = convertInputStreamToString(request.getInputStream());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!shouldEncrypt) &#123;</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">CustomEncryptHttpWrapper wrapper = <span class="keyword">new</span> CustomEncryptHttpWrapper(request, requestBody);</span><br><span class="line">wrapper.putHeader(<span class="string">"Content-Type"</span>, MediaType.APPLICATION_PROBLEM_JSON_UTF8_VALUE);</span><br><span class="line">filterChain.doFilter(wrapper, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">convertFormToString</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line"><span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">String name = parameterNames.nextElement();</span><br><span class="line">result.put(name, request.getParameter(name));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> objectMapper.writeValueAsString(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">convertInputStreamToString</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> StreamUtils.copyToString(inputStream, Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CustomEncryptHttpWrapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEncryptHttpWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomEncryptHttpWrapper</span><span class="params">(HttpServletRequest request, String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(request);</span><br><span class="line">data = content.getBytes(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">String key = headerNames.nextElement();</span><br><span class="line">headers.put(key, request.getHeader(key));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putHeader</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">headers.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> headers.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getHeaders</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.enumeration(Collections.singletonList(headers.get(name)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getHeaderNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span>  Collections.enumeration(headers.keySet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ByteArrayInputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(data);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !isReady();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> inputStream.available() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener listener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> inputStream.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getReader();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CustomEncryptConfiguration</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEncryptConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;CustomEncryptFilter&gt; <span class="title">customEncryptFilter</span><span class="params">(ObjectMapper objectMapper)</span></span>&#123;</span><br><span class="line">FilterRegistrationBean&lt;CustomEncryptFilter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> CustomEncryptFilter(objectMapper));</span><br><span class="line">bean.addUrlPatterns(<span class="string">"/e/*"</span>);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可加密的，空接口，用于标识解密的模型对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Encryptable</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Encryptable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptResponse</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Encryptable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/e/order/save"</span>,</span><br><span class="line">consumes = MediaType.APPLICATION_JSON_VALUE,</span><br><span class="line">produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> EncryptResponse&lt;Order&gt; <span class="title">saveOrder</span><span class="params">(@RequestBody Order order)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//这里忽略实际的业务逻辑,简单设置返回的data为一个map</span></span><br><span class="line">EncryptResponse&lt;Order&gt; response = <span class="keyword">new</span> EncryptResponse&lt;&gt;();</span><br><span class="line">response.setCode(<span class="number">200</span>);</span><br><span class="line">response.setData(order);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/c/order/query"</span>,</span><br><span class="line">consumes = MediaType.APPLICATION_JSON_VALUE,</span><br><span class="line">produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Order&gt; <span class="title">queryOrder</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">Order order = <span class="keyword">new</span> Order();</span><br><span class="line"><span class="comment">//这里忽略实际的业务逻辑</span></span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok(order);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可能有人有疑问，为什么不在<code>Filter</code>做加解密的操作？因为考虑到场景太特殊，要兼容两种形式的表单提交参数，如果在<code>Filter</code>做加解密操作，会影响到<code>Controller</code>的编码，这就违反了全局加解密不影响到里层业务代码的目标。上面的<code>Filter</code>只会拦截URL满足<code>/e/*</code>的请求，因此查询接口<code>/c/order/query</code>不会受到影响。这里使用了标识接口用于决定请求参数或者响应结果是否需要加解密，也就是只需要在<code>HttpMessageConverter</code>中判断请求参数的类型或者响应结果的类型是否加解密标识接口的子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEncryptHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">MappingJackson2HttpMessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">readInternal</span><span class="params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">EncryptModel in = objectMapper.readValue(StreamUtils.copyToByteArray(inputMessage.getBody()), EncryptModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">String inRawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, in.getData(), in.getTimestamp());</span><br><span class="line">String inSign;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inSign = EncryptUtils.SINGLETON.sha(inRawSign);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!inSign.equals(in.getSign())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> objectMapper.readValue(EncryptUtils.SINGLETON.decryptByAes(in.getData()), clazz);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"解密失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.readInternal(clazz, inputMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object object, Type type, HttpOutputMessage outputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">Class&lt;?&gt; clazz = (Class) type;</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">EncryptModel out = <span class="keyword">new</span> EncryptModel();</span><br><span class="line">out.setTimestamp(System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out.setData(EncryptUtils.SINGLETON.encryptByAes(objectMapper.writeValueAsString(object)));</span><br><span class="line">String rawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, out.getData(), out.getTimestamp());</span><br><span class="line">out.setSign(EncryptUtils.SINGLETON.sha(rawSign));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">super</span>.writeInternal(out, type, outputMessage);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">super</span>.writeInternal(object, type, outputMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自实现的<code>HttpMessageConverter</code>主要需要判断请求参数的类型和返回值的类型，从而判断是否需要进行加解密。</p><h2 id="单纯的Json请求参数和Json响应结果的加解密处理最佳实践">单纯的Json请求参数和Json响应结果的加解密处理最佳实践</h2><p>一般情况下，对接方的请求参数和响应结果是完全规范统一使用Json(ContentType指定为<code>application/json</code>，使用<code>@RequestBody</code>接收参数)，那么所有的事情就会变得简单，因为不需要考虑请求参数由xxx=yyy&amp;aaa=bbb转换为<code>InputStream</code>再交给<code>SpringMVC</code>处理，因此我们只需要提供一个<code>MappingJackson2HttpMessageConverter</code>子类实现(继承它并且覆盖对应方法，添加加解密特性)。我们还是使用标识接口用于决定请求参数或者响应结果是否需要加解密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEncryptHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">MappingJackson2HttpMessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">readInternal</span><span class="params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">EncryptModel in = objectMapper.readValue(StreamUtils.copyToByteArray(inputMessage.getBody()), EncryptModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">String inRawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, in.getData(), in.getTimestamp());</span><br><span class="line">String inSign;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inSign = EncryptUtils.SINGLETON.sha(inRawSign);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!inSign.equals(in.getSign())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> objectMapper.readValue(EncryptUtils.SINGLETON.decryptByAes(in.getData()), clazz);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"解密失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.readInternal(clazz, inputMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object object, Type type, HttpOutputMessage outputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">Class&lt;?&gt; clazz = (Class) type;</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">EncryptModel out = <span class="keyword">new</span> EncryptModel();</span><br><span class="line">out.setTimestamp(System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out.setData(EncryptUtils.SINGLETON.encryptByAes(objectMapper.writeValueAsString(object)));</span><br><span class="line">String rawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, out.getData(), out.getTimestamp());</span><br><span class="line">out.setSign(EncryptUtils.SINGLETON.sha(rawSign));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">super</span>.writeInternal(out, type, outputMessage);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">super</span>.writeInternal(object, type, outputMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，代码是拷贝上一节提供的<code>HttpMessageConverter</code>实现，然后控制器方法的参数使用<code>@RequestBody</code>注解并且类型实现加解密标识接口<code>Encryptable</code>即可，返回值的类型也需要实现加解密标识接口<code>Encryptable</code>。这种做法可以让控制器的代码对加解密完全无感知。当然，也可以不改变原来的<code>MappingJackson2HttpMessageConverter</code>实现，使用<code>RequestBodyAdvice</code>和<code>ResponseBodyAdvice</code>完成相同的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRequestBodyAdvice</span> <span class="keyword">extends</span> <span class="title">RequestBodyAdviceAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Type targetType,</span></span></span><br><span class="line"><span class="function"><span class="params">Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; clazz = (Class) targetType;</span><br><span class="line"><span class="keyword">return</span> Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpInputMessage <span class="title">beforeBodyRead</span><span class="params">(HttpInputMessage inputMessage, MethodParameter parameter, Type targetType,</span></span></span><br><span class="line"><span class="function"><span class="params">   Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Class&lt;?&gt; clazz = (Class) targetType;</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">String content = StreamUtils.copyToString(inputMessage.getBody(), Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">EncryptModel in = objectMapper.readValue(content, EncryptModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">String inRawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, in.getData(), in.getTimestamp());</span><br><span class="line">String inSign;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inSign = EncryptUtils.SINGLETON.sha(inRawSign);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!inSign.equals(in.getSign())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">ByteArrayInputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(in.getData().getBytes(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MappingJacksonInputMessage(inputStream, inputMessage.getHeaders());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.beforeBodyRead(inputMessage, parameter, targetType, converterType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomResponseBodyAdvice</span> <span class="keyword">extends</span> <span class="title">JsonViewResponseBodyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; parameterType = returnType.getParameterType();</span><br><span class="line"><span class="keyword">return</span> Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">parameterType</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeBodyWriteInternal</span><span class="params">(MappingJacksonValue bodyContainer, MediaType contentType,</span></span></span><br><span class="line"><span class="function"><span class="params">   MethodParameter returnType, ServerHttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">   ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; parameterType = returnType.getParameterType();</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">parameterType</span>)) </span>&#123;</span><br><span class="line">EncryptModel out = <span class="keyword">new</span> EncryptModel();</span><br><span class="line">out.setTimestamp(System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out.setData(EncryptUtils.SINGLETON.encryptByAes(objectMapper.writeValueAsString(bodyContainer.getValue())));</span><br><span class="line">String rawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, out.getData(), out.getTimestamp());</span><br><span class="line">out.setSign(EncryptUtils.SINGLETON.sha(rawSign));</span><br><span class="line">out.setSign(EncryptUtils.SINGLETON.sha(rawSign));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">super</span>.beforeBodyWriteInternal(bodyContainer, contentType, returnType, request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单纯的application-x-www-form-urlencoded表单请求参数和Json响应结果的加解密处理最佳实践">单纯的application/x-www-form-urlencoded表单请求参数和Json响应结果的加解密处理最佳实践</h2><p>一般情况下，对接方的请求参数完全采用<code>application/x-www-form-urlencoded</code>表单请求参数返回结果全部按照Json接收，我们也可以通过一个<code>HttpMessageConverter</code>实现就完成加解密模块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormHttpMessageConverter</span> <span class="keyword">implements</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;MediaType&gt; mediaTypes;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormHttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line"><span class="keyword">this</span>.mediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.mediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>) &amp;&amp; <span class="title">mediaTypes</span>.<span class="title">contains</span>(<span class="title">mediaType</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>) &amp;&amp; <span class="title">mediaTypes</span>.<span class="title">contains</span>(<span class="title">mediaType</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mediaTypes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">read</span><span class="params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">String content = StreamUtils.copyToString(inputMessage.getBody(), Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">EncryptModel in = objectMapper.readValue(content, EncryptModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">String inRawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, in.getData(), in.getTimestamp());</span><br><span class="line">String inSign;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inSign = EncryptUtils.SINGLETON.sha(inRawSign);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!inSign.equals(in.getSign())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"验证参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> objectMapper.readValue(EncryptUtils.SINGLETON.decryptByAes(in.getData()), clazz);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"解密失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">MediaType contentType = inputMessage.getHeaders().getContentType();</span><br><span class="line">Charset charset = (contentType != <span class="keyword">null</span> &amp;&amp; contentType.getCharset() != <span class="keyword">null</span> ?</span><br><span class="line">contentType.getCharset() : Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">String body = StreamUtils.copyToString(inputMessage.getBody(), charset);</span><br><span class="line"></span><br><span class="line">String[] pairs = StringUtils.tokenizeToStringArray(body, <span class="string">"&amp;"</span>);</span><br><span class="line">MultiValueMap&lt;String, String&gt; result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;(pairs.length);</span><br><span class="line"><span class="keyword">for</span> (String pair : pairs) &#123;</span><br><span class="line"><span class="keyword">int</span> idx = pair.indexOf(<span class="string">'='</span>);</span><br><span class="line"><span class="keyword">if</span> (idx == -<span class="number">1</span>) &#123;</span><br><span class="line">result.add(URLDecoder.decode(pair, charset.name()), <span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">String name = URLDecoder.decode(pair.substring(<span class="number">0</span>, idx), charset.name());</span><br><span class="line">String value = URLDecoder.decode(pair.substring(idx + <span class="number">1</span>), charset.name());</span><br><span class="line">result.add(name, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object o, MediaType contentType, HttpOutputMessage outputMessage)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">Class&lt;?&gt; clazz = o.getClass();</span><br><span class="line"><span class="keyword">if</span> (Encryptable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">EncryptModel out = <span class="keyword">new</span> EncryptModel();</span><br><span class="line">out.setTimestamp(System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out.setData(EncryptUtils.SINGLETON.encryptByAes(objectMapper.writeValueAsString(o)));</span><br><span class="line">String rawSign = String.format(<span class="string">"data=%s&amp;timestamp=%d"</span>, out.getData(), out.getTimestamp());</span><br><span class="line">out.setSign(EncryptUtils.SINGLETON.sha(rawSign));</span><br><span class="line">StreamUtils.copy(objectMapper.writeValueAsString(out)</span><br><span class="line">.getBytes(Charset.forName(<span class="string">"UTF-8"</span>)), outputMessage.getBody());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数签名失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">String out = objectMapper.writeValueAsString(o);</span><br><span class="line">StreamUtils.copy(out.getBytes(Charset.forName(<span class="string">"UTF-8"</span>)), outputMessage.getBody());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>HttpMessageConverter</code>的实现可以参考<code>org.springframework.http.converter.FormHttpMessageConverter</code>。</p><h2 id="小结">小结</h2><p>这篇文章强行复杂化了实际的情况(但是在实际中真的碰到过)，一般情况下，现在流行使用Json进行数据传输，在SpringMVC项目中，我们只需要针对性地改造<code>MappingJackson2HttpMessageConverter</code>即可(继承并且添加特性)，如果对<code>SpringMVC</code>的源码相对熟悉的话，直接添加自定义的<code>RequestBodyAdvice</code>(<code>RequestBodyAdviceAdapter</code>)和<code>ResponseBodyAdvice</code>(<code>JsonViewResponseBodyAdvice</code>)实现也可以达到目的。至于为什么使用<code>HttpMessageConverter</code>做加解密功能，这里基于<code>SpringMVC</code>源码的对请求参数处理的过程整理了一张处理流程图：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/sp-ed-2.png" alt=""></p><p>上面流程最核心的代码可以看<code>AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters</code>和<code>HandlerMethodArgumentResolverComposite#resolveArgument</code>，毕竟源码不会骗人。控制器方法返回值的处理基于是对称的，阅读起来也比较轻松。</p><p>参考资料：</p><ul><li>spring-boot-web-starter:2.0.3.RELEASE源码。</li></ul><p>（本文完 c-d-4 e-a-2018-8-14 老文重发）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;前段时间在做一个对外的网关项目，涉及到加密和解密模块，这里详细分析解决方案和适用的场景。为了模拟真实的交互场景，先定制一下整个交互流程。第三方传输(包括请求和响应)数据报文包括三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、timestamp，long类型，时间戳。&lt;/li&gt;
&lt;li&gt;2、data，String类型，实际的业务请求数据转化成的Json字符串再进行加密得到的密文。&lt;/li&gt;
&lt;li&gt;3、sign，签名，生成规则算法伪代码是SHA-256(data=xxx&amp;amp;timestamp=11111)，防篡改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了简单起见，加密和解密采用AES，对称秘钥为&amp;quot;throwable&amp;quot;。上面的场景和加解密例子仅仅是为了模拟真实场景，安全系数低，切勿直接用于生产环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://throwable.club/blog/categories/Spring/"/>
    
      <category term="SpringMVC" scheme="http://throwable.club/blog/categories/Spring/SpringMVC/"/>
    
    
      <category term="Spring" scheme="http://throwable.club/blog/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://throwable.club/blog/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>初识Redis的数据类型HyperLogLog</title>
    <link href="http://throwable.club/2019/11/17/redis-type-hll-introduction/"/>
    <id>http://throwable.club/2019/11/17/redis-type-hll-introduction/</id>
    <published>2019-11-17T05:10:16.000Z</published>
    <updated>2019-11-28T17:03:45.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>未来一段时间开发的项目或者需求会大量使用到<code>Redis</code>，趁着这段时间业务并不太繁忙，抽点时间预习和复习<code>Redis</code>的相关内容。刚好看到博客下面的<code>UV</code>和<code>PV</code>统计，想到了最近看书里面提到的<code>HyperLogLog</code>数据类型，于是花点时间分析一下它的使用方式和使用场景（<strong>暂时不探究<code>HyperLogLog</code>的实现原理</strong>）。<code>Redis</code>中<code>HyperLogLog</code>数据类型是<code>Redid 2.8.9</code>引入的，使用的时候确保<code>Redis</code>版本<code>&gt;= 2.8.9</code>。</p><a id="more"></a><h2 id="HyperLogLog简介">HyperLogLog简介</h2><p><code>基数计数(cardinality counting)</code>，通常用来统计一个集合中不重复的元素个数。一个很常见的例子就是统计某个文章的<code>UV</code>（<code>Unique Visitor</code>，独立访客，一般可以理解为客户端<code>IP</code>）。大数据量背景下，要实现基数计数，多数情况下不会选择存储全量的基数集合的元素，因为可以计算出存储的内存成本，假设一个每个被统计的元素的平均大小为<code>32bit</code>，那么如果统计一亿个数据，占用的内存大小为：</p><ul><li><code>32 * 100000000 / 8 / 1024 / 1024 ≈ 381M</code>。</li></ul><p>如果有多个集合，并且允许计算多个集合的合并计数结果，那么这个操作带来的复杂度可能是毁灭性的。因此，不会使用<code>Bitmap</code>、<code>Tree</code>或者<code>HashSet</code>等数据结构直接存储计数元素集合的方式进行计数，而是在不追求绝对准确计数结果的前提之下，使用基数计数的概率算法进行计数，目前常见的有概率算法以下三种：</p><ul><li><code>Linear Counting(LC)</code>。</li><li><code>LogLog Counting(LLC)</code>。</li><li><code>HyperLogLog Counting(HLL)</code>。</li></ul><blockquote><p>所以，HyperLogLog其实是一种基数计数概率算法，并不是Redis特有的，Redis基于C语言实现了HyperLogLog并且提供了相关命令API入口。</p></blockquote><p><code>Redis</code>的作者<code>Antirez</code>为了纪念<a href="https://en.wikipedia.org/wiki/Philippe_Flajolet" target="_blank" rel="noopener">Philippe Flajolet</a>对组合数学和基数计算算法分析的研究，所以在设计<code>HyperLogLog</code>命令的时候使用了<code>Philippe Flajolet</code>姓名的英文首字母<code>PF</code>作为前缀。也就是说，<code>Philippe Flajolet</code>博士是<code>HLL</code>算法的重大贡献者，但是他其实并不是<code>Redis</code>中<code>HyperLogLog</code>数据类型的开发者。遗憾的是<code>Philippe Flajolet</code>博士于2011年3月22日因病在巴黎辞世。这个是<code>Philippe Flajolet</code>博士的维基百科照片：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/Philippe_Flajolet.png" alt=""></p><p><code>Redis</code>提供的<code>HyperLogLog</code>数据类型的特征：</p><ul><li>基本特征：使用<code>HyperLogLog Counting(HLL)</code>实现，<strong>只做基数计算，不会保存元数据</strong>。</li><li>内存占用：<code>HyperLogLog</code>每个<code>KEY</code>最多占用<code>12K</code>的内存空间，可以计算接近<code>2^64</code>个不同元素的基数，它的存储空间采用稀疏矩阵存储，空间占用很小，仅仅在计数基数个数慢慢变大，稀疏矩阵占用空间渐渐超过了阈值时才会一次性转变成稠密矩阵，转变成稠密矩阵之后才会占用<code>12K</code>的内存空间。</li><li>计数误差范围：基数计数的结果是一个标准误差（<code>Standard Error</code>）为<code>0.81%</code>的近似值，当数据量不大的时候，得到的结果也可能是一个准确值。</li></ul><p><strong>内存占用小（每个KEY最高占用12K）是<code>HyperLogLog</code>的最大优势</strong>，而它存在两个相对明显的限制：</p><ul><li>计算结果并不是准确值，存在标准误差，这是由于它本质上是用概率算法导致的。</li><li>不保存基数的元数据，这一点对需要使用元数据进行数据分析的场景并不友好。</li></ul><h2 id="HyperLogLog命令使用">HyperLogLog命令使用</h2><p><code>Redis</code>提供的<code>HyperLogLog</code>数据类型一共有三个命令<code>API</code>：<code>PFADD</code>、<code>PFCOUNT</code>和<code>PFMERGE</code>。</p><h3 id="PFADD">PFADD</h3><p><code>PFADD</code>命令参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFADD key element [element …]</span><br></pre></td></tr></table></figure><blockquote><p>支持此命令的Redis版本是：&gt;= 2.8.9<br>时间复杂度：每添加一个元素的复杂度为O(1)</p></blockquote><ul><li>功能：将所有元素参数<code>element</code>添加到键为<code>key</code>的<code>HyperLogLog</code>数据结构中。</li></ul><p><code>PFADD</code>命令的执行流程如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/r-d-h-l-l-1.png" alt=""></p><p><code>PFADD</code>命令的使用方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD food apple fish</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD food apple</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD throwable</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SET name doge</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFADD name throwable</span><br><span class="line">(error) WRONGTYPE Key is not a valid HyperLogLog string value.</span><br></pre></td></tr></table></figure><p>虽然<code>HyperLogLog</code>数据结构本质是一个字符串，但是不能在<code>String</code>类型的<code>KEY</code>使用<code>HyperLogLog</code>的相关命令。</p><h3 id="PFCOUNT">PFCOUNT</h3><p><code>PFCOUNT</code>命令参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFCOUNT key [key …]</span><br></pre></td></tr></table></figure><blockquote><p>支持此命令的Redis版本是：&gt;= 2.8.9<br>时间复杂度：返回单个HyperLogLog的基数计数值的复杂度为O(1)，平均常数时间比较低。当参数为多个key的时候，复杂度为O(N)，N为key的个数。</p></blockquote><ul><li>当<code>PFCOUNT</code>命令使用单个<code>key</code>的时候，返回储存在给定键的<code>HyperLogLog</code>数据结构的近似基数，如果键不存在， 则返回<code>0</code>。</li><li>当<code>PFCOUNT</code>命令使用<strong>多</strong>个<code>key</code>的时候，返回储存在给定的所有<code>HyperLogLog</code>数据结构的并集的近似基数，也就是会把所有的<code>HyperLogLog</code>数据结构合并到一个临时的<code>HyperLogLog</code>数据结构，然后计算出近似基数。</li></ul><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/r-d-h-l-l-2.png" alt=""></p><p><code>PFCOUNT</code>命令的使用方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD POST:1 ip-1 ip-2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD POST:2 ip-2 ip-3 ip-4</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT POST:1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT POST:1 POST:2</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT NOT_EXIST_KEY</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h3 id="PFMERGE">PFMERGE</h3><p><code>PFMERGE</code>命令参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFMERGE destkey sourcekey [sourcekey ...]</span><br></pre></td></tr></table></figure><blockquote><p>支持此命令的Redis版本是：&gt;= 2.8.9<br>时间复杂度：O(N)，其中N为被合并的HyperLogLog数据结构的数量，此命令的常数时间比较高</p></blockquote><ul><li>功能：把多个<code>HyperLogLog</code>数据结构合并为一个新的键为<code>destkey</code>的<code>HyperLogLog</code>数据结构，合并后的<code>HyperLogLog</code>的基数接近于所有输入<code>HyperLogLog</code>的可见集合（<code>Observed Set</code>）的并集的基数。</li><li>命令返回值：只会返回字符串<code>OK</code>。</li></ul><p><code>PFMERGE</code>命令的使用方式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD POST:1 ip-1 ip-2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD POST:2 ip-2 ip-3 ip-4</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE POST:1-2 POST:1 POST:2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT POST:1-2</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h2 id="使用HyperLogLog统计UV的案例">使用HyperLogLog统计UV的案例</h2><p>假设现在有个简单的场景，就是统计博客文章的<code>UV</code>，要求<code>UV</code>的计数不需要准确，也不需要保存客户端的<code>IP</code>数据。下面就这个场景，使用<code>HyperLogLog</code>做一个简单的方案和编码实施。</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/r-d-h-l-l-3.png" alt=""></p><p>这个流程可能步骤的先后顺序可能会有所调整，但是要做的操作是基本不变的。先简单假设，文章的内容和统计数据都是后台服务返回的，两个接口是分开设计。引入<code>Redis</code>的高级客户端<code>Lettuce</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UvTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisCommands&lt;String, String&gt; COMMANDS;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化Redis客户端</span></span><br><span class="line">        RedisURI uri = RedisURI.builder().withHost(<span class="string">"localhost"</span>).withPort(<span class="number">6379</span>).build();</span><br><span class="line">        RedisClient redisClient = RedisClient.create(uri);</span><br><span class="line">        StatefulRedisConnection&lt;String, String&gt; connect = redisClient.connect();</span><br><span class="line">        COMMANDS = connect.sync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostDetail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Long id;</span><br><span class="line">        <span class="keyword">private</span> String content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PostDetail <span class="title">selectPostDetail</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        PostDetail detail = <span class="keyword">new</span> PostDetail();</span><br><span class="line">        detail.setContent(<span class="string">"content"</span>);</span><br><span class="line">        detail.setId(id);</span><br><span class="line">        <span class="keyword">return</span> detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PostDetail <span class="title">getPostDetail</span><span class="params">(String clientIp, Long postId)</span> </span>&#123;</span><br><span class="line">        PostDetail detail = selectPostDetail(postId);</span><br><span class="line">        String key = <span class="string">"puv:"</span> + postId;</span><br><span class="line">        COMMANDS.pfadd(key, clientIp);</span><br><span class="line">        <span class="keyword">return</span> detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Long <span class="title">getPostUv</span><span class="params">(Long postId)</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">"puv:"</span> + postId;</span><br><span class="line">        <span class="keyword">return</span> COMMANDS.pfcount(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testViewPost</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Long postId = <span class="number">1L</span>;</span><br><span class="line">        getPostDetail(<span class="string">"111.111.111.111"</span>, postId);</span><br><span class="line">        getPostDetail(<span class="string">"111.111.111.222"</span>, postId);</span><br><span class="line">        getPostDetail(<span class="string">"111.111.111.333"</span>, postId);</span><br><span class="line">        getPostDetail(<span class="string">"111.111.111.444"</span>, postId);</span><br><span class="line">        System.out.println(String.format(<span class="string">"The uv count of post [%d] is %d"</span>, postId, getPostUv(postId)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The uv count of post [1] is 4</span><br></pre></td></tr></table></figure><p>可以适当使用更多数量的不同客户端<code>IP</code>调用<code>getPostDetail()</code>，然后统计一下误差。</p><h2 id="题外话-如何准确地统计UV">题外话-如何准确地统计UV</h2><p>如果想要准确统计<code>UV</code>，则需要注意几个点：</p><ul><li>内存或者磁盘容量需要准备充足，因为就目前的基数计数算法来看，没有任何算法可以在不保存元数据的前提下进行准确计数。</li><li>如果需要做用户行为分析，那么元数据最终需要持久化，这一点应该依托于大数据体系，在这一方面笔者没有经验，所以暂时不多说。</li></ul><p>假设在不考虑内存成本的前提下，我们依然可以使用<code>Redis</code>做准确和实时的<code>UV</code>统计，简单就可以使用<code>Set</code>数据类型，增加<code>UV</code>只需要使用<code>SADD</code>命令，统计<code>UV</code>只需要使用<code>SCARD</code>命令（时间复杂度为<code>O(1)</code>，可以放心使用）。举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD puv:1 ip-1 ip-2</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SADD puv:1 ip-3 ip-4</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; SCARD puv:1</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><p>如果这些统计数据仅仅是用户端展示，那么可以采用异步设计：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/r-d-h-l-l-4.png" alt=""></p><p>在体量小的时候，上面的所有应用的功能可以在同一个服务中完成，消息队列可以用线程池的异步方案替代。</p><h2 id="小结">小结</h2><p>这篇文章只是简单介绍了<code>HyperLogLog</code>的使用和统计<code>UV</code>的使用场景。总的来说就是：在（1）原始数据量巨大，（2）内存占用要求尽可能小，（3）允许计数存在一定误差并且（4）不要求存放元数据的场景下，可以优先考虑使用<code>HyperLogLog</code>进行计数。</p><p>参考资料：</p><ul><li><a href="http://antirez.com/news/75" target="_blank" rel="noopener">antirez-Redis new data structure: the HyperLogLog</a></li><li><a href="https://redis.io/commands" target="_blank" rel="noopener">Redis Commands</a></li><li>维基百科</li></ul><p>（本文完 c-3-d e-a-20191117）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;未来一段时间开发的项目或者需求会大量使用到&lt;code&gt;Redis&lt;/code&gt;，趁着这段时间业务并不太繁忙，抽点时间预习和复习&lt;code&gt;Redis&lt;/code&gt;的相关内容。刚好看到博客下面的&lt;code&gt;UV&lt;/code&gt;和&lt;code&gt;PV&lt;/code&gt;统计，想到了最近看书里面提到的&lt;code&gt;HyperLogLog&lt;/code&gt;数据类型，于是花点时间分析一下它的使用方式和使用场景（&lt;strong&gt;暂时不探究&lt;code&gt;HyperLogLog&lt;/code&gt;的实现原理&lt;/strong&gt;）。&lt;code&gt;Redis&lt;/code&gt;中&lt;code&gt;HyperLogLog&lt;/code&gt;数据类型是&lt;code&gt;Redid 2.8.9&lt;/code&gt;引入的，使用的时候确保&lt;code&gt;Redis&lt;/code&gt;版本&lt;code&gt;&amp;gt;= 2.8.9&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/categories/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/categories/Middleware/Redis/"/>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/tags/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Redis实现UA池</title>
    <link href="http://throwable.club/2019/11/14/redis-in-action-ua-pool/"/>
    <id>http://throwable.club/2019/11/14/redis-in-action-ua-pool/</id>
    <published>2019-11-13T17:02:36.000Z</published>
    <updated>2019-11-28T17:00:58.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近忙于业务开发、交接和游戏，加上碰上了不定时出现的犹豫期和困惑期，荒废学业了一段时间。天冷了，要重新拾起开始下阶段的学习了。之前接触到的一些数据搜索项目，涉及到请求模拟，基于反爬需要使用随机的<code>User Agent</code>，于是使用<code>Redis</code>实现了一个十分简易的<code>UA</code>池。</p><a id="more"></a><h2 id="背景">背景</h2><p>最近的一个需求，有模拟请求的逻辑，要求每次请求的请求头中的<code>User Agent</code>要满足下面几点：</p><ul><li>每次获取的<code>User Agent</code>是随机的。</li><li>每次获取的<code>User Agent</code>（短时间内）不能重复。</li><li>每次获取的<code>User Agent</code>必须带有主流的操作系统信息（可以是<code>Uinux</code>、<code>Windows</code>、<code>IOS</code>和安卓等等）。</li></ul><p>这里三点都可以从<code>UA</code>数据的来源解决，实际上我们应该关注具体的实现方案。简单分析一下，流程如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/r-u-a-p-1.png" alt=""></p><p>在设计<code>UA</code>池的时候，它的数据结构和环形队列十分类似：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/r-u-a-p-2.png" alt=""></p><p>上图中，假设不同颜色的<code>UA</code>是完全不同的<code>UA</code>，它们通过洗牌算法打散放进去环形队列中，实际上每次取出一个<code>UA</code>之后，只需要把游标<code>cursor</code>前进或者后退一格即可（甚至可以把游标设置到队列中的任意元素）。最终的实现就是：需要通过中间件实现分布式队列（只是队列，不是消息队列）。</p><h2 id="具体实现方案">具体实现方案</h2><p>毫无疑问需要一个分布式数据库类型的中间件才能存放已经准备好的<code>UA</code>，第一印象就感觉<code>Redis</code>会比较合适。接下来需要选用<code>Redis</code>的数据类型，主要考虑几个方面：</p><ul><li>具备队列性质。</li><li>最好支持随机访问。</li><li>元素入队、出队和随机访问的时间复杂度要低，毕竟获取<code>UA</code>的接口访问量会比较大。</li></ul><p>支持这几个方面的<code>Redis</code>数据类型就是<code>List</code>，不过注意<code>List</code>本身不能去重，去重的工作可以用代码逻辑实现。然后可以想象客户端获取<code>UA</code>的流程大致如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201911/r-u-a-p-3.png" alt=""></p><p>结合前面的分析，编码过程有如下几步：</p><ol><li>准备好需要导入的<code>UA</code>数据，可以从数据源读取，也可以直接文件读取。</li><li>因为需要导入的<code>UA</code>数据集合一般不会太大，考虑先把这个集合的数据随机打散，如果使用<code>Java</code>开发可以直接使用<code>Collections#shuffle()</code>洗牌算法，当然也可以自行实现这个数据随机分布的算法，<strong>这一步对于一些被模拟方会严格检验<code>UA</code>合法性的场景是必须的</strong>。</li><li>导入<code>UA</code>数据到<code>Redis</code>列表中。</li><li>编写<code>RPOP + LPUSH</code>的<code>Lua</code>脚本，实现分布式循环队列。</li></ol><h2 id="编码和测试示例">编码和测试示例</h2><p>引入<code>Redis</code>的高级客户端<code>Lettuce</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写<code>RPOP + LPUSH</code>的<code>Lua</code>脚本，<code>Lua</code>脚本名字暂称为<code>L_RPOP_LPUSH.lua</code>，放在<code>resources/scripts/lua</code>目录下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> value = redis.call(<span class="string">'RPOP'</span>, key)</span><br><span class="line">redis.call(<span class="string">'LPUSH'</span>, key, value)</span><br><span class="line"><span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>这个脚本十分简单，但是已经实现了循环队列的功能。剩下来的测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UaPoolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisCommands&lt;String, String&gt; COMMANDS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicReference&lt;String&gt; LUA_SHA = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"UA_POOL"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化Redis客户端</span></span><br><span class="line">        RedisURI uri = RedisURI.builder().withHost(<span class="string">"localhost"</span>).withPort(<span class="number">6379</span>).build();</span><br><span class="line">        RedisClient redisClient = RedisClient.create(uri);</span><br><span class="line">        StatefulRedisConnection&lt;String, String&gt; connect = redisClient.connect();</span><br><span class="line">        COMMANDS = connect.sync();</span><br><span class="line">        <span class="comment">// 模拟构建UA池的原始数据,假设有10个UA,分别是UA-0 ... UA-9</span></span><br><span class="line">        List&lt;String&gt; uaList = Lists.newArrayList();</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">10</span>).forEach(e -&gt; uaList.add(String.format(<span class="string">"UA-%d"</span>, e)));</span><br><span class="line">        <span class="comment">// 洗牌</span></span><br><span class="line">        Collections.shuffle(uaList);</span><br><span class="line">        <span class="comment">// 加载Lua脚本</span></span><br><span class="line">        ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"/scripts/lua/L_RPOP_LPUSH.lua"</span>);</span><br><span class="line">        String content = StreamUtils.copyToString(resource.getInputStream(), StandardCharsets.UTF_8);</span><br><span class="line">        String sha = COMMANDS.scriptLoad(content);</span><br><span class="line">        LUA_SHA.compareAndSet(<span class="keyword">null</span>, sha);</span><br><span class="line">        <span class="comment">// Redis队列中写入UA数据,数据量多的时候可以考虑分批写入防止长时间阻塞Redis服务</span></span><br><span class="line">        COMMANDS.lpush(KEY, uaList.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        COMMANDS.del(KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUaPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">21</span>).forEach(e -&gt; &#123;</span><br><span class="line">            String result = COMMANDS.evalsha(LUA_SHA.get(), ScriptOutputType.VALUE, KEY);</span><br><span class="line">            System.out.println(String.format(<span class="string">"第%d次获取到的UA是:%s"</span>, e, result));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>某次运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">第1次获取到的UA是:UA-0</span><br><span class="line">第2次获取到的UA是:UA-8</span><br><span class="line">第3次获取到的UA是:UA-2</span><br><span class="line">第4次获取到的UA是:UA-4</span><br><span class="line">第5次获取到的UA是:UA-7</span><br><span class="line">第6次获取到的UA是:UA-5</span><br><span class="line">第7次获取到的UA是:UA-1</span><br><span class="line">第8次获取到的UA是:UA-3</span><br><span class="line">第9次获取到的UA是:UA-6</span><br><span class="line">第10次获取到的UA是:UA-9</span><br><span class="line">第11次获取到的UA是:UA-0</span><br><span class="line">第12次获取到的UA是:UA-8</span><br><span class="line">第13次获取到的UA是:UA-2</span><br><span class="line">第14次获取到的UA是:UA-4</span><br><span class="line">第15次获取到的UA是:UA-7</span><br><span class="line">第16次获取到的UA是:UA-5</span><br><span class="line">第17次获取到的UA是:UA-1</span><br><span class="line">第18次获取到的UA是:UA-3</span><br><span class="line">第19次获取到的UA是:UA-6</span><br><span class="line">第20次获取到的UA是:UA-9</span><br></pre></td></tr></table></figure><p>可见洗牌算法的效果不差，数据相对分散。</p><h2 id="小结">小结</h2><p>其实<code>UA</code>池的设计难度并不大，需要注意几个要点：</p><ul><li>一般主流的移动设备或者桌面设备的系统版本不会太多，所以来源<code>UA</code>数据不会太多，最简单的实现可以使用文件存放，一次读取直接写入<code>Redis</code>中。</li><li>注意需要随机打散<code>UA</code>数据，避免同一个设备系统类型的<code>UA</code>数据过于密集，这样可以避免触发模拟某些请求时候的风控规则。</li><li>需要熟悉<code>Lua</code>的语法，毕竟<code>Redis</code>的原子指令一定离不开<code>Lua</code>脚本。</li></ul><p>（本文完 c-2-d e-a-20191114）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近忙于业务开发、交接和游戏，加上碰上了不定时出现的犹豫期和困惑期，荒废学业了一段时间。天冷了，要重新拾起开始下阶段的学习了。之前接触到的一些数据搜索项目，涉及到请求模拟，基于反爬需要使用随机的&lt;code&gt;User Agent&lt;/code&gt;，于是使用&lt;code&gt;Redis&lt;/code&gt;实现了一个十分简易的&lt;code&gt;UA&lt;/code&gt;池。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/categories/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/categories/Middleware/Redis/"/>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/tags/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>一文彻底理解Redis序列化协议，你也可以编写Redis客户端</title>
    <link href="http://throwable.club/2019/10/09/redis-serialization-protocol-decode-guide/"/>
    <id>http://throwable.club/2019/10/09/redis-serialization-protocol-decode-guide/</id>
    <published>2019-10-09T14:40:13.000Z</published>
    <updated>2019-11-28T17:01:03.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>最近学习<code>Netty</code>的时候想做一个基于<code>Redis</code>服务协议的编码解码模块，过程中顺便阅读了<code>Redis</code>服务序列化协议<code>RESP</code>，结合自己的理解对文档进行了翻译并且简单实现了<code>RESP</code>基于<code>Java</code>语言的解析。编写本文的使用使用的<code>JDK</code>版本为<code>[8+]</code>。</p><a id="more"></a><h2 id="RESP简介">RESP简介</h2><p><code>Redis</code>客户端与<code>Redis</code>服务端基于一个称作<code>RESP</code>的协议进行通信，<code>RESP</code>全称为<code>Redis Serialization Protocol</code>，也就是<code>Redis</code>序列化协议。虽然<code>RESP</code>为<code>Redis</code>设计，但是它也可以应用在其他客户端-服务端（<code>Client-Server</code>）的软件项目中。<code>RESP</code>在设计的时候折中考虑了如下几点：</p><ul><li>易于实现。</li><li>快速解析。</li><li>可读性高。</li></ul><p><code>RESP</code>可以序列化不同的数据类型，如整型、字符串、数组还有一种特殊的<code>Error</code>类型。需要执行的<code>Redis</code>命令会封装为类似于<strong>字符串数组</strong>的请求然后通过<code>Redis</code>客户端发送到<code>Redis</code>服务端。<code>Redis</code>服务端会基于特定的命令类型选择对应的一种数据类型进行回复（这一句是意译，原文是：<code>Redis replies with a command-specific data type</code>）。</p><p><code>RESP</code>是二进制安全的（<code>binary-safe</code>），并且在<code>RESP</code>下不需要处理从一个进程传输到另一个进程的批量数据，因为它使用了前缀长度（<code>prefixed-length</code>，后面会分析，<strong>就是在每个数据块的前缀已经定义好数据块的个数</strong>，类似于<code>Netty</code>里面的定长编码解码）来传输批量数据。</p><p>注意：此处概述的协议仅仅使用在客户端-服务端通信，<code>Redis Cluster</code>使用不同的二进制协议在多个节点之间交换消息（也就是<code>Redis</code>集群中的节点之间并不使用<code>RESP</code>通信）。</p><h3 id="网络层">网络层</h3><p><code>Redis</code>客户端通过创建一个在<code>6379</code>端口的<code>TCP</code>连接，连接到<code>Redis</code>服务端。</p><p>虽然<code>RESP</code>在底层通信协议技术上是非<code>TCP</code>特定的，但在<code>Redis</code>的上下文中，<code>RESP</code>仅用于<code>TCP</code>连接（或类似的面向流的连接，如<code>Unix</code>套接字）。</p><h3 id="请求-响应模型">请求-响应模型</h3><p><code>Redis</code>服务端接收由不同参数组成的命令，接收到命令并将其处理之后会把回复发送回<code>Redis</code>客户端。这是最简单的模型，但是有两种例外的情况：</p><ul><li><code>Redis</code>支持管道（<code>Pipelining</code>，流水线，多数情况下习惯称为管道）操作。使用管道的情况下，<code>Redis</code>客户端可以一次发送多个命令，然后等待一次性的回复（文中的回复是<code>replies</code>，理解为<code>Redis</code>服务端会一次性返回一个批量回复结果）。</li><li>当<code>Redis</code>客户端订阅<code>Pub/Sub</code>信道时，该协议会更改语义并成为推送协议（<code>push protocol</code>），也就是说，客户端不再需要发送命令，因为<code>Redis</code>服务端将自动向客户端（订阅了改信道的客户端）发送新消息（这里的意思是：在订阅/发布模式下，消息是由<code>Redis</code>服务端主动推送给订阅了特定信道的<code>Redis</code>客户端）。</li></ul><p>除了上述两个特例之外，<code>Redis</code>协议是一种简单的请求-响应协议。</p><h2 id="RESP支持的数据类型">RESP支持的数据类型</h2><p><code>RESP</code>在<code>Redis 1.2</code>中引入，在<code>Redis 2.0</code>，<code>RESP</code>正式成为与<code>Redis</code>服务端通信的标准方案。也就是如果需要编写<code>Redis</code>客户端，你就必须在客户端中实现此协议。</p><p><code>RESP</code>本质上是一种序列化协议，它支持的数据类型如下：单行字符串、错误消息、整型数字、定长字符串和<code>RESP</code>数组。</p><p><code>RESP</code>在<code>Redis</code>中用作请求-响应协议的方式如下：</p><ul><li><code>Redis</code>客户端将命令封装为<code>RESP</code>的数组类型（<strong>数组元素都是定长字符串类型</strong>，注意这一点，很重要）发送到<code>Redis</code>服务器。</li><li><code>Redis</code>服务端根据命令实现选择对应的<code>RESP</code>数据类型之一进行回复。</li></ul><p>在<code>RESP</code>中，数据类型取决于数据报的第一个字节：</p><ul><li>单行字符串的第一个字节为<code>+</code>。</li><li>错误消息的第一个字节为<code>-</code>。</li><li>整型数字的第一个字节为<code>:</code>。</li><li>定长字符串的第一个字节为<code>$</code>。</li><li><code>RESP</code>数组的第一个字节为<code>*</code>。</li></ul><p>另外，在<code>RESP</code>中可以使用定长字符串或者数组的特殊变体来表示<code>Null</code>值，后面会提及。在<code>RESP</code>中，<strong>协议的不同部分始终以<code>\r\n</code>（<code>CRLF</code>）终止</strong>。</p><p>目前<code>RESP</code>中5种数据类型的小结如下：</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">本文翻译名称</th><th style="text-align:center">基本特征</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center"><code>Simple String</code></td><td style="text-align:center">单行字符串</td><td style="text-align:center">第一个字节是<code>+</code>，最后两个字节是<code>\r\n</code>，其他字节是字符串内容</td><td style="text-align:center"><code>+OK\r\n</code></td></tr><tr><td style="text-align:center"><code>Error</code></td><td style="text-align:center">错误消息</td><td style="text-align:center">第一个字节是<code>-</code>，最后两个字节是<code>\r\n</code>，其他字节是异常消息的文本内容</td><td style="text-align:center"><code>-ERR\r\n</code></td></tr><tr><td style="text-align:center"><code>Integer</code></td><td style="text-align:center">整型数字</td><td style="text-align:center">第一个字节是<code>:</code>，最后两个字节是<code>\r\n</code>，其他字节是数字的文本内容</td><td style="text-align:center"><code>:100\r\n</code></td></tr><tr><td style="text-align:center"><code>Bulk String</code></td><td style="text-align:center">定长字符串</td><td style="text-align:center">第一个字节是<code>$</code>，紧接着的字节是<code>内容字符串长度\r\n</code>，最后两个字节是<code>\r\n</code>，其他字节是字符串内容</td><td style="text-align:center"><code>$4\r\ndoge\r\n</code></td></tr><tr><td style="text-align:center"><code>Array</code></td><td style="text-align:center"><code>RESP</code>数组</td><td style="text-align:center">第一个字节是<code>*</code>，紧接着的字节是<code>元素个数\r\n</code>，最后两个字节是<code>\r\n</code>，其他字节是各个元素的内容，每个元素可以是任意一种数据类型</td><td style="text-align:center"><code>*2\r\n:100\r\n$4\r\ndoge\r\n</code></td></tr></tbody></table><p>下面的小节是对每种数据类型的更细致的分析。</p><h3 id="RESP简单字符串-Simple-String">RESP简单字符串-Simple String</h3><p>简单字符串的编码方式如下：</p><ul><li>（1）第一个字节为<code>+</code>。</li><li>（2）紧接着的是一个不能包含<code>CR</code>或者<code>LF</code>字符的字符串。</li><li>（3）以<code>CRLF</code>终止。</li></ul><p>简单字符串能够保证在最小开销的前提下传输非二进制安全的字符串。例如很多<code>Redis</code>命令执行成功后服务端需要回复<code>OK</code>字符串，此时通过简单字符串编码为5字节的数据报如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+OK\r\n</span><br></pre></td></tr></table></figure><p>如果需要发送二进制安全的字符串，那么需要使用定长字符串。</p><p>当<code>Redis</code>服务端用简单字符串响应时，<code>Redis</code>客户端库应该向调用者返回一个字符串，该响应到调用者的字符串由<code>+</code>之后直到字符串内容末尾的字符组成（其实就是上面提到的第（2）部分的内容），不包括最后的<code>CRLF</code>字节。</p><h3 id="RESP错误消息-Error">RESP错误消息-Error</h3><p>错误消息类型是<code>RESP</code>特定的数据类型。实际上，错误消息类型和简单字符串类型基本一致，只是其第一个字节为<code>-</code>。错误消息类型跟简单字符串类型的最大区别是：错误消息作为<code>Redis</code>服务端响应的时候，对于客户端而言应该感知为异常，而错误消息中的字符串内容应该感知为<code>Redis</code>服务端返回的错误信息。错误消息的编码方式如下：</p><ul><li>（1）第一个字节为<code>-</code>。</li><li>（2）紧接着的是一个不能包含<code>CR</code>或者<code>LF</code>字符的字符串。</li><li>（3）以<code>CRLF</code>终止。</li></ul><p>一个简单的例子如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Error message\r\n</span><br></pre></td></tr></table></figure><p><code>Redis</code>服务端只有在真正发生错误或者感知错误的时候才会回复错误消息，例如尝试对错误的数据类型执行操作或者命令不存在等等。<code>Redis</code>客户端接收到错误消息的时候，应该触发异常（一般情况就是直接抛出异常，可以根据错误消息的内容进行异常分类）。下面是错误消息响应的一些例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-ERR unknown command 'foobar'</span><br><span class="line">-WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure><p><code>-</code>之后的第一个单词到第一个空格或换行符之间的内容，代表返回的错误类型。这只是<code>Redis</code>使用的约定，不是<code>RESP</code>错误消息格式的一部分。</p><p>例如，<code>ERR</code>是通用错误，<code>WRONGTYPE</code>则是更具体的错误，表示客户端试图针对错误的数据类型执行操作。这种定义方式称为<strong>错误前缀</strong>，是一种使客户端能够理解服务器返回的错误类型的方法，而不必依赖于所给出的确切消息定义，该消息可能会随时间而变化。</p><p>客户端实现可以针对不同的错误类型返回不同种类的异常，或者可以通过将错误类型的名称作为字符串直接提供给调用方来提供捕获错误的通用方法。</p><p>但是，不应该将错误消息分类处理的功能视为至关重要的功能，因为它作用并不巨大，并且有些的客户端实现可能会简单地返回特定值去屏蔽错误消息作为通用的异常处理，例如直接返回<code>false</code>。</p><h3 id="RESP整型数字-Integer">RESP整型数字-Integer</h3><p>整型数字的编码方式如下：</p><ul><li>（1）第一个字节为<code>：</code>。</li><li>（2）紧接着的是一个不能包含<code>CR</code>或者<code>LF</code>字符的字符串，也就是数字要先转换为字符序列，最终要输出为字节。</li><li>（3）以<code>CRLF</code>终止。</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:0\r\n</span><br><span class="line">:1000\r\n</span><br></pre></td></tr></table></figure><p>许多<code>Redis</code>命令返回整型数字，像<code>INCR</code>，<code>LLEN</code>和<code>LASTSAVE</code>命令等等。</p><p>返回的整型数字没有特殊的含义，像<code>INCR</code>返回的是增量的总量，而<code>LASTSAVE</code>是<code>UNIX</code>时间戳。但是<code>Redis</code>服务端保证返回的整型数字在<strong>带符号的64位整数</strong>范围内。</p><p>有些情况下，返回的整型数字会指代<code>true</code>或者<code>false</code>。如<code>EXISTS</code>或者<code>SISMEMBER</code>命令执行返回1代表<code>true</code>，0代表<code>false</code>。</p><p>有些情况下，返回的整型数字会指代命令是否真正产生了效果。如<code>SADD</code>，<code>SREM</code>和<code>SETNX</code>命令执行返回1代表命令执行生效，0代表命令执行不生效（等价于命令没有执行）。</p><p>下面的一组命令执行后都是返回整型数字：<code>SETNX, DEL, EXISTS, INCR, INCRBY, DECR, DECRBY, DBSIZE, LASTSAVE, RENAMENX, MOVE, LLEN, SADD, SREM, SISMEMBER, SCARD</code>。</p><h3 id="RESP定长字符串-Bulk-String">RESP定长字符串-Bulk String</h3><p>定长字符串用于表示一个最大长度为<code>512MB</code>的二进制安全的字符串（<code>Bulk</code>，本身有体积大的含义）。定长字符串的编码方式如下：</p><ul><li>（1）第一个字节为<code>$</code>。</li><li>（2）紧接着的是组成字符串的字节数长度（称为<code>prefixed length</code>，也就是前缀长度），前缀长度分块以<code>CRLF</code>终止。</li><li>（3）然后是一个不能包含<code>CR</code>或者<code>LF</code>字符的字符串，也就是数字要先转换为字符序列，最终要输出为字节。</li><li>（4）以<code>CRLF</code>终止。</li></ul><p>举个例子，<code>doge</code>使用定长字符串编码如下：</p><table><thead><tr><th style="text-align:center">第一个字节</th><th style="text-align:center">前缀长度</th><th style="text-align:center"><code>CRLF</code></th><th style="text-align:center">字符串内容</th><th style="text-align:center"><code>CRLF</code></th><th style="text-align:center"></th><th style="text-align:center">定长字符串</th></tr></thead><tbody><tr><td style="text-align:center"><code>$</code></td><td style="text-align:center"><code>4</code></td><td style="text-align:center"><code>\r\n</code></td><td style="text-align:center"><code>doge</code></td><td style="text-align:center"><code>\r\n</code></td><td style="text-align:center"><code>===&gt;</code></td><td style="text-align:center"><code>$4\r\ndoge\r\n</code></td></tr></tbody></table><p><code>foobar</code>使用定长字符串编码如下：</p><table><thead><tr><th style="text-align:center">第一个字节</th><th style="text-align:center">前缀长度</th><th style="text-align:center"><code>CRLF</code></th><th style="text-align:center">字符串内容</th><th style="text-align:center"><code>CRLF</code></th><th style="text-align:center"></th><th style="text-align:center">定长字符串</th></tr></thead><tbody><tr><td style="text-align:center"><code>$</code></td><td style="text-align:center"><code>6</code></td><td style="text-align:center"><code>\r\n</code></td><td style="text-align:center"><code>foobar</code></td><td style="text-align:center"><code>\r\n</code></td><td style="text-align:center"><code>===&gt;</code></td><td style="text-align:center"><code>$6\r\nfoobar\r\n</code></td></tr></tbody></table><p>表示<strong>空字符串（<code>Empty String</code>，对应Java中的<code>&quot;&quot;</code>）</strong> 的时候，使用定长字符串编码如下：</p><table><thead><tr><th style="text-align:center">第一个字节</th><th style="text-align:center">前缀长度</th><th style="text-align:center"><code>CRLF</code></th><th style="text-align:center"><code>CRLF</code></th><th style="text-align:center"></th><th style="text-align:center">定长字符串</th></tr></thead><tbody><tr><td style="text-align:center"><code>$</code></td><td style="text-align:center"><code>0</code></td><td style="text-align:center"><code>\r\n</code></td><td style="text-align:center"><code>\r\n</code></td><td style="text-align:center"><code>===&gt;</code></td><td style="text-align:center"><code>$0\r\n\r\n</code></td></tr></tbody></table><p>定长字符串也可以使用特殊的格式来表示<code>Null</code>值，指代值不存在。在这种特殊格式中，前缀长度为-1，并且没有数据，因此使用定长字符串对<code>Null</code>值进行编码如下：</p><table><thead><tr><th style="text-align:center">第一个字节</th><th style="text-align:center">前缀长度</th><th style="text-align:center"><code>CRLF</code></th><th style="text-align:center"></th><th style="text-align:center">定长字符串</th></tr></thead><tbody><tr><td style="text-align:center"><code>$</code></td><td style="text-align:center"><code>-1</code></td><td style="text-align:center"><code>\r\n</code></td><td style="text-align:center"><code>===&gt;</code></td><td style="text-align:center"><code>$-1\r\n</code></td></tr></tbody></table><p>当<code>Redis</code>服务端返回定长字符串编码的<code>Null</code>值的时候，客户端不应该返回空字符串，而应该返回对应编程语言中的<code>Null</code>对象。例如<code>Ruby</code>中对应<code>nil</code>，<code>C</code>语言中对应<code>NULL</code>，<code>Java</code>中对应<code>null</code>，以此类推。</p><h3 id="RESP数组-Array">RESP数组-Array</h3><p><code>Redis</code>客户端使用<code>RESP</code>数组发送命令到<code>Redis</code>服务端。与此相似，某些<code>Redis</code>命令执行完毕后服务端需要使用<code>RESP</code>数组类型将元素集合返回给客户端，如返回一个元素列表的<code>LRANGE</code>命令。<code>RESP</code>数组和我们认知中的数组并不完全一致，它的编码格式如下：</p><ul><li>（1）第一个字节为<code>*</code>。</li><li>（2）紧接着的是组成<code>RESP</code>数组的元素个数（十进制数，但是最终需要转换为字节序列，如10需要转换为<code>1</code>和<code>0</code>两个相邻的字节），元素个数分块以<code>CRLF</code>终止。</li><li>（3）<code>RESP</code>数组的每个元素内容，每个元素可以是任意的<code>RESP</code>数据类型。</li></ul><p>一个空的<code>RESP</code>数组的编码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*0\r\n</span><br></pre></td></tr></table></figure><p>一个包含2个定长字符串元素内容分别为<code>foo</code>和<code>bar</code>的<code>RESP</code>数组的编码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*2\r\n$3\r\nfoo\r\n$3\r\nbar\r\n</span><br></pre></td></tr></table></figure><p>通用格式就是：<code>*&lt;count&gt;CRLF</code>作为<code>RESP</code>数组的前缀部分，而组成<code>RESP</code>数组的其他数据类型的元素只是一个接一个地串联在一起。例如一个包含3个整数类型元素的<code>RESP</code>数组的编码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*3\r\n:1\r\n:2\r\n:3\r\n</span><br></pre></td></tr></table></figure><p><code>RESP</code>数组的元素不一定是同一种数据类型，可以包含混合类型的元素。例如下面是一个包含4个整数类型元素和1个定长字符串类型元素（一共有5个元素）的<code>RESP</code>数组的编码（为了看得更清楚，分多行进行编码，实际上不能这样做）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 元素个数</span></span><br><span class="line">*5\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第1个整型类型的元素</span></span><br><span class="line">:1\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第2个整型类型的元素</span></span><br><span class="line">:2\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第3个整型类型的元素</span></span><br><span class="line">:3\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第4个整型类型的元素</span></span><br><span class="line">:4\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定长字符串类型的元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash">6\r\n</span></span><br><span class="line">foobar\r\n</span><br></pre></td></tr></table></figure><p><code>Redis</code>服务端响应报的首行<code>*5\r\n</code>定义了后面会紧跟着5个回复数据，然后每个回复数据分别作元素项，构成了用于传输的多元素定长回复（<code>Multi Bulk Reply</code>，感觉比较难翻译，这里的大概意思就是每个回复行都是整个回复报中的一个项）。</p><p>这里可以类比为<code>Java</code>中的<code>ArrayList</code>（泛型擦除），有点类似于下面的伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">List encode = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">// 添加元素个数</span></span><br><span class="line">encode.add(elementCount);</span><br><span class="line">encode.add(CRLF);</span><br><span class="line"><span class="comment">// 添加第1个整型类型的元素 - 1</span></span><br><span class="line">encode.add(<span class="string">':'</span>);</span><br><span class="line">encode.add(<span class="number">1</span>);</span><br><span class="line">encode.add(CRLF);</span><br><span class="line"><span class="comment">// 添加第2个整型类型的元素 - 2</span></span><br><span class="line">encode.add(<span class="string">':'</span>);</span><br><span class="line">encode.add(<span class="number">2</span>);</span><br><span class="line">encode.add(CRLF);</span><br><span class="line"><span class="comment">// 添加第3个整型类型的元素 - 3</span></span><br><span class="line">encode.add(<span class="string">':'</span>);</span><br><span class="line">encode.add(<span class="number">3</span>);</span><br><span class="line">encode.add(CRLF);</span><br><span class="line"><span class="comment">// 添加第4个整型类型的元素 - 4</span></span><br><span class="line">encode.add(<span class="string">':'</span>);</span><br><span class="line">encode.add(<span class="number">4</span>);</span><br><span class="line">encode.add(CRLF);</span><br><span class="line"><span class="comment">// 添加定长字符串类型的元素</span></span><br><span class="line">encode.add(<span class="string">'$'</span>);</span><br><span class="line"><span class="comment">// 前缀长度</span></span><br><span class="line">encode.add(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 字符串内容</span></span><br><span class="line">encode.add(<span class="string">"foobar"</span>);</span><br><span class="line">encode.add(CRLF);</span><br></pre></td></tr></table></figure><p><code>RESP</code>数组中也存在<code>Null</code>值的概念，下面称为<code>RESP Null Array</code>。处于历史原因，<code>RESP</code>数组中采用了另一种特殊的编码格式定义<code>Null</code>值，区别于定长字符串中的<code>Null</code>值字符串。例如，<code>BLPOP</code>命令执行超时的时候，就会返回一个<code>RESP Null Array</code>类型的响应。<code>RESP Null Array</code>的编码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*-1\r\n</span><br></pre></td></tr></table></figure><p>当<code>Redis</code>服务端的回复是<code>RESP Null Array</code>类型的时候，客户端应该返回一个<code>Null</code>对象，而不是一个空数组或者空列表。这一点比较重要，它是区分回复是空数组（也就是命令正确执行完毕，返回结果正常）或者其他原因（如<code>BLPOP</code>命令的超时等）的关键。</p><p><code>RESP</code>数组的元素也可以是<code>RESP</code>数组，下面是一个包含2个<code>RESP</code>数组类型的元素的<code>RESP</code>数组，编码如下（为了看得更清楚，分多行进行编码，实际上不能这样做）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 元素个数</span></span><br><span class="line">*2\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第1个RESP数组元素</span></span><br><span class="line">*3\r\n</span><br><span class="line">:1\r\n</span><br><span class="line">:2\r\n</span><br><span class="line">:3\r\n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第2个RESP数组元素</span></span><br><span class="line">*2\r\n</span><br><span class="line">+Foo\r\n</span><br><span class="line">-Bar\r\n</span><br></pre></td></tr></table></figure><p>上面的<code>RESP</code>数组的包含2个<code>RESP</code>数组类型的元素，第1个<code>RESP</code>数组元素包含3个整型类型的元素，而第2个<code>RESP</code>数组元素包含1个简单字符串类型的元素和1个错误消息类型的元素。</p><p><strong><code>RESP</code>数组中的Null元素</strong></p><p><code>RESP</code>数组中的单个元素也有<code>Null</code>值的概念，下面称为<code>Null</code>元素。<code>Redis</code>服务端回复如果是<code>RESP</code>数组类型，并且<code>RESP</code>数组中存在<code>Null</code>元素，那么意味着元素丢失，绝对不能用空字符串替代。缺少指定键的前提下，当与<code>GET</code>模式选项一起使用时，<code>SORT</code>命令可能会发生这种情况。</p><p>下面是一个包含<code>Null</code>元素的<code>RESP</code>数组的例子（为了看得更清楚，分多行进行编码，实际上不能这样做）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*3\r\n</span><br><span class="line"><span class="meta">$</span><span class="bash">3\r\n</span></span><br><span class="line">foo\r\n</span><br><span class="line"><span class="meta">$</span><span class="bash">-1\r\n</span></span><br><span class="line"><span class="meta">$</span><span class="bash">3\r\n</span></span><br><span class="line">bar\r\n</span><br></pre></td></tr></table></figure><p><code>RESP</code>数组中的第2个元素是<code>Null</code>元素，客户端<code>API</code>最终返回的内容应该是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ruby</span></span><br><span class="line">["foo",nil,"bar"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Java</span></span><br><span class="line">["foo",null,"bar"]</span><br></pre></td></tr></table></figure><h2 id="RESP其他相关内容">RESP其他相关内容</h2><p>主要包括：</p><ul><li>将命令发送到Redis服务端的示例。</li><li>批量命令与管道。</li><li>内联命令（<code>Inline Commands</code>）。</li></ul><p>其实文档中还有一节使用<code>C</code>语言编写高性能<code>RESP</code>解析器，这里不做翻译，因为掌握<code>RESP</code>的相关内容后，可以基于任何语言编写解析器。</p><h3 id="将命令发送到Redis服务端">将命令发送到Redis服务端</h3><p>如果已经相对熟悉<code>RESP</code>中的序列化格式，那么编写<code>Redis</code>客户端类库就会变得很容易。我们可以进一步指定客户端和服务器之间的交互方式：</p><ul><li><code>Redis</code>客户端向<code>Redis</code>服务端发送仅仅包含定长字符串类型元素的<code>RESP</code>数组。</li><li><code>Redis</code>服务端可以采用任意一种<code>RESP</code>数据类型向<code>Redis</code>客户端进行回复，具体的数据类型一般取决于命令类型。</li></ul><p>下面是典型的交互例子：<code>Redis</code>客户端发送命令<code>LLEN mylist</code>以获得<code>KEY</code>为<code>mylist</code>的长度，<code>Redis</code>服务端将以整数类型进行回复，如以下示例所示（<code>C</code>是客户端，<code>S</code>服务器），伪代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C: *2\r\n</span><br><span class="line">C: $4\r\n</span><br><span class="line">C: LLEN\r\n</span><br><span class="line">C: $6\r\n</span><br><span class="line">C: mylist\r\n</span><br><span class="line"></span><br><span class="line">S: :48293\r\n</span><br></pre></td></tr></table></figure><p>为了简单起见，我们使用换行符来分隔协议的不同部分（这里指上面的代码分行展示），但是实际交互的时候<code>Redis</code>客户端在发送<code>*2\r\n$4\r\nLLEN\r\n$6\r\nmylist\r\n</code>的时候是整体发送的。</p><h3 id="批量命令与管道">批量命令与管道</h3><p><code>Redis</code>客户端可以使用相同的连接发送批量命令。<code>Redis</code>支持管道特性，因此<code>Redis</code>客户端可以通过一次写操作发送多个命令，而无需在发送下一个命令之前读取<code>Redis</code>服务端对上一个命令的回复。批量发送命令之后，所有的回复可以在最后得到（合并为一个回复）。更多相关信息可以查看<a href="https://redis.io/topics/pipelining" target="_blank" rel="noopener">Using pipelining to speedup Redis queries</a>。</p><h3 id="内联命令">内联命令</h3><p>有些场景下，我们可能只有<code>telnet</code>命令可以使用，在这种条件下，我们需要发送命令到<code>Redis</code>服务端。尽管<code>Redis</code>协议易于实现，但在交互式会话中并不理想，并且<code>redis-cli</code>有些情况下不一定可用。处于这类原因，<code>Redis</code>设计了一种专为人类设计的命令格式，称为内联命令（<code>Inline Command</code>格式。</p><p>以下是服务器/客户端使用内联命令进行聊天的示例（S代表服务端，C代表客户端）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C: PING</span><br><span class="line">S: +PONG</span><br></pre></td></tr></table></figure><p>以下是使用内联命令返回整数的另一个示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C: EXISTS somekey</span><br><span class="line">S: :0</span><br></pre></td></tr></table></figure><p>基本上只需在<code>telnet</code>会话中编写以空格分隔的参数。由于除了统一的请求协议之外没有命令会以<code>*</code>开头，<code>Redis</code>能够检测到这种情况并解析输入的命令。</p><h2 id="基于RESP编写高性能解析器">基于RESP编写高性能解析器</h2><p>因为<code>JDK</code>原生提供的字节缓冲区<code>java.nio.ByteBuffer</code>存在不能自动扩容、需要切换读写模式等等问题，这里直接引入<code>Netty</code>并且使用<code>Netty</code>提供的<code>ByteBuf</code>进行<code>RESP</code>数据类型解析。编写本文的时候（2019-10-09）<code>Netty</code>的最新版本为<code>4.1.42.Final</code>。引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-buffer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.42.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义解码器接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RespDecoder</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">V <span class="title">decode</span><span class="params">(ByteBuf buffer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespConstants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset ASCII = StandardCharsets.US_ASCII;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset UTF_8 = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> DOLLAR_BYTE = <span class="string">'$'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> ASTERISK_BYTE = <span class="string">'*'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> PLUS_BYTE = <span class="string">'+'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> MINUS_BYTE = <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> COLON_BYTE = <span class="string">':'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMPTY_STRING = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long ZERO = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NEGATIVE_ONE = -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> CR = (<span class="keyword">byte</span>) <span class="string">'\r'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> LF = (<span class="keyword">byte</span>) <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] CRLF = <span class="string">"\r\n"</span>.getBytes(ASCII);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> ReplyType &#123;</span><br><span class="line"></span><br><span class="line">        SIMPLE_STRING,</span><br><span class="line"></span><br><span class="line">        ERROR,</span><br><span class="line"></span><br><span class="line">        INTEGER,</span><br><span class="line"></span><br><span class="line">        BULK_STRING,</span><br><span class="line"></span><br><span class="line">        RESP_ARRAY</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的章节中解析模块的实现已经忽略第一个字节的解析，因为第一个字节是决定具体的数据类型。</p><h3 id="解析简单字符串">解析简单字符串</h3><p>简单字符串类型就是单行字符串，它的解析结果对应的就是<code>Java</code>中的<code>String</code>类型。解码器实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析单行字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineStringDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CodecUtils.X.readLine(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CodecUtils &#123;</span><br><span class="line"></span><br><span class="line">    X;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLineEndIndex</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = buffer.forEachByte(ByteProcessor.FIND_LF);</span><br><span class="line">        <span class="keyword">return</span> (index &gt; <span class="number">0</span> &amp;&amp; buffer.getByte(index - <span class="number">1</span>) == <span class="string">'\r'</span>) ? index : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = findLineEndIndex(buffer);</span><br><span class="line">        <span class="keyword">if</span> (lineEndIndex &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> lineStartIndex = buffer.readerIndex();</span><br><span class="line">            <span class="comment">// 计算字节长度</span></span><br><span class="line">            <span class="keyword">int</span> size = lineEndIndex - lineStartIndex - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">            buffer.readBytes(bytes);</span><br><span class="line">            <span class="comment">// 重置读游标为\r\n之后的第一个字节</span></span><br><span class="line">            buffer.readerIndex(lineEndIndex + <span class="number">1</span>);</span><br><span class="line">            buffer.markReaderIndex();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, RespConstants.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespSimpleStringDecoder</span> <span class="keyword">extends</span> <span class="title">LineStringDecoder</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里抽取出一个类<code>LineStringDecoder</code>用于解析单行字符串，这样在解析错误消息的时候可以做一次继承即可。测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    <span class="comment">// +OK\r\n</span></span><br><span class="line">    buffer.writeBytes(<span class="string">"+OK"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    String value = RespCodec.X.decode(buffer);</span><br><span class="line">    log.info(<span class="string">"Decode result:&#123;&#125;"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decode result:OK</span></span><br></pre></td></tr></table></figure><h3 id="解析错误消息">解析错误消息</h3><p>错误消息的本质也是单行字符串，所以其解码的实现可以和简单字符串的解码实现一致。错误消息数据类型的解码器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespErrorDecoder</span> <span class="keyword">extends</span> <span class="title">LineStringDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    <span class="comment">// -ERR unknown command 'foobar'\r\n</span></span><br><span class="line">    buffer.writeBytes(<span class="string">"-ERR unknown command 'foobar'"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    String value = RespCodec.X.decode(buffer);</span><br><span class="line">    log.info(<span class="string">"Decode result:&#123;&#125;"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decode result:ERR unknown command 'foobar'</span></span><br></pre></td></tr></table></figure><h3 id="解析整型数字">解析整型数字</h3><p>整型数字类型，本质就是需要从字节序列中还原出带符号的64<code>bit</code>的长整型，因为是带符号的，类型标识位<code>:</code>后的第一个字节需要判断是否负数字符<code>-</code>，因为是从左向右解析，然后每解析出一个新的位，当前的数字值要乘<code>10</code>。其解码器的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespIntegerDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = CodecUtils.X.findLineEndIndex(buffer);</span><br><span class="line">        <span class="comment">// 没有行尾，异常</span></span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == lineEndIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">int</span> lineStartIndex = buffer.readerIndex();</span><br><span class="line">        <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">byte</span> firstByte = buffer.getByte(lineStartIndex);</span><br><span class="line">        <span class="comment">// 负数</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.MINUS_BYTE == firstByte) &#123;</span><br><span class="line">            negative = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> digit = firstByte - <span class="string">'0'</span>;</span><br><span class="line">            result = result * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lineStartIndex + <span class="number">1</span>; i &lt; (lineEndIndex - <span class="number">1</span>); i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span> value = buffer.getByte(i);</span><br><span class="line">            <span class="keyword">int</span> digit = value - <span class="string">'0'</span>;</span><br><span class="line">            result = result * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">            result = -result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重置读游标为\r\n之后的第一个字节</span></span><br><span class="line">        buffer.readerIndex(lineEndIndex + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整型数字类型的解析相对复杂，一定要注意负数判断。测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    <span class="comment">// :-1000\r\n</span></span><br><span class="line">    buffer.writeBytes(<span class="string">":-1000"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    Long value = RespCodec.X.decode(buffer);</span><br><span class="line">    log.info(<span class="string">"Decode result:&#123;&#125;"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decode result:-1000</span></span><br></pre></td></tr></table></figure><h3 id="解析定长字符串">解析定长字符串</h3><p>定长字符串类型解析的关键是先读取类型标识符<code>$</code>后的第一个字节序列分块解析成64<code>bit</code>带符号的整数，用来确定后面需要解析的字符串内容的字节长度，然后再按照该长度读取后面的字节。其解码器实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespBulkStringDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = CodecUtils.X.findLineEndIndex(buffer);</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == lineEndIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用RespIntegerDecoder读取长度</span></span><br><span class="line">        Long length = (Long) DefaultRespCodec.DECODERS.get(ReplyType.INTEGER).decode(buffer);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Bulk Null String</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.NEGATIVE_ONE.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Bulk Empty String</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.ZERO.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> RespConstants.EMPTY_STRING;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 真实字节内容的长度</span></span><br><span class="line">        <span class="keyword">int</span> readLength = (<span class="keyword">int</span>) length.longValue();</span><br><span class="line">        <span class="keyword">if</span> (buffer.readableBytes() &gt; readLength) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readLength];</span><br><span class="line">            buffer.readBytes(bytes);</span><br><span class="line">            <span class="comment">// 重置读游标为\r\n之后的第一个字节</span></span><br><span class="line">            buffer.readerIndex(buffer.readerIndex() + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, RespConstants.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    <span class="comment">// $6\r\nthrowable\r\n</span></span><br><span class="line">    buffer = ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    buffer.writeBytes(<span class="string">"$9"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    buffer.writeBytes(<span class="string">"throwable"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    String value = RespCodec.X.decode(buffer);</span><br><span class="line">    log.info(<span class="string">"Decode result:&#123;&#125;"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decode result:throwable</span></span><br></pre></td></tr></table></figure><h3 id="解析RESP数组">解析RESP数组</h3><p><code>RESP</code>数组类型解析的关键：</p><ul><li>先读取类型标识符<code>*</code>后的第一个字节序列分块解析成64<code>bit</code>带符号的整数，确定数组中的元素个数。</li><li>递归解析每个元素。</li></ul><p>参考过不少<code>Redis</code>协议解析框架，不少是用栈或者状态机实现，这里先简单点用递归实现，解码器代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespArrayDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = CodecUtils.X.findLineEndIndex(buffer);</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == lineEndIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析元素个数</span></span><br><span class="line">        Long length = (Long) DefaultRespCodec.DECODERS.get(ReplyType.INTEGER).decode(buffer);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Null Array</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.NEGATIVE_ONE.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Array Empty List</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.ZERO.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Lists.newArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Object&gt; result = Lists.newArrayListWithCapacity((<span class="keyword">int</span>) length.longValue());</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            result.add(DefaultRespCodec.X.decode(buffer));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    <span class="comment">//*2\r\n$3\r\nfoo\r\n$3\r\nbar\r\n</span></span><br><span class="line">    buffer = ByteBufAllocator.DEFAULT.buffer();</span><br><span class="line">    buffer.writeBytes(<span class="string">"*2"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    buffer.writeBytes(<span class="string">"$3"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    buffer.writeBytes(<span class="string">"foo"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    buffer.writeBytes(<span class="string">"$3"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    buffer.writeBytes(<span class="string">"bar"</span>.getBytes(RespConstants.UTF_8));</span><br><span class="line">    buffer.writeBytes(RespConstants.CRLF);</span><br><span class="line">    List value = RespCodec.X.decode(buffer);</span><br><span class="line">    log.info(<span class="string">"Decode result:&#123;&#125;"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decode result:[foo, bar]</span></span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p>对<code>RESP</code>的内容和其编码解码的过程有相对深刻的认识后，就可以基于<code>Netty</code>编写<code>Redis</code>服务的编码解码模块，作为<code>Netty</code>入门的十分有意义的例子。本文的最后一节只演示了<code>RESP</code>的解码部分，编码模块和更多细节会在另一篇用<code>Netty</code>实现<code>Redis</code>客户端的文章中展示。</p><p>参考资料：</p><ul><li><a href="https://redis.io/topics/protocol" target="_blank" rel="noopener">Redis Protocol specification</a></li></ul><h2 id="附录">附录</h2><p>本文涉及的所有代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespConstants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset ASCII = StandardCharsets.US_ASCII;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset UTF_8 = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> DOLLAR_BYTE = <span class="string">'$'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> ASTERISK_BYTE = <span class="string">'*'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> PLUS_BYTE = <span class="string">'+'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> MINUS_BYTE = <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> COLON_BYTE = <span class="string">':'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMPTY_STRING = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long ZERO = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NEGATIVE_ONE = -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> CR = (<span class="keyword">byte</span>) <span class="string">'\r'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> LF = (<span class="keyword">byte</span>) <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] CRLF = <span class="string">"\r\n"</span>.getBytes(ASCII);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> ReplyType &#123;</span><br><span class="line"></span><br><span class="line">        SIMPLE_STRING,</span><br><span class="line"></span><br><span class="line">        ERROR,</span><br><span class="line"></span><br><span class="line">        INTEGER,</span><br><span class="line"></span><br><span class="line">        BULK_STRING,</span><br><span class="line"></span><br><span class="line">        RESP_ARRAY</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CodecUtils &#123;</span><br><span class="line"></span><br><span class="line">    X;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLineEndIndex</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = buffer.forEachByte(ByteProcessor.FIND_LF);</span><br><span class="line">        <span class="keyword">return</span> (index &gt; <span class="number">0</span> &amp;&amp; buffer.getByte(index - <span class="number">1</span>) == <span class="string">'\r'</span>) ? index : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = findLineEndIndex(buffer);</span><br><span class="line">        <span class="keyword">if</span> (lineEndIndex &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> lineStartIndex = buffer.readerIndex();</span><br><span class="line">            <span class="comment">// 计算字节长度</span></span><br><span class="line">            <span class="keyword">int</span> size = lineEndIndex - lineStartIndex - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">            buffer.readBytes(bytes);</span><br><span class="line">            <span class="comment">// 重置读游标为\r\n之后的第一个字节</span></span><br><span class="line">            buffer.readerIndex(lineEndIndex + <span class="number">1</span>);</span><br><span class="line">            buffer.markReaderIndex();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, RespConstants.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RespCodec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RespCodec X = DefaultRespCodec.X;</span><br><span class="line"></span><br><span class="line">    &lt;IN, OUT&gt; <span class="function">OUT <span class="title">decode</span><span class="params">(ByteBuf buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;IN, OUT&gt; <span class="function">ByteBuf <span class="title">encode</span><span class="params">(IN in)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DefaultRespCodec implements RespCodec &#123;</span><br><span class="line"></span><br><span class="line">    X;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;ReplyType, RespDecoder&gt; DECODERS = Maps.newConcurrentMap();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RespDecoder DEFAULT_DECODER = <span class="keyword">new</span> DefaultRespDecoder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DECODERS.put(ReplyType.SIMPLE_STRING, <span class="keyword">new</span> RespSimpleStringDecoder());</span><br><span class="line">        DECODERS.put(ReplyType.ERROR, <span class="keyword">new</span> RespErrorDecoder());</span><br><span class="line">        DECODERS.put(ReplyType.INTEGER, <span class="keyword">new</span> RespIntegerDecoder());</span><br><span class="line">        DECODERS.put(ReplyType.BULK_STRING, <span class="keyword">new</span> RespBulkStringDecoder());</span><br><span class="line">        DECODERS.put(ReplyType.RESP_ARRAY, <span class="keyword">new</span> RespArrayDecoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;IN, OUT&gt; <span class="function">OUT <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OUT) DECODERS.getOrDefault(determineReplyType(buffer), DEFAULT_DECODER).decode(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ReplyType <span class="title">determineReplyType</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> firstByte = buffer.readByte();</span><br><span class="line">        ReplyType replyType;</span><br><span class="line">        <span class="keyword">switch</span> (firstByte) &#123;</span><br><span class="line">            <span class="keyword">case</span> RespConstants.PLUS_BYTE:</span><br><span class="line">                replyType = ReplyType.SIMPLE_STRING;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RespConstants.MINUS_BYTE:</span><br><span class="line">                replyType = ReplyType.ERROR;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RespConstants.COLON_BYTE:</span><br><span class="line">                replyType = ReplyType.INTEGER;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RespConstants.DOLLAR_BYTE:</span><br><span class="line">                replyType = ReplyType.BULK_STRING;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RespConstants.ASTERISK_BYTE:</span><br><span class="line">                replyType = ReplyType.RESP_ARRAY;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"first byte:"</span> + firstByte);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> replyType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;IN, OUT&gt; <span class="function">ByteBuf <span class="title">encode</span><span class="params">(IN in)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"encode"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RespDecoder</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">V <span class="title">decode</span><span class="params">(ByteBuf buffer)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRespDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"decoder"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineStringDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CodecUtils.X.readLine(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespSimpleStringDecoder</span> <span class="keyword">extends</span> <span class="title">LineStringDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespErrorDecoder</span> <span class="keyword">extends</span> <span class="title">LineStringDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespIntegerDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = CodecUtils.X.findLineEndIndex(buffer);</span><br><span class="line">        <span class="comment">// 没有行尾，异常</span></span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == lineEndIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">int</span> lineStartIndex = buffer.readerIndex();</span><br><span class="line">        <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">byte</span> firstByte = buffer.getByte(lineStartIndex);</span><br><span class="line">        <span class="comment">// 负数</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.MINUS_BYTE == firstByte) &#123;</span><br><span class="line">            negative = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> digit = firstByte - <span class="string">'0'</span>;</span><br><span class="line">            result = result * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lineStartIndex + <span class="number">1</span>; i &lt; (lineEndIndex - <span class="number">1</span>); i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span> value = buffer.getByte(i);</span><br><span class="line">            <span class="keyword">int</span> digit = value - <span class="string">'0'</span>;</span><br><span class="line">            result = result * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">            result = -result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重置读游标为\r\n之后的第一个字节</span></span><br><span class="line">        buffer.readerIndex(lineEndIndex + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespBulkStringDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = CodecUtils.X.findLineEndIndex(buffer);</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == lineEndIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Long length = (Long) DefaultRespCodec.DECODERS.get(ReplyType.INTEGER).decode(buffer);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Bulk Null String</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.NEGATIVE_ONE.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Bulk Empty String</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.ZERO.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> RespConstants.EMPTY_STRING;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 真实字节内容的长度</span></span><br><span class="line">        <span class="keyword">int</span> readLength = (<span class="keyword">int</span>) length.longValue();</span><br><span class="line">        <span class="keyword">if</span> (buffer.readableBytes() &gt; readLength) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readLength];</span><br><span class="line">            buffer.readBytes(bytes);</span><br><span class="line">            <span class="comment">// 重置读游标为\r\n之后的第一个字节</span></span><br><span class="line">            buffer.readerIndex(buffer.readerIndex() + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, RespConstants.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespArrayDecoder</span> <span class="keyword">implements</span> <span class="title">RespDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(ByteBuf buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineEndIndex = CodecUtils.X.findLineEndIndex(buffer);</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == lineEndIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析元素个数</span></span><br><span class="line">        Long length = (Long) DefaultRespCodec.DECODERS.get(ReplyType.INTEGER).decode(buffer);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Null Array</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.NEGATIVE_ONE.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Array Empty List</span></span><br><span class="line">        <span class="keyword">if</span> (RespConstants.ZERO.equals(length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Lists.newArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Object&gt; result = Lists.newArrayListWithCapacity((<span class="keyword">int</span>) length.longValue());</span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            result.add(DefaultRespCodec.X.decode(buffer));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（本文完 e-a-20191009 c-2-d）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;最近学习&lt;code&gt;Netty&lt;/code&gt;的时候想做一个基于&lt;code&gt;Redis&lt;/code&gt;服务协议的编码解码模块，过程中顺便阅读了&lt;code&gt;Redis&lt;/code&gt;服务序列化协议&lt;code&gt;RESP&lt;/code&gt;，结合自己的理解对文档进行了翻译并且简单实现了&lt;code&gt;RESP&lt;/code&gt;基于&lt;code&gt;Java&lt;/code&gt;语言的解析。编写本文的使用使用的&lt;code&gt;JDK&lt;/code&gt;版本为&lt;code&gt;[8+]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/categories/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/categories/Middleware/Redis/"/>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/tags/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis5.x哨兵搭建手记</title>
    <link href="http://throwable.club/2019/10/07/redis-server-sentinel-install-guide/"/>
    <id>http://throwable.club/2019/10/07/redis-server-sentinel-install-guide/</id>
    <published>2019-10-06T17:48:24.000Z</published>
    <updated>2019-11-28T17:01:08.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提">前提</h2><p><code>Redis5.x</code>之后，单机、哨兵、集群搭建的难度已经简化。鉴于目前看到太多文章都是复制粘贴以往一些<code>3.x</code>版本的一些内容，所以打算基于当前<code>Redis</code>的最新版本做一次单机、哨兵和集群的搭建，记录一下过程步骤和遇到的问题。编写本文的时间是2019年10月6日（国庆假期…），当前<code>Redis</code>的最新版本为<strong>5.0.5</strong>。操作系统用的是虚拟机里面安装的<code>CentOS 7</code>。先确定已经安装好<code>Redis</code>服务，可以参考笔者写的前一篇文章：<a href="http://www.throwable.club/2019/10/06/redis-server-single-install-guide" target="_blank" rel="noopener">《Redis5.x单机服务搭建手记》</a>。出于书写习惯，本文有可能把哨兵称为<code>Sentinel</code>、<code>Redis Sentinel</code>、哨兵或者<code>Redis</code>哨兵，这四个名词是等价的。</p><a id="more"></a><h2 id="哨兵简介">哨兵简介</h2><p>一定要有一个概念：哨兵实例也是特殊的<code>Redis</code>实例，也就是哨兵实例是独立的进程，多个哨兵实例可以搭建主从（<code>Master-Slave</code>），它们承担的职责和普通的<code>Redis</code>实例不一样。下面是官方文档中对哨兵的介绍：</p><p><code>Redis</code>哨兵为<code>Redis</code>提供了高可用性，意味着可以使用哨兵创建<code>Redis</code>服务部署，该部署可以在无需人工干预的情况下抵御某些类型的故障。<code>Redis</code>哨兵还提供其他功能，如监视、通知，并且为客户端提供配置入口（<code>acts as a configuration provider for clients</code>）。下面是<code>Redis</code>哨兵提供的完整功能列表：</p><ul><li>监控（<code>Monitoring</code>）：<code>Sentinel</code>会不断检查<code>Master</code>实例和<code>Slave</code>实例是否按预期工作。</li><li>通知（<code>Notification</code>）：<code>Sentinel</code>可以通过API进行通知受监控的<code>Redis</code>实例出现问题。</li><li>自动故障转移（<code>Automatic Failover</code>）：如果<code>Master</code>实例未按预期工作，则<code>Sentinel</code>可以启动故障转移程序，在该过程中，会将一个<code>Slave</code>实例提升为<code>Master</code>实例，将其他<code>Slave</code>实例重新配置为使用新的<code>Master</code>实例，并且会通知使用<code>Redis</code>实例的应用程序获取新的地址、连接信息。</li><li>提供配置入口（<code>Configuration provider</code>）：<code>Sentinel</code>充当客户端服务发现的授权来源（<code>a source of authority</code>）：客户端连接到<code>Sentinel</code>，可以询问<code>Redis</code>服务群中的<code>Master</code>实例的地址。如果发生故障转移，<code>Sentinel</code>将通知客户端新的<code>Master</code>实例的地址。</li></ul><p><strong>Sentinel的分布式性质</strong></p><p><code>Redis Sentinel</code>是一个分布式系统，<code>Sentinel</code>采用同一份配置多个<code>Sentinel</code>进程共同协作运行的设计，多<code>Sentinel</code>进程协作的优势如下：</p><ul><li>多个<code>Sentinel</code>实例就给定的主机不再可用这一事实达成共识时，将执行故障检测，从而降低了误报的可能性。</li><li><code>Sentinel</code>群中即使不是所有<code>Sentinel</code>处于可用状态，<code>Sentinel</code>群仍然能够正常工作，进行故障转移。</li></ul><h2 id="哨兵搭建">哨兵搭建</h2><p>当前的<code>Redis</code>哨兵版本称为<strong>哨兵2</strong>，哨兵版本1是<code>Redis 2.6</code>的时候引入，现在已经过期，不推荐使用。官方文档中部署哨兵的示例中指出：<strong>一个健壮的部署至少需要三个Sentinel实例</strong>。再加上一般情况下，普通的<code>Redis</code>服务实例为了保证健壮性需要搭建<strong>树状主从</strong>，至少建议部署三个实例。这里的部署拓扑图如下：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201910/r-s-i-g-1.png" alt=""></p><h3 id="环境配置">环境配置</h3><p>按照部署拓扑图，一共部署6个<code>Redis</code>实例，3个普通的<code>Redis</code>实例组成<code>Master-Slave</code>，并且是<strong>树状主从</strong>，3个<code>Redis</code>哨兵实例。为了简单起见，6个<code>Redis</code>实例部署在同一个虚拟机中，注意在生产或者测试环境要分散机器部署，避免所有鸡蛋放在同一个篮子出现机器单点故障。具体信息如下：</p><table><thead><tr><th style="text-align:center">实例标识</th><th style="text-align:center">角色</th><th style="text-align:center">主机IP</th><th style="text-align:center">端口</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><code>Sentinel-1</code></td><td style="text-align:center">-</td><td style="text-align:center"><code>192.168.56.200</code></td><td style="text-align:center">26379</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>Sentinel-2</code></td><td style="text-align:center">-</td><td style="text-align:center"><code>192.168.56.200</code></td><td style="text-align:center">26380</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>Sentinel-3</code></td><td style="text-align:center">-</td><td style="text-align:center"><code>192.168.56.200</code></td><td style="text-align:center">26381</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>Redis-1</code></td><td style="text-align:center"><code>Master</code></td><td style="text-align:center"><code>192.168.56.200</code></td><td style="text-align:center">6380</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>Redis-11</code></td><td style="text-align:center"><code>Slave</code></td><td style="text-align:center"><code>192.168.56.200</code></td><td style="text-align:center">6381</td><td style="text-align:center"><code>Redis-1</code>的从节点</td></tr><tr><td style="text-align:center"><code>Redis-111</code></td><td style="text-align:center"><code>Slave</code></td><td style="text-align:center"><code>192.168.56.200</code></td><td style="text-align:center">6382</td><td style="text-align:center"><code>Redis-11</code>的从节点</td></tr></tbody></table><h3 id="Sentinel配置和配置文件创建">Sentinel配置和配置文件创建</h3><p>先看样板配置文件<code>sentinel.conf</code>的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize no</span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br><span class="line">logfile ""</span><br><span class="line">dir /tmp</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel auth-pass mymaster 123456</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ......</span></span><br></pre></td></tr></table></figure><p>完整的配置属性列表比较少，而<code>port</code>、<code>daemonize</code>、<code>pidfile</code>、<code>logfile</code>、<code>dir</code>、<code>bind</code>等属性上一篇文章已经分析过，这里不再复述。</p><p><strong><code>sentinel monitor &lt;master-group-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;</code></strong></p><ul><li><code>master-group-name</code>：被监控的目标<code>Master</code>实例的名称，这个值可以自定义。</li><li><code>ip</code>：被监控的目标<code>Master</code>实例的服务器地址。</li><li><code>port</code>：被监控的目标<code>Master</code>实例的端口。</li><li><code>quorum</code>：仲裁参数，设置需要多少个<code>Sentinel</code>实例同意才能判断一个被监控的<code>Redis</code>实例失效。换言之，一个 <code>Sentinel</code>群需要获得系统中多数<code>Sentinel</code>的支持， 才能发起一次自动故障迁移。如果我们使用3个<code>Sentinel</code>实例，那么这个值可以定义为2。</li></ul><p><code>sentinel monitor</code>配置项比较特殊，主要用来指定<code>Master</code>角色<code>Redis</code>服务的链接信息。其他5个配置项采用下面的格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel &lt;option_name&gt; &lt;master-group-name&gt; &lt;option_value&gt;</span><br></pre></td></tr></table></figure><ul><li><code>down-after-milliseconds</code>：定了<code>Sentinel</code>认为被监控的<code>Redis</code>服务已经断线的总毫秒数。如果在指定的毫秒数之内，被监控的<code>Redis</code>服务没有向<code>Sentinel</code>回复<code>PING</code>信息或者回复了<code>Error</code>信息，那么<code>Sentinel</code>会开始认为被监控的<code>Redis</code>服务下线（其实这里是主观下线（<code>subjectively down</code>，简称<code>SDOWN</code>）。</li><li><code>parallel-syncs</code>：指定了在执行故障转移时，最多可以有多少<code>Slave</code>实例同时对新的<code>Master</code>实例进行同步，这个数字越小，完成故障转移所需的时间就越长。这里建议参考样板配置中的值，设置为1。</li><li><code>failover-timeout</code>：故障转移超时时间，单位为毫秒。</li><li><code>deny-scripts-reconfig</code>：是否禁用<code>SENTINEL SET</code>命令运行时修改<code>notification-script</code>和<code>client-reconfig-script</code>，默认值为<code>yes</code>。</li><li><code>auth-pass</code>：配置连接<code>Master</code>实例的认证密码，如果<code>Master</code>实例没有设置密码，可以不配置此项属性。</li></ul><p>创建3份<code>Sentinel</code>配置文件<code>26379.conf</code>、<code>26380.conf</code>、<code>26381.conf</code>，它们的内容十分相似，这里只列出<code>26379.conf</code>的内容（<strong>192.168.56.200是笔者虚拟机的主机地址</strong>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile /var/run/sentinel-26379.pid</span><br><span class="line">logfile "/data/redis/sentinel-26379.log"</span><br><span class="line">dir /data/redis</span><br><span class="line">sentinel monitor doge-master 192.168.56.200 6380 2</span><br><span class="line">sentinel down-after-milliseconds doge-master 30000</span><br><span class="line">sentinel parallel-syncs doge-master 1</span><br><span class="line">sentinel failover-timeout doge-master 180000</span><br></pre></td></tr></table></figure><p>另外，创建3份<code>Redis</code>服务的配置文件<code>6380.conf</code>、<code>6381.conf</code>、<code>6382.conf</code>，它们的内容十分相似，这里只列出<code>6380.conf（主节点）</code>的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile /var/run/redis-6380.pid</span><br><span class="line">logfile "/data/redis/redis-6380.log"</span><br><span class="line">dir /data/redis</span><br><span class="line">dbfilename "dump-6380.rdb"</span><br></pre></td></tr></table></figure><p><code>6381.conf（从节点）</code>尾部添加额外配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 192.168.56.200 6380</span><br></pre></td></tr></table></figure><p><code>6382.conf（从节点）</code>尾部添加额外配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 192.168.56.200 6381</span><br></pre></td></tr></table></figure><p>每份配置记得替换好对应的端口号，都准备好了之后，依次启动主节点、两个从节点和3个<code>Sentinel</code>（可以把命令写成一个<code>start.sh</code>，调用<code>sh start.sh</code>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/data/redis/redis-5.0.5/src/redis-server /data/redis/6380.conf</span><br><span class="line">/data/redis/redis-5.0.5/src/redis-server /data/redis/6381.conf</span><br><span class="line">/data/redis/redis-5.0.5/src/redis-server /data/redis/6382.conf</span><br><span class="line"></span><br><span class="line">/data/redis/redis-5.0.5/src/redis-sentinel /data/redis/26379.conf</span><br><span class="line">/data/redis/redis-5.0.5/src/redis-sentinel /data/redis/26380.conf</span><br><span class="line">/data/redis/redis-5.0.5/src/redis-sentinel /data/redis/26381.conf</span><br></pre></td></tr></table></figure><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201910/r-s-i-g-2.png" alt=""></p><p>此时查看哨兵的配置，发现被<code>Redis</code>修改，新增了发现的主从信息和哨兵实例信息：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201910/r-s-i-g-3.png" alt=""></p><p>查看一下哨兵实例的日志：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201910/r-s-i-g-4.png" alt=""></p><p>目前哨兵和<code>Redis</code>服务都正常运作。</p><h3 id="模拟故障转移">模拟故障转移</h3><p>官方文档中建议使用测试命令让<code>Redis</code>实例<code>Sleep</code>一个时间，从而触发故障转移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p [port] DEBUG sleep 30</span><br></pre></td></tr></table></figure><p>先查看当前的<code>Master</code>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# redis-cli -p 26379 </span><br><span class="line">127.0.0.1:26379&gt; SENTINEL get-master-addr-by-name doge-master</span><br><span class="line">1) "127.0.0.1"</span><br><span class="line">2) "6380"</span><br></pre></td></tr></table></figure><p>再对<code>Master</code>实例执行<code>Sleep</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6380 DEBUG sleep 40</span><br></pre></td></tr></table></figure><p>该命令会阻塞直到40秒后，控制台释放后，再查看当前的<code>Master</code>实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:26379&gt; SENTINEL get-master-addr-by-name doge-master</span><br><span class="line">1) "127.0.0.1"</span><br><span class="line">2) "6381"</span><br><span class="line">127.0.0.1:26379&gt;</span><br></pre></td></tr></table></figure><p>可见，已经成功切换<code>Master</code>实例为<code>6381</code>。那么，当前的<code>Master-Slave</code>的拓扑关系到底是怎么样的？这个时候先看一下<code>Sentinel</code>的日志：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201910/r-s-i-g-5.png" alt=""></p><p>这里可以看出了，恢复后的<code>6380</code>实例重新成为了<code>Slave</code>角色，感觉有点翻车了，<strong>原来的树状主从部署变回了一主多从</strong>，笔者开始不相信，于是从当前的<code>Master</code>实例查看了一下主从信息：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201910/r-s-i-g-6.png" alt=""></p><p>确实如此，再检查了一下旧的主节点<code>6380</code>的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile "/var/run/redis-6380.pid"</span><br><span class="line">logfile "/data/redis/redis-6380.log"</span><br><span class="line">dir "/data/redis"</span><br><span class="line">dbfilename "dump-6380.rdb"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generated by CONFIG REWRITE</span></span><br><span class="line">replicaof 192.168.56.200 6381</span><br></pre></td></tr></table></figure><p>发现，最后一行被新增了内容，它成为了从节点。这一点如果不实践，恐怕不知道会衍生出这种结果。画了个图表明一下整个过程：</p><p><img src="https://throwable-blog-1256189093.cos.ap-guangzhou.myqcloud.com/201910/r-s-i-g-7.png" alt=""></p><p>这个问题暂时不深入探究，目前知道结果如此即可。</p><h2 id="客户端代码测试">客户端代码测试</h2><p>既然哨兵搭建完了，可以用<code>Java</code>客户端连接进行一些简单的操作。使用的是<code>Lettuce</code>驱动：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSentinel</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RedisURI uri = RedisURI.builder()</span><br><span class="line">            .withSentinelMasterId(<span class="string">"doge-master"</span>)</span><br><span class="line">            .withSentinel(<span class="string">"192.168.56.200"</span>, <span class="number">26379</span>)</span><br><span class="line">            .build();</span><br><span class="line">    RedisClient redisClient = RedisClient.create(uri);</span><br><span class="line">    StatefulRedisMasterSlaveConnection&lt;String, String&gt; connection = MasterSlave.connect(redisClient, <span class="keyword">new</span> Utf8StringCodec(), uri);</span><br><span class="line">    connection.setReadFrom(ReadFrom.SLAVE_PREFERRED);</span><br><span class="line">    RedisCommands&lt;String, String&gt; commands = connection.sync();</span><br><span class="line">    String result = commands.ping();</span><br><span class="line">    log.info(<span class="string">"PING:&#123;&#125;"</span>, result);</span><br><span class="line">    commands.setex(<span class="string">"name"</span>, <span class="number">5</span>, <span class="string">"throwable"</span>);</span><br><span class="line">    result = commands.get(<span class="string">"name"</span>);</span><br><span class="line">    log.info(<span class="string">"Get value:&#123;&#125;"</span>, result);</span><br><span class="line">    connection.close();</span><br><span class="line">    redisClient.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PING:PONG</span><br><span class="line">Get value:throwable</span><br></pre></td></tr></table></figure><h2 id="小结">小结</h2><p><code>Redis</code>哨兵搭建相对简单，但是需要注意<code>Redis</code>主从配置和<code>Sentinel</code>配置，一些命令可以直接写成<code>shell</code>脚本方便一键<code>shutdown</code>或者重启。在测试故障转移的时候发现了树状主从会变成一主多从，这个问题后面会分析。</p><p>参考资料：</p><ul><li><a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">Redis Sentinel Documentation</a></li></ul><p>（本文完 c-1-d e-a-20191007）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Redis5.x&lt;/code&gt;之后，单机、哨兵、集群搭建的难度已经简化。鉴于目前看到太多文章都是复制粘贴以往一些&lt;code&gt;3.x&lt;/code&gt;版本的一些内容，所以打算基于当前&lt;code&gt;Redis&lt;/code&gt;的最新版本做一次单机、哨兵和集群的搭建，记录一下过程步骤和遇到的问题。编写本文的时间是2019年10月6日（国庆假期…），当前&lt;code&gt;Redis&lt;/code&gt;的最新版本为&lt;strong&gt;5.0.5&lt;/strong&gt;。操作系统用的是虚拟机里面安装的&lt;code&gt;CentOS 7&lt;/code&gt;。先确定已经安装好&lt;code&gt;Redis&lt;/code&gt;服务，可以参考笔者写的前一篇文章：&lt;a href=&quot;http://www.throwable.club/2019/10/06/redis-server-single-install-guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Redis5.x单机服务搭建手记》&lt;/a&gt;。出于书写习惯，本文有可能把哨兵称为&lt;code&gt;Sentinel&lt;/code&gt;、&lt;code&gt;Redis Sentinel&lt;/code&gt;、哨兵或者&lt;code&gt;Redis&lt;/code&gt;哨兵，这四个名词是等价的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/categories/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/categories/Middleware/Redis/"/>
    
    
      <category term="Middleware" scheme="http://throwable.club/blog/tags/Middleware/"/>
    
      <category term="Redis" scheme="http://throwable.club/blog/tags/Redis/"/>
    
  </entry>
  
</feed>
